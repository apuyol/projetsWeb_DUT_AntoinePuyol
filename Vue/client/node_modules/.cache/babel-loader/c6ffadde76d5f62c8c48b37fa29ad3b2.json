{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Utilities\n\nimport { computed, inject, isRef } from 'vue';\nimport { defineComponent, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport var IconSymbol = Symbol[\"for\"]('vuetify:icons');\nexport var makeIconProps = propsFactory({\n  icon: {\n    type: [String, Object],\n    required: true\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true\n  }\n}, 'icon');\nexport var VComponentIcon = defineComponent({\n  name: 'VComponentIcon',\n  props: makeIconProps(),\n  setup: function setup(props) {\n    return function () {\n      return _createVNode(props.tag, null, {\n        \"default\": function _default() {\n          return [_createVNode(props.icon, null, null)];\n        }\n      });\n    };\n  }\n});\nexport var VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n  inheritAttrs: false,\n  props: makeIconProps(),\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs;\n    return function () {\n      return _createVNode(props.tag, _mergeProps(attrs, {\n        \"style\": null\n      }), {\n        \"default\": function _default() {\n          return [_createVNode(\"svg\", {\n            \"class\": \"v-icon__svg\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"viewBox\": \"0 0 24 24\",\n            \"role\": \"img\",\n            \"aria-hidden\": \"true\"\n          }, [_createVNode(\"path\", {\n            \"d\": props.icon\n          }, null)])];\n        }\n      });\n    };\n  }\n});\nexport var VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n  props: makeIconProps(),\n  setup: function setup(props) {\n    return function () {\n      return _createVNode(props.tag, null, {\n        \"default\": function _default() {\n          return [props.icon];\n        }\n      });\n    };\n  }\n});\nexport var VClassIcon = defineComponent({\n  name: 'VClassIcon',\n  props: makeIconProps(),\n  setup: function setup(props) {\n    return function () {\n      return _createVNode(props.tag, {\n        \"class\": props.icon\n      }, null);\n    };\n  }\n});\nexport var defaultSets = {\n  svg: {\n    component: VSvgIcon\n  },\n  \"class\": {\n    component: VClassIcon\n  }\n}; // Composables\n\nexport var useIcon = function useIcon(props) {\n  var icons = inject(IconSymbol);\n  if (!icons) throw new Error('Missing Vuetify Icons provide!');\n  var iconData = computed(function () {\n    var iconAlias = isRef(props) ? props.value : props.icon;\n    if (!iconAlias) throw new Error('Icon value is undefined or null');\n    var icon = iconAlias;\n\n    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {\n      var _icons$aliases;\n\n      icon = (_icons$aliases = icons.aliases) == null ? void 0 : _icons$aliases[iconAlias.slice(iconAlias.indexOf('$') + 1)];\n    }\n\n    if (!icon) throw new Error(\"Could not find aliased icon \\\"\".concat(iconAlias, \"\\\"\"));\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon: icon\n      };\n    }\n\n    var iconSetName = Object.keys(icons.sets).find(function (setName) {\n      return typeof icon === 'string' && icon.startsWith(\"\".concat(setName, \":\"));\n    });\n    var iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon;\n    var iconSet = icons.sets[iconSetName != null ? iconSetName : icons.defaultSet];\n    return {\n      component: iconSet.component,\n      icon: iconName\n    };\n  });\n  return {\n    iconData: iconData\n  };\n};","map":{"version":3,"mappings":"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","names":["computed","inject","isRef","defineComponent","propsFactory","IconSymbol","Symbol","makeIconProps","icon","type","String","Object","required","tag","VComponentIcon","name","props","setup","VSvgIcon","inheritAttrs","_ref","attrs","VLigatureIcon","VClassIcon","defaultSets","svg","component","class","useIcon","icons","Error","iconData","iconAlias","value","includes","aliases","_icons$aliases","slice","indexOf","iconSetName","keys","sets","find","setName","startsWith","iconName","length","iconSet","defaultSet"],"sources":["../../src/composables/icons.tsx"],"sourcesContent":["// Utilities\nimport { computed, inject, isRef } from 'vue'\nimport { defineComponent, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, JSXComponent, PropType, Ref } from 'vue'\n\nexport type IconValue = string | JSXComponent\n\nexport interface IconAliases {\n  [name: string]: IconValue\n  complete: IconValue\n  cancel: IconValue\n  close: IconValue\n  delete: IconValue\n  clear: IconValue\n  success: IconValue\n  info: IconValue\n  warning: IconValue\n  error: IconValue\n  prev: IconValue\n  next: IconValue\n  checkboxOn: IconValue\n  checkboxOff: IconValue\n  checkboxIndeterminate: IconValue\n  delimiter: IconValue\n  sort: IconValue\n  expand: IconValue\n  menu: IconValue\n  subgroup: IconValue\n  dropdown: IconValue\n  radioOn: IconValue\n  radioOff: IconValue\n  edit: IconValue\n  ratingEmpty: IconValue\n  ratingFull: IconValue\n  ratingHalf: IconValue\n  loading: IconValue\n  first: IconValue\n  last: IconValue\n  unfold: IconValue\n  file: IconValue\n  plus: IconValue\n  minus: IconValue\n}\n\nexport interface IconProps {\n  tag: string\n  icon: IconValue\n  disabled?: Boolean\n}\n\ntype IconComponent = JSXComponent<IconProps>\n\nexport interface IconSet {\n  component: IconComponent\n}\n\nexport type IconOptions = {\n  defaultSet: string\n  aliases?: Partial<IconAliases>\n  sets: Record<string, IconSet>\n}\n\ntype IconInstance = {\n  component: IconComponent\n  icon: IconValue\n}\n\nexport const IconSymbol: InjectionKey<IconOptions> = Symbol.for('vuetify:icons')\n\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: [String, Object] as PropType<IconValue>,\n    required: true,\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true,\n  },\n}, 'icon')\n\nexport const VComponentIcon = defineComponent({\n  name: 'VComponentIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return (\n        <props.tag>\n          <props.icon />\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n\n  inheritAttrs: false,\n\n  props: makeIconProps(),\n\n  setup (props, { attrs }) {\n    return () => {\n      return (\n        <props.tag { ...attrs } style={ null }>\n          <svg\n            class=\"v-icon__svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n          >\n            <path d={ props.icon as string }></path>\n          </svg>\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag>{ props.icon }</props.tag>\n    }\n  },\n})\n\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag class={ props.icon }></props.tag>\n    }\n  },\n})\n\nexport const defaultSets: Record<string, IconSet> = {\n  svg: {\n    component: VSvgIcon,\n  },\n  class: {\n    component: VClassIcon,\n  },\n}\n\n// Composables\nexport const useIcon = (props: Ref<string | undefined> | { icon?: IconValue }) => {\n  const icons = inject(IconSymbol)\n\n  if (!icons) throw new Error('Missing Vuetify Icons provide!')\n\n  const iconData: Ref<IconInstance> = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon\n\n    if (!iconAlias) throw new Error('Icon value is undefined or null')\n\n    let icon: IconValue | undefined = iconAlias\n\n    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {\n      icon = icons.aliases?.[iconAlias.slice(iconAlias.indexOf('$') + 1)]\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`)\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon,\n      }\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(\n      setName => typeof icon === 'string' && icon.startsWith(`${setName}:`)\n    )\n\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon\n    const iconSet = icons.sets[iconSetName ?? icons.defaultSet]\n\n    return {\n      component: iconSet.component,\n      icon: iconName,\n    }\n  })\n\n  return { iconData }\n}\n"]},"metadata":{},"sourceType":"module"}