{"ast":null,"code":"/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n// MAGICAL NUMBERS\n// sRGB Conversion to Relative Luminance (Y)\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nvar mainTRC = 2.4;\nvar Rco = 0.2126729; // sRGB Red Coefficient (from matrix)\n\nvar Gco = 0.7151522; // sRGB Green Coefficient (from matrix)\n\nvar Bco = 0.0721750; // sRGB Blue Coefficient (from matrix)\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\n\nvar normBG = 0.55;\nvar normTXT = 0.58;\nvar revTXT = 0.57;\nvar revBG = 0.62; // For Clamping and Scaling Values\n\nvar blkThrs = 0.03; // Level that triggers the soft black clamp\n\nvar blkClmp = 1.45; // Exponent for the soft black clamp curve\n\nvar deltaYmin = 0.0005; // Lint trap\n\nvar scaleBoW = 1.25; // Scaling for dark text on light\n\nvar scaleWoB = 1.25; // Scaling for light text on dark\n\nvar loConThresh = 0.078; // Threshold for new simple offset scale\n\nvar loConFactor = 12.82051282051282; // = 1/0.078,\n\nvar loConOffset = 0.06; // The simple offset\n\nvar loClip = 0.001; // Output clip (lint trap #2)\n\nexport function APCAcontrast(text, background) {\n  // Linearize sRGB\n  var Rtxt = Math.pow((text >> 16 & 0xff) / 255, mainTRC);\n  var Gtxt = Math.pow((text >> 8 & 0xff) / 255, mainTRC);\n  var Btxt = Math.pow((text >> 0 & 0xff) / 255, mainTRC);\n  var Rbg = Math.pow((background >> 16 & 0xff) / 255, mainTRC);\n  var Gbg = Math.pow((background >> 8 & 0xff) / 255, mainTRC);\n  var Bbg = Math.pow((background >> 0 & 0xff) / 255, mainTRC); // Apply the standard coefficients and sum to Y\n\n  var Ytxt = Rtxt * Rco + Gtxt * Gco + Btxt * Bco;\n  var Ybg = Rbg * Rco + Gbg * Gco + Bbg * Bco; // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n\n  if (Ytxt <= blkThrs) Ytxt += Math.pow(blkThrs - Ytxt, blkClmp);\n  if (Ybg <= blkThrs) Ybg += Math.pow(blkThrs - Ybg, blkClmp); // Return 0 Early for extremely low ∆Y (lint trap #1)\n\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0; // SAPC CONTRAST\n\n  var outputContrast; // For weighted final values\n\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n    var SAPC = (Math.pow(Ybg, normBG) - Math.pow(Ytxt, normTXT)) * scaleBoW; // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n\n    outputContrast = SAPC < loClip ? 0.0 : SAPC < loConThresh ? SAPC - SAPC * loConFactor * loConOffset : SAPC - loConOffset;\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n    var _SAPC = (Math.pow(Ybg, revBG) - Math.pow(Ytxt, revTXT)) * scaleWoB;\n\n    outputContrast = _SAPC > -loClip ? 0.0 : _SAPC > -loConThresh ? _SAPC - _SAPC * loConFactor * loConOffset : _SAPC + loConOffset;\n  }\n\n  return outputContrast * 100;\n}","map":{"version":3,"mappings":"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","names":["mainTRC","Rco","Gco","Bco","normBG","normTXT","revTXT","revBG","blkThrs","blkClmp","deltaYmin","scaleBoW","scaleWoB","loConThresh","loConFactor","loConOffset","loClip","APCAcontrast","text","background","Rtxt","Gtxt","Btxt","Rbg","Gbg","Bbg","Ytxt","Ybg","Math","abs","outputContrast","SAPC"],"sources":["../../../src/util/color/APCA.ts"],"sourcesContent":["/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: number, background: number) {\n  // Linearize sRGB\n  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC\n  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC\n  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC\n\n  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC\n  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC\n  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low ∆Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n"]},"metadata":{},"sourceType":"module"}