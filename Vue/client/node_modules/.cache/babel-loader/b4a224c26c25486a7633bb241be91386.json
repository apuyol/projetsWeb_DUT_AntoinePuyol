{"ast":null,"code":"import _defineProperty from \"D:/Stage/App/xr-place-application/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// Components\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport var makeFocusProps = propsFactory({\n  focused: Boolean\n}, 'focus');\nexport function useFocus(props) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  var isFocused = useProxiedModel(props, 'focused');\n  var focusClasses = computed(function () {\n    return _defineProperty({}, \"\".concat(name, \"--focused\"), isFocused.value);\n  });\n\n  function focus() {\n    isFocused.value = true;\n  }\n\n  function blur() {\n    isFocused.value = false;\n  }\n\n  return {\n    focusClasses: focusClasses,\n    isFocused: isFocused,\n    focus: focus,\n    blur: blur\n  };\n}","map":{"version":3,"mappings":";AAAA;SACSA,uB,sBAET;;AACA,SAASC,QAAT,QAAyB,KAAzB;SACSC,wBAAwBC,oB,qBAEjC;AAMA;;AACA,OAAO,IAAMC,cAAc,GAAGD,YAAY,CAAC;AACzCE,SAAO,EAAEC;AADgC,CAAD,EAEvC,OAFuC,CAAnC;AAIP,OAAO,SAASC,QAAT,CACLC,KADK,EAGL;AAAA,MADAC,IACA,uEADOP,sBAAsB,EAC7B;AACA,MAAMQ,SAAS,GAAGV,eAAe,CAACQ,KAAD,EAAQ,SAAR,CAAjC;AACA,MAAMG,YAAY,GAAGV,QAAQ,CAAC,YAAM;AAClC,yCACMQ,IADN,gBACwBC,SAAS,CAACE,KADlC;AAD2B,IAA7B;;AAMA,WAASC,KAAT,GAAkB;AAChBH,aAAS,CAACE,KAAVF,GAAkB,IAAlBA;AACD;;AAED,WAASI,IAAT,GAAiB;AACfJ,aAAS,CAACE,KAAVF,GAAkB,KAAlBA;AACD;;AAED,SAAO;AAAEC,gBAAF,EAAEA,YAAF;AAAgBD,aAAhB,EAAgBA,SAAhB;AAA2BG,SAA3B,EAA2BA,KAA3B;AAAkCC;AAAlC,GAAP;AACD","names":["useProxiedModel","computed","getCurrentInstanceName","propsFactory","makeFocusProps","focused","Boolean","useFocus","props","name","isFocused","focusClasses","value","focus","blur"],"sources":["../../src/composables/focus.ts"],"sourcesContent":["// Components\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface FocusProps {\n  focused: boolean\n  'onUpdate:focused': ((val: boolean) => void) | undefined\n}\n\n// Composables\nexport const makeFocusProps = propsFactory({\n  focused: Boolean,\n}, 'focus')\n\nexport function useFocus (\n  props: FocusProps,\n  name = getCurrentInstanceName()\n) {\n  const isFocused = useProxiedModel(props, 'focused')\n  const focusClasses = computed(() => {\n    return ({\n      [`${name}--focused`]: isFocused.value,\n    })\n  })\n\n  function focus () {\n    isFocused.value = true\n  }\n\n  function blur () {\n    isFocused.value = false\n  }\n\n  return { focusClasses, isFocused, focus, blur }\n}\n"]},"metadata":{},"sourceType":"module"}