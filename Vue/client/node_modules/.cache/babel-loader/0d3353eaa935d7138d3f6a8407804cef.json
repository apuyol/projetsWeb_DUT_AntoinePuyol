{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n// Utilities\nimport { computed, inject, provide, ref, unref } from 'vue';\nimport { mergeDeep } from \"../util/helpers.mjs\"; // Types\n\nexport var DefaultsSymbol = Symbol[\"for\"]('vuetify:defaults');\nexport function createDefaults(options) {\n  return ref(options != null ? options : {});\n}\nexport function useDefaults() {\n  var defaults = inject(DefaultsSymbol);\n  if (!defaults) throw new Error('[Vuetify] Could not find defaults instance');\n  return defaults;\n}\nexport function provideDefaults(defaults, options) {\n  var injectedDefaults = useDefaults();\n  var providedDefaults = ref(defaults);\n  var newDefaults = computed(function () {\n    var scoped = unref(options == null ? void 0 : options.scoped);\n    var reset = unref(options == null ? void 0 : options.reset);\n    var root = unref(options == null ? void 0 : options.root);\n    var properties = mergeDeep(providedDefaults.value, {\n      prev: injectedDefaults.value\n    });\n    if (scoped) return properties;\n\n    if (reset || root) {\n      var len = Number(reset || Infinity);\n\n      for (var i = 0; i <= len; i++) {\n        if (!properties.prev) break;\n        properties = properties.prev;\n      }\n\n      return properties;\n    }\n\n    return mergeDeep(properties.prev, properties);\n  });\n  provide(DefaultsSymbol, newDefaults);\n  return newDefaults;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;SACSC,iB,uBAET;;AAWA,OAAO,IAAMC,cAAmD,GAAGC,MAAM,OAANA,CAAW,kBAAXA,CAA5D;AAEP,OAAO,SAASC,cAAT,CAAyBC,OAAzB,EAA4E;AACjF,SAAON,GAAG,CAACM,OAAD,QAACA,aAAW,EAAZ,CAAV;AACD;AAED,OAAO,SAASC,WAAT,GAAwB;AAC7B,MAAMC,QAAQ,GAAGV,MAAM,CAACK,cAAD,CAAvB;AAEA,MAAI,CAACK,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AAEf,SAAOD,QAAP;AACD;AAED,OAAO,SAASE,eAAT,CACLF,QADK,EAELF,OAFK,EAOL;AACA,MAAMK,gBAAgB,GAAGJ,WAAW,EAApC;AACA,MAAMK,gBAAgB,GAAGZ,GAAG,CAACQ,QAAD,CAA5B;AAEA,MAAMK,WAAW,GAAGhB,QAAQ,CAAC,YAAM;AACjC,QAAMiB,MAAM,GAAGb,KAAK,CAACK,OAAD,QAACA,GAAD,MAACA,UAAO,CAAEQ,MAAV,CAApB;AACA,QAAMC,KAAK,GAAGd,KAAK,CAACK,OAAD,QAACA,GAAD,MAACA,UAAO,CAAES,KAAV,CAAnB;AACA,QAAMC,IAAI,GAAGf,KAAK,CAACK,OAAD,QAACA,GAAD,MAACA,UAAO,CAAEU,IAAV,CAAlB;AAEA,QAAIC,UAAU,GAAGf,SAAS,CAACU,gBAAgB,CAACM,KAAlB,EAAyB;AAAEC,UAAI,EAAER,gBAAgB,CAACO;AAAzB,KAAzB,CAA1B;AAEA,QAAIJ,MAAJ,EAAY,OAAOG,UAAP;;AAEZ,QAAIF,KAAK,IAAIC,IAAb,EAAmB;AACjB,UAAMI,GAAG,GAAGC,MAAM,CAACN,KAAK,IAAIO,QAAV,CAAlB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,GAArB,EAA0BG,CAAC,EAA3B,EAA+B;AAC7B,YAAI,CAACN,UAAU,CAACE,IAAhB,EAAsB;AAEtBF,kBAAU,GAAGA,UAAU,CAACE,IAAxBF;AACD;;AAED,aAAOA,UAAP;AACD;;AAED,WAAOf,SAAS,CAACe,UAAU,CAACE,IAAZ,EAAkBF,UAAlB,CAAhB;AArB0B,IAA5B;AAwBAlB,SAAO,CAACI,cAAD,EAAiBU,WAAjB,CAAPd;AAEA,SAAOc,WAAP;AACD","names":["computed","inject","provide","ref","unref","mergeDeep","DefaultsSymbol","Symbol","createDefaults","options","useDefaults","defaults","Error","provideDefaults","injectedDefaults","providedDefaults","newDefaults","scoped","reset","root","properties","value","prev","len","Number","Infinity","i"],"sources":["../../src/composables/defaults.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref, unref } from 'vue'\nimport { mergeDeep } from '@/util/helpers'\n\n// Types\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport interface DefaultsInstance {\n  [key: string]: undefined | Record<string, unknown>\n  global?: Record<string, unknown>\n}\n\nexport type DefaultsOptions = Partial<DefaultsInstance>\n\nexport const DefaultsSymbol: InjectionKey<Ref<DefaultsInstance>> = Symbol.for('vuetify:defaults')\n\nexport function createDefaults (options?: DefaultsInstance): Ref<DefaultsInstance> {\n  return ref(options ?? {})\n}\n\nexport function useDefaults () {\n  const defaults = inject(DefaultsSymbol)\n\n  if (!defaults) throw new Error('[Vuetify] Could not find defaults instance')\n\n  return defaults\n}\n\nexport function provideDefaults (\n  defaults?: MaybeRef<DefaultsInstance | undefined>,\n  options?: {\n    reset?: MaybeRef<number | string | undefined>\n    root?: MaybeRef<boolean | undefined>\n    scoped?: MaybeRef<boolean | undefined>\n  }\n) {\n  const injectedDefaults = useDefaults()\n  const providedDefaults = ref(defaults)\n\n  const newDefaults = computed(() => {\n    const scoped = unref(options?.scoped)\n    const reset = unref(options?.reset)\n    const root = unref(options?.root)\n\n    let properties = mergeDeep(providedDefaults.value, { prev: injectedDefaults.value })\n\n    if (scoped) return properties\n\n    if (reset || root) {\n      const len = Number(reset || Infinity)\n\n      for (let i = 0; i <= len; i++) {\n        if (!properties.prev) break\n\n        properties = properties.prev\n      }\n\n      return properties\n    }\n\n    return mergeDeep(properties.prev, properties)\n  }) as ComputedRef<DefaultsInstance>\n\n  provide(DefaultsSymbol, newDefaults)\n\n  return newDefaults\n}\n"]},"metadata":{},"sourceType":"module"}