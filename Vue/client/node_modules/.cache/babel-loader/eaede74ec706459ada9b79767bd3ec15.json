{"ast":null,"code":"const SLIDE_WIDTH_THRESH = 50; // in px\n\nexport default {\n  props: {\n    modelValue: {\n      type: Number,\n      required: true\n    },\n    list: {\n      type: Array,\n      required: true\n    },\n    backgroundColor: {\n      type: String,\n      default: '#333'\n    },\n    pivot: {\n      type: String,\n      default: 'cursor'\n    },\n    zoomingElastic: {\n      type: Boolean,\n      default: true\n    },\n    limitTranslation: {\n      type: Boolean,\n      default: true\n    },\n    doubleClickToZoom: {\n      type: Boolean,\n      default: true\n    },\n    mouseWheelToZoom: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      zoomerRefs: [],\n      // env states\n      containerWidth: 1,\n      containerHeight: 1,\n      // main states\n      selIndex: this.modelValue,\n      animSelIndex: this.modelValue,\n      currentZoomed: false,\n      autoSliding: false,\n      imageAspectRatios: [],\n      // aspect ratio (width / height) of images\n      // interaction states\n      isPointerDown: false,\n      lastPointerX: 0,\n      slideOffsetX: 0\n    };\n  },\n\n  computed: {\n    middleStyle() {\n      return {\n        left: `${0 + this.slideOffsetX}px`\n      };\n    },\n\n    leftStyle() {\n      return {\n        left: `${-this.containerWidth + this.slideOffsetX}px`\n      };\n    },\n\n    rightStyle() {\n      return {\n        left: `${this.containerWidth + this.slideOffsetX}px`\n      };\n    },\n\n    slideThresh() {\n      return Math.max(SLIDE_WIDTH_THRESH, this.containerWidth * 0.1);\n    }\n\n  },\n  watch: {\n    modelValue(val) {\n      if (val !== this.animSelIndex) {\n        this.selIndex = val;\n        this.animSelIndex = val;\n      }\n    },\n\n    selIndex() {\n      this.$nextTick(() => {\n        this.zoomerRefs.forEach(zoomer => {\n          zoomer.refreshContainerPos();\n        });\n      });\n    }\n\n  },\n\n  mounted() {\n    window.addEventListener('resize', this.onWindowResize);\n    this.onWindowResize();\n  },\n\n  unmounted() {\n    window.removeEventListener('resize', this.onWindowResize);\n  },\n\n  methods: {\n    // api ---------------------------------------------------------------------\n    reset() {\n      this.zoomerRefs.forEach(zoomer => {\n        zoomer.reset();\n      });\n    },\n\n    zoomIn(scale) {\n      if (this.zoomerRefs[1]) this.zoomerRefs[1].zoomIn(scale);\n    },\n\n    zoomOut(scale) {\n      if (this.zoomerRefs[1]) this.zoomerRefs[1].zoomOut(scale);\n    },\n\n    // events ------------------------------------------------------------------\n    onWindowResize() {\n      let styles = window.getComputedStyle(this.$refs.root);\n      this.containerWidth = parseFloat(styles.width);\n      this.containerHeight = parseFloat(styles.height);\n    },\n\n    onPointerMove(deltaX) {\n      if (this.isPointerDown && !this.currentZoomed) {\n        let factor = this.selIndex === 0 && deltaX > 0 && this.slideOffsetX + deltaX > 0 || this.selIndex === this.list.length - 1 && deltaX < 0 && this.slideOffsetX + deltaX < 0 ? 0.3 : 1;\n        this.slideOffsetX += deltaX * factor;\n      }\n    },\n\n    onPointerUp() {\n      if (this.slideOffsetX < -this.slideThresh) {\n        // next page\n        this.paginate(1);\n      } else if (this.slideOffsetX > this.slideThresh) {\n        // prev page\n        this.paginate(-1);\n      } else {\n        // only apply the animation\n        this.paginate(0);\n      }\n    },\n\n    // Stop Firefox dragging the image\n    onImageDragStart(ev) {\n      ev.preventDefault();\n      return false;\n    },\n\n    paginate(deltaIndex) {\n      let targetIndex = this.selIndex + deltaIndex;\n\n      if (targetIndex < 0 || targetIndex >= this.list.length) {\n        this.slideOffsetX = 0;\n        return;\n      }\n\n      this.slideOffsetX = this.containerWidth * -deltaIndex;\n      this.autoSliding = true; // update the selIndex before the animation to remove the delay feeling\n\n      this.$emit('update:modelValue', targetIndex);\n      this.animSelIndex = targetIndex;\n      setTimeout(() => {\n        this.selIndex = targetIndex;\n        this.slideOffsetX = 0;\n        this.autoSliding = false;\n      }, 400);\n    },\n\n    onMouseDown(ev) {\n      this.isPointerDown = true;\n      this.lastPointerX = ev.clientX;\n    },\n\n    onMouseUp(ev) {\n      this.isPointerDown = false;\n      this.onPointerUp();\n    },\n\n    onMouseMove(ev) {\n      if (this.isPointerDown) {\n        this.onPointerMove(ev.clientX - this.lastPointerX);\n        this.lastPointerX = ev.clientX;\n      }\n    },\n\n    onTouchStart(ev) {\n      if (ev.touches.length === 1) {\n        this.isPointerDown = true;\n        this.lastPointerX = ev.touches[0].clientX;\n      }\n    },\n\n    onTouchEnd(ev) {\n      if (ev.touches.length === 0) {\n        this.isPointerDown = false;\n        this.onPointerUp();\n      }\n    },\n\n    onTouchMove(ev) {\n      if (ev.touches.length === 1) {\n        this.onPointerMove(ev.touches[0].clientX - this.lastPointerX);\n        this.lastPointerX = ev.touches[0].clientX;\n      }\n    },\n\n    onImageLoad(index, ev) {\n      let aspectRatio = ev.target.naturalWidth / ev.target.naturalHeight;\n      this.imageAspectRatios[index] = aspectRatio;\n    },\n\n    onImageSwipe(direction) {\n      this.paginate(direction == 'right' ? -1 : 1);\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["SLIDE_WIDTH_THRESH","props","modelValue","type","Number","required","list","Array","backgroundColor","String","default","pivot","zoomingElastic","Boolean","limitTranslation","doubleClickToZoom","mouseWheelToZoom","data","zoomerRefs","containerWidth","containerHeight","selIndex","animSelIndex","currentZoomed","autoSliding","imageAspectRatios","isPointerDown","lastPointerX","slideOffsetX","computed","middleStyle","left","leftStyle","rightStyle","slideThresh","Math","max","watch","val","$nextTick","forEach","zoomer","refreshContainerPos","mounted","window","addEventListener","onWindowResize","unmounted","removeEventListener","methods","reset","zoomIn","scale","zoomOut","styles","getComputedStyle","$refs","root","parseFloat","width","height","onPointerMove","deltaX","factor","length","onPointerUp","paginate","onImageDragStart","ev","preventDefault","deltaIndex","targetIndex","$emit","setTimeout","onMouseDown","clientX","onMouseUp","onMouseMove","onTouchStart","touches","onTouchEnd","onTouchMove","onImageLoad","index","aspectRatio","target","naturalWidth","naturalHeight","onImageSwipe","direction"],"sourceRoot":"","sources":["D:\\Stage\\App\\xr-place-application\\client\\node_modules\\vue-zoomer\\src\\vue-zoomer-gallery.vue"],"sourcesContent":["<template>\n  <!-- touchmove.prevent is used to stop the page scroll elastic effects -->\n  <div\n    ref=\"root\"\n    :class=\"{\n      'anim': autoSliding && !isPointerDown,\n    }\"\n    :style=\"{\n      'background-color': backgroundColor,\n    }\"\n    class=\"vue-zoomer-gallery\"\n    @mousemove=\"onMouseMove\"\n    @mousedown=\"onMouseDown\"\n    @mouseout=\"onMouseUp\"\n    @mouseup=\"onMouseUp\"\n    @touchstart=\"onTouchStart\"\n    @touchend=\"onTouchEnd\"\n    @touchmove.prevent=\"onTouchMove\"\n  >\n    <v-zoomer\n      v-for=\"(n, i) in 3\"\n      :ref=\"el => { zoomerRefs[i] = el }\"\n      :key=\"i + '-' + selIndex\"\n      :class=\"['left', 'middle', 'right'][i]\"\n      class=\"slide\"\n      :style=\"[leftStyle, middleStyle, rightStyle][i]\"\n      :max-scale=\"10\"\n      v-model:zoomed=\"currentZoomed\"\n      :reset-trigger=\"i\"\n      :aspect-ratio=\"imageAspectRatios[selIndex + i - 1] || 1\"\n      :pivot=\"pivot\"\n      :zooming-elastic=\"zoomingElastic\"\n      :limit-translation=\"limitTranslation\"\n      :double-click-to-zoom=\"doubleClickToZoom\"\n      :mouse-wheel-to-zoom=\"mouseWheelToZoom\"\n      @swipe=\"onImageSwipe\"\n    >\n      <img\n        v-if=\"selIndex + i - 1 > -1 && selIndex + i - 1 < list.length\"\n        :src=\"list[selIndex + i - 1]\"\n        draggable=\"false\"\n        style=\"object-fit: contain; width: 100%; height: 100%;\"\n        @load=\"onImageLoad(selIndex + i - 1, $event)\"\n        @dragstart=\"onImageDragStart\"\n      >\n    </v-zoomer>\n  </div>\n</template>\n\n<script>\nconst SLIDE_WIDTH_THRESH = 50 // in px\n\nexport default {\n  props: {\n    modelValue: { type: Number, required: true },\n    list: { type: Array, required: true },\n    backgroundColor: { type: String, default: '#333' },\n    pivot: { type: String, default: 'cursor' },\n    zoomingElastic: { type: Boolean, default: true },\n    limitTranslation: { type: Boolean, default: true },\n    doubleClickToZoom: { type: Boolean, default: true },\n    mouseWheelToZoom: { type: Boolean, default: true },\n  },\n  data () {\n    return {\n      zoomerRefs: [],\n      // env states\n      containerWidth: 1,\n      containerHeight: 1,\n      // main states\n      selIndex: this.modelValue,\n      animSelIndex: this.modelValue,\n      currentZoomed: false,\n      autoSliding: false,\n      imageAspectRatios: [], // aspect ratio (width / height) of images\n      // interaction states\n      isPointerDown: false,\n      lastPointerX: 0,\n      slideOffsetX: 0,\n    }\n  },\n  computed: {\n    middleStyle () {\n      return {\n        left: `${ 0 + this.slideOffsetX }px`,\n      }\n    },\n    leftStyle () {\n      return {\n        left: `${ -this.containerWidth + this.slideOffsetX }px`,\n      }\n    },\n    rightStyle () {\n      return {\n        left: `${ this.containerWidth + this.slideOffsetX }px`,\n      }\n    },\n    slideThresh () {\n      return Math.max(SLIDE_WIDTH_THRESH, this.containerWidth * 0.1)\n    },\n  },\n  watch: {\n    modelValue (val) {\n      if (val !== this.animSelIndex) {\n        this.selIndex = val\n        this.animSelIndex = val\n      }\n    },\n    selIndex() {\n      this.$nextTick(() => {\n        this.zoomerRefs.forEach(zoomer => {\n          zoomer.refreshContainerPos()\n        })\n      })\n    },\n  },\n  mounted () {\n    window.addEventListener('resize', this.onWindowResize)\n    this.onWindowResize()\n  },\n  unmounted () {\n    window.removeEventListener('resize', this.onWindowResize)\n  },\n  methods: {\n    // api ---------------------------------------------------------------------\n    reset () {\n      this.zoomerRefs.forEach(zoomer => {\n        zoomer.reset()\n      })\n    },\n    zoomIn (scale) {\n      if (this.zoomerRefs[1]) this.zoomerRefs[1].zoomIn(scale)\n    },\n    zoomOut (scale) {\n      if (this.zoomerRefs[1]) this.zoomerRefs[1].zoomOut(scale)\n    },\n    // events ------------------------------------------------------------------\n    onWindowResize () {\n      let styles = window.getComputedStyle(this.$refs.root)\n      this.containerWidth = parseFloat(styles.width)\n      this.containerHeight = parseFloat(styles.height)\n    },\n    onPointerMove (deltaX) {\n      if (this.isPointerDown && !this.currentZoomed) {\n        let factor = (\n          (this.selIndex === 0 && deltaX > 0 && this.slideOffsetX + deltaX > 0) ||\n          (this.selIndex === this.list.length - 1 && deltaX < 0 && this.slideOffsetX + deltaX < 0)\n        ) ? 0.3 : 1\n        this.slideOffsetX += deltaX * factor\n      }\n    },\n    onPointerUp () {\n      if (this.slideOffsetX < -this.slideThresh) {\n        // next page\n        this.paginate(1)\n      } else if (this.slideOffsetX > this.slideThresh) {\n        // prev page\n        this.paginate(-1)\n      } else {\n        // only apply the animation\n        this.paginate(0)\n      }\n    },\n    // Stop Firefox dragging the image\n    onImageDragStart(ev) {\n      ev.preventDefault();\n      return false\n    },\n    paginate (deltaIndex) {\n      let targetIndex = this.selIndex + deltaIndex\n      if (targetIndex < 0 || targetIndex >= this.list.length) {\n        this.slideOffsetX = 0\n        return\n      }\n\n      this.slideOffsetX = this.containerWidth * -deltaIndex\n      this.autoSliding = true\n      // update the selIndex before the animation to remove the delay feeling\n      this.$emit('update:modelValue', targetIndex)\n      this.animSelIndex = targetIndex\n      setTimeout(() => {\n        this.selIndex = targetIndex\n        this.slideOffsetX = 0\n        this.autoSliding = false\n      }, 400)\n    },\n    onMouseDown (ev) {\n      this.isPointerDown = true\n      this.lastPointerX = ev.clientX\n    },\n    onMouseUp (ev) {\n      this.isPointerDown = false\n      this.onPointerUp()\n    },\n    onMouseMove (ev) {\n      if (this.isPointerDown) {\n        this.onPointerMove(ev.clientX - this.lastPointerX)\n        this.lastPointerX = ev.clientX\n      }\n    },\n    onTouchStart (ev) {\n      if (ev.touches.length === 1) {\n        this.isPointerDown = true\n        this.lastPointerX = ev.touches[0].clientX\n      }\n    },\n    onTouchEnd (ev) {\n      if (ev.touches.length === 0) {\n        this.isPointerDown = false\n        this.onPointerUp()\n      }\n    },\n    onTouchMove (ev) {\n      if (ev.touches.length === 1) {\n        this.onPointerMove(ev.touches[0].clientX - this.lastPointerX)\n        this.lastPointerX = ev.touches[0].clientX\n      }\n    },\n    onImageLoad (index, ev) {\n      let aspectRatio = ev.target.naturalWidth / ev.target.naturalHeight\n      this.imageAspectRatios[index] = aspectRatio\n    },\n    onImageSwipe (direction) {\n      this.paginate(direction == 'right' ? -1 : 1)\n    },\n  },\n}\n</script>\n\n<style scoped>\n.vue-zoomer-gallery {\n  position: relative;\n  overflow: hidden;\n  user-select: none;\n  min-width: 100px;\n  min-height: 100px;\n}\n.vue-zoomer-gallery > * {\n  display: inline-block;\n}\n.vue-zoomer-gallery.anim .slide {\n  transition: left 0.4s;\n}\n\n.slide {\n  position: absolute;\n  top: 0;\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n  -webkit-user-drag: none;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}