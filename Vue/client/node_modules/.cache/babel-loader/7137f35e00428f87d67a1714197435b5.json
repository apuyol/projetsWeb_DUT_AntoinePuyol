{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSlider.css\"; // Components\n\nimport { VInput } from \"../VInput/index.mjs\";\nimport { VSliderThumb } from \"./VSliderThumb.mjs\";\nimport { VSliderTrack } from \"./VSliderTrack.mjs\"; // Composables\n\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { makeSliderProps, useSlider } from \"./slider.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Helpers\n\nimport { defineComponent } from \"../../util/index.mjs\"; // Types\n\nimport { computed, ref } from 'vue';\nimport { filterInputProps, makeVInputProps } from \"../VInput/VInput.mjs\";\nexport const VSlider = defineComponent({\n  name: 'VSlider',\n  props: { ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n    modelValue: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  emits: {\n    'update:focused': value => true,\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const thumbContainerRef = ref();\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => {\n        var _thumbContainerRef$va;\n\n        return (_thumbContainerRef$va = thumbContainerRef.value) == null ? void 0 : _thumbContainerRef$va.$el;\n      }\n    });\n    const model = useProxiedModel(props, 'modelValue', undefined, v => {\n      const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v;\n      return roundValue(value);\n    });\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const trackStop = computed(() => position(model.value));\n    return () => {\n      const [inputProps, _] = filterInputProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-slider', {\n          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n          'v-slider--focused': isFocused.value,\n          'v-slider--pressed': mousePressed.value,\n          'v-slider--disabled': props.disabled\n        }]\n      }, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id\n          } = _ref2;\n          return _createVNode(\"div\", {\n            \"class\": \"v-slider__container\",\n            \"onMousedown\": !readonly.value ? onSliderMousedown : undefined,\n            \"onTouchstartPassive\": !readonly.value ? onSliderTouchstart : undefined\n          }, [_createVNode(\"input\", {\n            \"id\": id.value,\n            \"name\": props.name || id.value,\n            \"disabled\": props.disabled,\n            \"readonly\": props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value\n          }, null), _createVNode(VSliderTrack, {\n            \"ref\": trackContainerRef,\n            \"start\": 0,\n            \"stop\": trackStop.value\n          }, {\n            'tick-label': slots['tick-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": thumbContainerRef,\n            \"focused\": isFocused.value,\n            \"min\": min.value,\n            \"max\": max.value,\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": v => model.value = v,\n            \"position\": trackStop.value,\n            \"elevation\": props.elevation,\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }, {\n            'thumb-label': slots['thumb-label']\n          })]);\n        }\n      });\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VInput","VSliderThumb","VSliderTrack","makeFocusProps","useFocus","makeSliderProps","useSlider","useProxiedModel","defineComponent","computed","ref","filterInputProps","makeVInputProps","VSlider","name","props","modelValue","type","Number","String","default","emits","value","v","setup","attrs","slots","_ref","thumbContainerRef","min","max","mousePressed","roundValue","onSliderMousedown","onSliderTouchstart","trackContainerRef","position","hasLabels","readonly","handleSliderMouseUp","newValue","model","handleMouseMove","getActiveThumb","_thumbContainerRef$va","$el","undefined","parseFloat","isFocused","focus","blur","trackStop","inputProps","_","disabled","_ref2","id","elevation"],"sources":["../../../src/components/VSlider/VSlider.tsx"],"sourcesContent":["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { VInput } from '../VInput'\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\n\n// Composables\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { makeSliderProps, useSlider } from './slider'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Helpers\nimport { defineComponent } from '@/util'\n\n// Types\nimport { computed, ref } from 'vue'\nimport { filterInputProps, makeVInputProps } from '../VInput/VInput'\n\nexport const VSlider = defineComponent({\n  name: 'VSlider',\n\n  props: {\n    ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const thumbContainerRef = ref()\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      v => {\n        const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v\n\n        return roundValue(value)\n      },\n    )\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    return () => {\n      const [inputProps, _] = filterInputProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n          ]}\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({ id }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    }\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n"]},"metadata":{},"sourceType":"module"}