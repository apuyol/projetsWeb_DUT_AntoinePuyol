{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.mjs\";\nimport { VExpansionPanelText } from \"./VExpansionPanelText.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeLazyProps } from \"../../composables/lazy.mjs\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'bgColor');\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const isDisabled = computed(() => (groupItem == null ? void 0 : groupItem.disabled.value) || props.disabled);\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === 1);\n    });\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === -1);\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(() => {\n      var _slots$default;\n\n      const hasText = !!(slots.text || props.text);\n      const hasTitle = !!(slots.title || props.title);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"aria-expanded\": groupItem.isSelected.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": ['v-expansion-panel__shadow', ...elevationClasses.value]\n        }, null), hasTitle && _createVNode(VExpansionPanelTitle, {\n          \"collapseIcon\": props.collapseIcon,\n          \"color\": props.color,\n          \"expandIcon\": props.expandIcon,\n          \"hideActions\": props.hideActions,\n          \"ripple\": props.ripple\n        }, {\n          default: () => [slots.title ? slots.title() : props.title]\n        }), hasText && _createVNode(VExpansionPanelText, {\n          \"eager\": props.eager\n        }, {\n          default: () => [slots.text ? slots.text() : props.text]\n        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;SACSA,+BAA+BC,4B;SAC/BC,2B;SACAC,6B,0BAET;;SACSC,oBAAoBC,oB;SACpBC,oBAAoBC,oB;SACpBC,kBAAkBC,kB;SAClBC,0B;SACAC,oB;SACAC,qB,8BAET;;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,KAAlC;SACSC,iBAAiBC,iB;AAE1B,OAAO,MAAMC,eAAe,GAAGF,eAAe,CAAC;AAC7CG,MAAI,EAAE,iBADuC;AAG7CC,OAAK,EAAE;AACLC,SAAK,EAAEC,MADF;AAELC,QAAI,EAAED,MAFD;AAGLE,WAAO,EAAEF,MAHJ;AAKL,OAAGjB,kBAAkB,EALhB;AAML,OAAGE,kBAAkB,EANhB;AAOL,OAAGM,aAAa,EAPX;AAQL,OAAGJ,gBAAgB,EARd;AASL,OAAGG,YAAY,EATV;AAUL,OAAGX,6BAA6B;AAV3B,GAHsC;;AAgB7CwB,OAAK,CAAEL,KAAF,QAAoB;AAAA,QAAX;AAAEM;AAAF,QAAWC;AACvB,UAAMC,SAAS,GAAGpB,YAAY,CAACY,KAAD,EAAQhB,qBAAR,CAA9B;AACA,UAAM;AAAEyB,4BAAF;AAA0BC;AAA1B,QAAoDnB,kBAAkB,CAACS,KAAD,EAAQ,SAAR,CAA5E;AACA,UAAM;AAAEW;AAAF,QAAuBzB,YAAY,CAACc,KAAD,CAAzC;AACA,UAAM;AAAEY;AAAF,QAAqBtB,UAAU,CAACU,KAAD,CAArC;AACA,UAAMa,UAAU,GAAGnB,QAAQ,CAAC,MAAM,UAAS,QAATc,qBAAS,CAAEM,QAAXN,CAAoBO,KAApB,KAA6Bf,KAAK,CAACc,QAA1C,CAA3B;AAEA,UAAME,gBAAgB,GAAGtB,QAAQ,CAAC,MAAM;AACtC,YAAMuB,KAAK,GAAGT,SAAS,CAACU,KAAVV,CAAgBW,KAAhBX,CAAsBO,KAAtBP,CAA4BY,SAA5BZ,CAAsCa,IAAI,IAAIA,IAAI,CAACC,EAALD,KAAYb,SAAS,CAACc,EAApEd,CAAd;AACA,aAAO,CAACA,SAAS,CAACe,UAAVf,CAAqBO,KAAtB,IACLP,SAAS,CAACU,KAAVV,CAAgBgB,QAAhBhB,CAAyBO,KAAzBP,CAA+BiB,IAA/BjB,CAAoCc,EAAE,IAAId,SAAS,CAACU,KAAVV,CAAgBW,KAAhBX,CAAsBO,KAAtBP,CAA4BkB,OAA5BlB,CAAoCc,EAApCd,IAA0CS,KAA1CT,KAAoD,CAA9FA,CADF;AAF+B,MAAjC;AAMA,UAAMmB,eAAe,GAAGjC,QAAQ,CAAC,MAAM;AACrC,YAAMuB,KAAK,GAAGT,SAAS,CAACU,KAAVV,CAAgBW,KAAhBX,CAAsBO,KAAtBP,CAA4BY,SAA5BZ,CAAsCa,IAAI,IAAIA,IAAI,CAACC,EAALD,KAAYb,SAAS,CAACc,EAApEd,CAAd;AACA,aAAO,CAACA,SAAS,CAACe,UAAVf,CAAqBO,KAAtB,IACLP,SAAS,CAACU,KAAVV,CAAgBgB,QAAhBhB,CAAyBO,KAAzBP,CAA+BiB,IAA/BjB,CAAoCc,EAAE,IAAId,SAAS,CAACU,KAAVV,CAAgBW,KAAhBX,CAAsBO,KAAtBP,CAA4BkB,OAA5BlB,CAAoCc,EAApCd,IAA0CS,KAA1CT,KAAoD,CAAC,CAA/FA,CADF;AAF8B,MAAhC;AAMAb,WAAO,CAACX,qBAAD,EAAwBwB,SAAxB,CAAPb;AAEAE,aAAS,CAAC,MAAM;AAAA;;AACd,YAAM+B,OAAO,GAAG,CAAC,EAAEtB,KAAK,CAACH,IAANG,IAAcN,KAAK,CAACG,IAAtB,CAAjB;AACA,YAAM0B,QAAQ,GAAG,CAAC,EAAEvB,KAAK,CAACL,KAANK,IAAeN,KAAK,CAACC,KAAvB,CAAlB;AAEA;AAAA,iBAEW,CACL,mBADK,EAEL;AACE,uCAA6BO,SAAS,CAACe,UAAVf,CAAqBO,KADpD;AAEE,8CAAoCC,gBAAgB,CAACD,KAFvD;AAGE,6CAAmCY,eAAe,CAACZ,KAHrD;AAIE,yCAA+BF,UAAU,CAACE;AAJ5C,SAFK,EAQLH,cAAc,CAACG,KARV,EASLN,sBAAsB,CAACM,KATlB,CAFX;AAAA,iBAaYL,qBAAqB,CAACK,KAblC;AAAA,yBAcoBP,SAAS,CAACe,UAAVf,CAAqBO;AAdzC;AAAAe;AAAA,mBAiBa,CACL,2BADK,EAEL,GAAGnB,gBAAgB,CAACI,KAFf;AAjBb,kBAuBMc,QAAQ;AAAA,0BAES7B,KAAK,CAAC+B,YAFf;AAAA,mBAGE/B,KAAK,CAACgC,KAHR;AAAA,wBAIOhC,KAAK,CAACiC,UAJb;AAAA,yBAKQjC,KAAK,CAACkC,WALd;AAAA,oBAMGlC,KAAK,CAACmC;AANT;AAAAL,0BAQJxB,KAAK,CAACL,KAANK,GAAcA,KAAK,CAACL,KAANK,EAAdA,GAA8BN,KAAK,CAACC,KARhC;AAAA,UAvBd,EAmCM2B,OAAO;AAAA,mBACsB5B,KAAK,CAACoC;AAD5B;AAAAN,0BAEHxB,KAAK,CAACH,IAANG,GAAaA,KAAK,CAACH,IAANG,EAAbA,GAA4BN,KAAK,CAACG,IAF/B;AAAA,UAnCb,oBAyCMG,KAAK,CAACwB,OAzCZ,qBAyCMO,0BAzCN;AAAA;AAJO,MAATxC;AAkDA,WAAO,EAAP;AACD;;AAxF4C,CAAD,CAAvC","names":["makeVExpansionPanelTitleProps","VExpansionPanelTitle","VExpansionPanelText","VExpansionPanelSymbol","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","useBackgroundColor","makeTagProps","makeLazyProps","computed","provide","defineComponent","useRender","VExpansionPanel","name","props","title","String","text","bgColor","setup","slots","_ref","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","isBeforeSelected","index","group","items","findIndex","item","id","isSelected","selected","some","indexOf","isAfterSelected","hasText","hasTitle","default","collapseIcon","color","expandIcon","hideActions","ripple","eager","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelText } from './VExpansionPanelText'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeLazyProps } from '@/composables/lazy'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          ) }\n\n          { hasText && (\n            <VExpansionPanelText eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          ) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}