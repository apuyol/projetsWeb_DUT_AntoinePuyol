{"ast":null,"code":"import _objectWithoutProperties from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"modelValue\"],\n    _excluded2 = [\"class\"];\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, vModelText as _vModelText, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextarea.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\"; // Composables\n\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\n\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue';\nimport { convertToUnit, defineComponent, filterInputAttrs, useRender } from \"../../util/index.mjs\"; // Types\n\nexport var VTextarea = defineComponent({\n  name: 'VTextarea',\n  directives: {\n    Intersect: Intersect\n  },\n  inheritAttrs: false,\n  props: _objectSpread(_objectSpread({\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      \"default\": 5,\n      validator: function validator(v) {\n        return !isNaN(parseFloat(v));\n      }\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: function validator(v) {\n        return !isNaN(parseFloat(v));\n      }\n    },\n    suffix: String\n  }, makeVInputProps()), makeVFieldProps()),\n  emits: {\n    'click:clear': function clickClear(e) {\n      return true;\n    },\n    'click:control': function clickControl(e) {\n      return true;\n    },\n    'update:modelValue': function updateModelValue(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit,\n        slots = _ref.slots;\n    var model = useProxiedModel(props, 'modelValue');\n    var counterValue = computed(function () {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    var max = computed(function () {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n\n    var vInputRef = ref();\n    var vFieldRef = ref();\n    var isFocused = ref(false);\n    var controlHeight = ref('auto');\n    var textareaRef = ref();\n    var isActive = computed(function () {\n      return isFocused.value || props.persistentPlaceholder;\n    });\n    var messages = computed(function () {\n      return props.messages.length ? props.messages : isActive.value || props.persistentHint ? props.hint : '';\n    });\n\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        var _textareaRef$value;\n\n        (_textareaRef$value = textareaRef.value) == null ? void 0 : _textareaRef$value.focus();\n      }\n\n      if (!isFocused.value) isFocused.value = true;\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(function () {\n        model.value = '';\n        emit('click:clear', e);\n      });\n    }\n\n    var sizerRef = ref();\n\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(function () {\n        if (!sizerRef.value) return;\n        var style = getComputedStyle(sizerRef.value);\n        var padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        var height = sizerRef.value.scrollHeight;\n        var lineHeight = parseFloat(style.lineHeight);\n        var minHeight = parseFloat(props.rows) * lineHeight + padding;\n        var maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        controlHeight.value = convertToUnit(Math.min(maxHeight, Math.max(minHeight, height != null ? height : 0)));\n      });\n    }\n\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(function () {\n      return props.rows;\n    }, calculateInputHeight);\n    watch(function () {\n      return props.maxRows;\n    }, calculateInputHeight);\n    var observer;\n    watch(sizerRef, function (val) {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        var _observer;\n\n        (_observer = observer) == null ? void 0 : _observer.disconnect();\n      }\n    });\n    onBeforeUnmount(function () {\n      var _observer2;\n\n      (_observer2 = observer) == null ? void 0 : _observer2.disconnect();\n    });\n    useRender(function () {\n      var hasCounter = !!(slots.counter || props.counter || props.counterValue);\n\n      var _filterInputAttrs = filterInputAttrs(attrs),\n          _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n          rootAttrs = _filterInputAttrs2[0],\n          inputAttrs = _filterInputAttrs2[1];\n\n      var _filterInputProps = filterInputProps(props),\n          _filterInputProps2 = _slicedToArray(_filterInputProps, 1),\n          _filterInputProps2$ = _filterInputProps2[0],\n          _ = _filterInputProps2$.modelValue,\n          inputProps = _objectWithoutProperties(_filterInputProps2$, _excluded);\n\n      var _filterFieldProps = filterFieldProps(props),\n          _filterFieldProps2 = _slicedToArray(_filterFieldProps, 1),\n          fieldProps = _filterFieldProps2[0];\n\n      return _createVNode(VInput, _mergeProps({\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"class\": ['v-textarea', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow\n        }]\n      }, rootAttrs, inputProps, {\n        \"messages\": messages.value\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default(_ref2) {\n          var isDisabled = _ref2.isDisabled,\n              isDirty = _ref2.isDirty,\n              isReadonly = _ref2.isReadonly,\n              isValid = _ref2.isValid;\n          return _createVNode(VField, _mergeProps({\n            \"style\": {\n              '--v-input-control-height': controlHeight.value\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), _objectSpread(_objectSpread({}, slots), {}, {\n            \"default\": function _default(_ref3) {\n              var _ref3$props = _ref3.props,\n                  fieldClass = _ref3$props[\"class\"],\n                  slotProps = _objectWithoutProperties(_ref3$props, _excluded2);\n\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                  return model.value = $event;\n                },\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": function onBlur() {\n                  return isFocused.value = false;\n                }\n              }, slotProps, inputAttrs), null), [[_vModelText, model.value], [_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                  return model.value = $event;\n                },\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          }));\n        },\n        details: hasCounter ? function () {\n          return _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n            \"active\": props.persistentCounter || isFocused.value,\n            \"value\": counterValue.value,\n            \"max\": max.value\n          }, slots.counter)]);\n        } : undefined\n      }));\n    });\n    return useForwardRef({}, vInputRef, vFieldRef, textareaRef);\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;0MAAA;;AACA,yB,CAEA;;SACSA,kBAAkBC,uB;SAClBC,kBAAkBC,iBAAiBC,c;SACnCC,gB;SACAC,c,uBAET;;SACSC,qB;SACAC,uB,sCAET;;OACOC,e,wCAEP;;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,eAA7B,EAA8CC,SAA9C,EAAyDC,GAAzD,EAA8DC,KAA9D,QAA2E,KAA3E;SACSC,eAAeC,iBAAiBC,kBAAkBC,iB,wBAE3D;;AAGA,OAAO,IAAMC,SAAS,GAAGH,eAAe,CAAC;AACvCI,MAAI,EAAE,WADiC;AAGvCC,YAAU,EAAE;AAAEb;AAAF,GAH2B;AAKvCc,cAAY,EAAE,KALyB;AAOvCC,OAAK;AACHC,YAAQ,EAAEC,OADP;AAEHC,aAAS,EAAED,OAFR;AAGHE,WAAO,EAAE,CAACF,OAAD,EAAUG,MAAV,EAAkBC,MAAlB,CAHN;AAIHC,gBAAY,EAAEC,QAJX;AAKHC,QAAI,EAAEH,MALH;AAMHI,kBAAc,EAAER,OANb;AAOHS,UAAM,EAAEL,MAPL;AAQHM,eAAW,EAAEN,MARV;AASHO,yBAAqB,EAAEX,OATpB;AAUHY,qBAAiB,EAAEZ,OAVhB;AAWHa,YAAQ,EAAEb,OAXP;AAYHc,QAAI,EAAE;AACJC,UAAI,EAAE,CAACZ,MAAD,EAASC,MAAT,CADF;AAEJY,iBAAS,CAFL;AAGJC,eAAS,EAAGC,oBAAD;AAAA,eAAY,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAlB;AAAA;AAHP,KAZH;AAiBHG,WAAO,EAAE;AACPN,UAAI,EAAE,CAACZ,MAAD,EAASC,MAAT,CADC;AAEPa,eAAS,EAAGC,oBAAD;AAAA,eAAY,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAlB;AAAA;AAFJ,KAjBN;AAqBHI,UAAM,EAAElB;AArBL,KAuBA3B,eAAe,EAvBf,GAwBAF,eAAe,EAxBf,CAPkC;AAkCvCgD,OAAK,EAAE;AACL,mBAAgBC,qBAAD;AAAA,aAAmB,IAAnB;AAAA,KADV;AAEL,qBAAkBA,uBAAD;AAAA,aAAmB,IAAnB;AAAA,KAFZ;AAGL,yBAAsBC,6BAAD;AAAA,aAAiB,IAAjB;AAAA;AAHhB,GAlCgC;AAwCvCC,OAxCuC,iBAwChC5B,KAxCgC,EAwClC6B,IAxCkC,EAwCD;AAAA,QAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,QAAfC,IAAe,QAAfA,IAAe;AAAA,QAATC,KAAS,QAATA,KAAS;AACpC,QAAMC,KAAK,GAAGjD,eAAe,CAACgB,KAAD,EAAQ,YAAR,CAA7B;AACA,QAAMO,YAAY,GAAGrB,QAAQ,CAAC,YAAM;AAClC,aAAO,OAAOc,KAAK,CAACO,YAAb,KAA8B,UAA9B,GACHP,KAAK,CAACO,YAANP,CAAmBiC,KAAK,CAACC,KAAzBlC,CADG,GAEH,CAACiC,KAAK,CAACC,KAAND,IAAe,EAAhB,EAAoBE,QAApB,GAA+BC,MAFnC;AAD2B,MAA7B;AAKA,QAAMC,GAAG,GAAGnD,QAAQ,CAAC,YAAM;AACzB,UAAI4C,KAAK,CAACQ,SAAV,EAAqB,OAAOR,KAAK,CAACQ,SAAb;AAErB,UACE,CAACtC,KAAK,CAACI,OAAP,IACC,OAAOJ,KAAK,CAACI,OAAb,KAAyB,QAAzB,IACD,OAAOJ,KAAK,CAACI,OAAb,KAAyB,QAH3B,EAIE,OAAOmC,SAAP;AAEF,aAAOvC,KAAK,CAACI,OAAb;AATkB,MAApB;;AAYA,aAASoC,WAAT,CACEC,cADF,EAEEC,OAFF,EAGE;AAAA;;AACA,UAAI,CAAC1C,KAAK,CAACG,SAAP,IAAoB,CAACsC,cAAzB,EAAyC;AAEzC,2BAACC,OAAO,CAAC,CAAD,CAAPA,CAAWC,MAAZ,gEAAyCC,KAAzC;AACD;;AAED,QAAMC,SAAS,GAAGvD,GAAG,EAArB;AACA,QAAMwD,SAAS,GAAGxD,GAAG,EAArB;AACA,QAAMyD,SAAS,GAAGzD,GAAG,CAAC,KAAD,CAArB;AACA,QAAM0D,aAAa,GAAG1D,GAAG,CAAC,MAAD,CAAzB;AACA,QAAM2D,WAAW,GAAG3D,GAAG,EAAvB;AACA,QAAM4D,QAAQ,GAAGhE,QAAQ,CAAC;AAAA,aACxB6D,SAAS,CAACb,KAAVa,IACA/C,KAAK,CAACa,qBAFkB;AAAA,KAAD,CAAzB;AAKA,QAAMsC,QAAQ,GAAGjE,QAAQ,CAAC,YAAM;AAC9B,aAAOc,KAAK,CAACmD,QAANnD,CAAeoC,MAAfpC,GACHA,KAAK,CAACmD,QADHnD,GAEFkD,QAAQ,CAAChB,KAATgB,IAAkBlD,KAAK,CAACU,cAAxBwC,GAA0ClD,KAAK,CAACS,IAAhDyC,GAAuD,EAF5D;AADuB,MAAzB;;AAMA,aAASE,OAAT,GAAoB;AAClB,UAAIH,WAAW,CAACf,KAAZe,KAAsBI,QAAQ,CAACC,aAAnC,EAAkD;AAAA;;AAChD,yCAAW,CAACpB,KAAZ,wCAAmBU,KAAnB;AACD;;AAED,UAAI,CAACG,SAAS,CAACb,KAAf,EAAsBa,SAAS,CAACb,KAAVa,GAAkB,IAAlBA;AACvB;;AACD,aAASQ,cAAT,CAAyB7B,CAAzB,EAAwC;AACtC0B,aAAO;AAEPrB,UAAI,CAAC,eAAD,EAAkBL,CAAlB,CAAJK;AACD;;AACD,aAASyB,OAAT,CAAkB9B,CAAlB,EAAiC;AAC/BA,OAAC,CAAC+B,eAAF/B;AAEA0B,aAAO;AAEPjE,cAAQ,CAAC,YAAM;AACb8C,aAAK,CAACC,KAAND,GAAc,EAAdA;AAEAF,YAAI,CAAC,aAAD,EAAgBL,CAAhB,CAAJK;AAHM,QAAR5C;AAKD;;AAED,QAAMuE,QAAQ,GAAGpE,GAAG,EAApB;;AACA,aAASqE,oBAAT,GAAiC;AAC/B,UAAI,CAAC3D,KAAK,CAACC,QAAX,EAAqB;AAErBd,cAAQ,CAAC,YAAM;AACb,YAAI,CAACuE,QAAQ,CAACxB,KAAd,EAAqB;AAErB,YAAM0B,KAAK,GAAGC,gBAAgB,CAACH,QAAQ,CAACxB,KAAV,CAA9B;AAEA,YAAM4B,OAAO,GAAGxC,UAAU,CAACsC,KAAK,CAACG,gBAANH,CAAuB,uBAAvBA,CAAD,CAAVtC,GAChBA,UAAU,CAACsC,KAAK,CAACG,gBAANH,CAAuB,0BAAvBA,CAAD,CADV;AAGA,YAAMI,MAAM,GAAGN,QAAQ,CAACxB,KAATwB,CAAeO,YAA9B;AACA,YAAMC,UAAU,GAAG5C,UAAU,CAACsC,KAAK,CAACM,UAAP,CAA7B;AACA,YAAMC,SAAS,GAAG7C,UAAU,CAACtB,KAAK,CAACgB,IAAP,CAAVM,GAAyB4C,UAAzB5C,GAAsCwC,OAAxD;AACA,YAAMM,SAAS,GAAG9C,UAAU,CAACtB,KAAK,CAACuB,OAAP,CAAVD,GAA6B4C,UAA7B5C,GAA0CwC,OAA1CxC,IAAqD+C,QAAvE;AAEArB,qBAAa,CAACd,KAAdc,GAAsBxD,aAAa,CAAC8E,IAAI,CAACC,GAALD,CAASF,SAATE,EAAoBA,IAAI,CAACjC,GAALiC,CAASH,SAATG,EAAoBN,MAApB,QAAoBA,YAAU,CAA9BM,CAApBA,CAAD,CAAnCtB;AAbM,QAAR7D;AAeD;;AAEDE,aAAS,CAACsE,oBAAD,CAATtE;AACAE,SAAK,CAAC0C,KAAD,EAAQ0B,oBAAR,CAALpE;AACAA,SAAK,CAAC;AAAA,aAAMS,KAAK,CAACgB,IAAZ;AAAA,KAAD,EAAmB2C,oBAAnB,CAALpE;AACAA,SAAK,CAAC;AAAA,aAAMS,KAAK,CAACuB,OAAZ;AAAA,KAAD,EAAsBoC,oBAAtB,CAALpE;AAEA,QAAIiF,QAAJ;AACAjF,SAAK,CAACmE,QAAD,EAAW/B,aAAG,EAAI;AACrB,UAAIA,GAAJ,EAAS;AACP6C,gBAAQ,GAAG,IAAIC,cAAJ,CAAmBd,oBAAnB,CAAXa;AACAA,gBAAQ,CAACE,OAATF,CAAiBd,QAAQ,CAACxB,KAA1BsC;AAFF,aAGO;AAAA;;AACL,kCAAQ,IAAR,sBAAUG,UAAV;AACD;AANE,MAALpF;AAQAH,mBAAe,CAAC,YAAM;AAAA;;AACpB,iCAAQ,IAAR,uBAAUuF,UAAV;AADa,MAAfvF;AAIAO,aAAS,CAAC,YAAM;AACd,UAAMiF,UAAU,GAAG,CAAC,EAAE5C,KAAK,CAAC5B,OAAN4B,IAAiBhC,KAAK,CAACI,OAAvB4B,IAAkChC,KAAK,CAACO,YAA1C,CAApB;;AACA,8BAAgCb,gBAAgB,CAACoC,KAAD,CAAhD;AAAA;AAAA,UAAO+C,SAAP;AAAA,UAAkBC,UAAlB;;AACA,8BAA2CpG,gBAAgB,CAACsB,KAAD,CAA3D;AAAA;AAAA;AAAA,UAAqB+E,CAArB,uBAASC,UAAT;AAAA,UAA2BC,UAA3B;;AACA,8BAAqBzG,gBAAgB,CAACwB,KAAD,CAArC;AAAA;AAAA,UAAOkF,UAAP;;AAEA;AAAA,sBAEcjD,KAAK,CAACC,KAFpB;AAAA;AAAA,iBAEcD,KAAK,CAACC,KAAND,GAFdkD;AAAA;AAAA,iBAGW,CACL,YADK,EAEL;AACE,kCAAwBnF,KAAK,CAACW,MADhC;AAEE,kCAAwBX,KAAK,CAACwB,MAFhC;AAGE,mCAAyBxB,KAAK,CAACC,QAHjC;AAIE,mCAAyBD,KAAK,CAACe,QAANf,IAAkBA,KAAK,CAACC;AAJnD,SAFK;AAHX,SAYS4E,SAZT,EAaSI,UAbT;AAAA,oBAce9B,QAAQ,CAACjB;AAdxB,0CAiBSF,KAjBT;AAkBMd,mBAAS;AAAA,cACPkE,UADO,SACPA,UADO;AAAA,cAEPC,OAFO,SAEPA,OAFO;AAAA,cAGPC,UAHO,SAGPA,UAHO;AAAA,cAIPC,OAJO,SAIPA,OAJO;AAAA;AAAA,qBAOE;AACL,0CAA4BvC,aAAa,CAACd;AADrC,aAPF;AAAA,+BAUaqB,cAVb;AAAA,6BAWWC,OAXX;AAAA,oBAYA;AAZA,aAaA0B,UAbA;AAAA,sBAcIhC,QAAQ,CAAChB,KAATgB,IAAkBmC,OAAO,CAACnD,KAd9B;AAAA,qBAeGmD,OAAO,CAACnD,KAARmD,IAAiBrF,KAAK,CAACwF,KAf1B;AAAA,uBAgBKzC,SAAS,CAACb,KAhBf;AAAA,qBAiBGqD,OAAO,CAACrD,KAARqD,KAAkB;AAjBrB,8CAoBAvD,KApBA;AAqBHd,uBAAS;AAAA,sCACPlB,KADO;AAAA,kBACSyF,UADT;AAAA,kBACwBC,SADxB;;AAAA,oDAIH1F,KAAK,CAACW,MAANX;AAAA,yBACY;AADZ,kBAEIA,KAAK,CAACW,MAFV,EAJG;AAAA,uBAWGsC,WAXH;AAAA,yBAYKwC,UAZL;AAAA;AAAA,yBAaOxD,KAAK,CAACC,KAAND,GAbPkD;AAAA;AAAA,6BAiBSnF,KAAK,CAACG,SAjBf;AAAA,4BAkBQmF,UAAU,CAACpD,KAlBnB;AAAA,4BAmBQkD,UAAU,CAAClD,KAnBnB;AAAA,+BAoBWlC,KAAK,CAACY,WApBjB;AAAA,wBAqBIZ,KAAK,CAACgB,IArBV;AAAA,wBAsBIhB,KAAK,CAACH,IAtBV;AAAA,2BAuBOuD,OAvBP;AAAA,0BAwBM;AAAA,yBAAOL,SAAS,CAACb,KAAVa,GAAkB,KAAzB;AAAA;AAxBN,iBAyBE2C,SAzBF,EA0BEZ,UA1BF,yBAaO7C,KAAK,CAACC,KAbb,oCAcW;AACZyD,uBAAO,EAAEnD;AADG,eAdX,EAgBA,IAhBA;AAAAoD;AAAA,oBA6BH5F,KAAK,CAACC,QAAND;AAAA,yBAES,CACLyF,UADK,EAEL,mBAFK,CAFT;AAAA;AAAA,yBAMYxD,KAAK,CAACC,KAAND,GANZkD;AAAA;AAAA,uBAOQzB,QAPR;AAAA;AAAA,+BASc;AATd,uCAMYzB,KAAK,CAACC,KANlB,GA7BG,EA0CHlC,KAAK,CAACwB,MAANxB;AAAA,yBACY;AADZ,kBAEIA,KAAK,CAACwB,MAFV,EA1CG;AAAA;AArBN;AAlBf;AA2FMqE,eAAO,EAAEjB,UAAU,GAAG;AAAA;AAAA,sBAKP5E,KAAK,CAACc,iBAANd,IAA2B+C,SAAS,CAACb,KAL9B;AAAA,qBAMR3B,YAAY,CAAC2B,KANL;AAAA,mBAOVG,GAAG,CAACH;AAPM,aAQNF,KAAK,CAAC5B,OARA;AAAA,SAAH,GAWfmC;AAtGV;AANO,MAAT5C;AAkHA,WAAOZ,aAAa,CAAC,EAAD,EAAK8D,SAAL,EAAgBC,SAAhB,EAA2BG,WAA3B,CAApB;AACD;AAtQsC,CAAD,CAAjC","names":["filterFieldProps","makeVFieldProps","filterInputProps","makeVInputProps","VInput","VCounter","VField","useForwardRef","useProxiedModel","Intersect","computed","nextTick","onBeforeUnmount","onMounted","ref","watch","convertToUnit","defineComponent","filterInputAttrs","useRender","VTextarea","name","directives","inheritAttrs","props","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","emits","e","val","setup","_ref","attrs","emit","slots","model","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","vInputRef","vFieldRef","isFocused","controlHeight","textareaRef","isActive","messages","onFocus","document","activeElement","onControlClick","onClear","stopPropagation","sizerRef","calculateInputHeight","style","getComputedStyle","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","maxHeight","Infinity","Math","min","observer","ResizeObserver","observe","disconnect","hasCounter","rootAttrs","inputAttrs","_","modelValue","inputProps","fieldProps","$event","isDisabled","isDirty","isReadonly","isValid","dirty","fieldClass","slotProps","handler","once","details"],"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Composables\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { convertToUnit, defineComponent, filterInputAttrs, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:clear': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const controlHeight = ref('auto')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isActive.value || props.persistentHint) ? props.hint : ''\n    })\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        emit('click:clear', e)\n      })\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n        parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = parseFloat(props.rows) * lineHeight + padding\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(Math.min(maxHeight, Math.max(minHeight, height ?? 0)))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          v-model={ model.value }\n          class={[\n            'v-textarea',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n            },\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                style={{\n                  '--v-input-control-height': controlHeight.value,\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      ) }\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        v-model={ model.value }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ () => (isFocused.value = false) }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      ) }\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused.value }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return useForwardRef({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"]},"metadata":{},"sourceType":"module"}