{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { effectScope, onScopeDispose, readonly, ref, toRaw, watch, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\n\nvar stack = ref([]);\nexport function useStack(isActive) {\n  var vm = getCurrentInstance('useStack');\n  var scope;\n  watch(isActive, function (val) {\n    if (val) {\n      scope = effectScope();\n      scope.run(function () {\n        stack.value.push(vm);\n        onScopeDispose(function () {\n          var idx = stack.value.indexOf(vm);\n          stack.value.splice(idx, 1);\n        });\n      });\n    } else {\n      var _scope;\n\n      (_scope = scope) == null ? void 0 : _scope.stop();\n    }\n  }, {\n    immediate: true\n  });\n  var isTop = ref(true);\n  watchEffect(function () {\n    var _isTop = toRaw(stack.value[stack.value.length - 1]) === vm;\n\n    setTimeout(function () {\n      return isTop.value = _isTop;\n    });\n  });\n  return {\n    isTop: readonly(isTop)\n  };\n}","map":{"version":3,"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,QAAtC,EAAgDC,GAAhD,EAAqDC,KAArD,EAA4DC,KAA5D,EAAmEC,WAAnE,QAAsF,KAAtF;SACSC,0B,qBAET;;AAGA,IAAMC,KAAK,GAAGL,GAAG,CAA8B,EAA9B,CAAjB;AAEA,OAAO,SAASM,QAAT,CAAmBC,QAAnB,EAA2C;AAChD,MAAMC,EAAE,GAAGJ,kBAAkB,CAAC,UAAD,CAA7B;AACA,MAAIK,KAAJ;AACAP,OAAK,CAACK,QAAD,EAAWG,aAAG,EAAI;AACrB,QAAIA,GAAJ,EAAS;AACPD,WAAK,GAAGZ,WAAW,EAAnBY;AACAA,WAAK,CAACE,GAANF,CAAU,YAAM;AACdJ,aAAK,CAACO,KAANP,CAAYQ,IAAZR,CAAiBG,EAAjBH;AAEAP,sBAAc,CAAC,YAAM;AACnB,cAAMgB,GAAG,GAAGT,KAAK,CAACO,KAANP,CAAYU,OAAZV,CAAoBG,EAApBH,CAAZ;AACAA,eAAK,CAACO,KAANP,CAAYW,MAAZX,CAAmBS,GAAnBT,EAAwB,CAAxBA;AAFY,UAAdP;AAHF;AAFF,WAUO;AAAA;;AACL,0BAAK,IAAL,mBAAOmB,IAAP;AACD;AAbE,KAcF;AAAEC,aAAS,EAAE;AAAb,GAdE,CAALhB;AAgBA,MAAMiB,KAAK,GAAGnB,GAAG,CAAC,IAAD,CAAjB;AACAG,aAAW,CAAC,YAAM;AAChB,QAAMiB,MAAM,GAAGnB,KAAK,CAACI,KAAK,CAACO,KAANP,CAAYA,KAAK,CAACO,KAANP,CAAYgB,MAAZhB,GAAqB,CAAjCA,CAAD,CAALJ,KAA+CO,EAA9D;;AACAc,cAAU,CAAC;AAAA,aAAMH,KAAK,CAACP,KAANO,GAAcC,MAApB;AAAA,KAAD,CAAVE;AAFS,IAAXnB;AAKA,SAAO;AACLgB,SAAK,EAAEpB,QAAQ,CAACoB,KAAD;AADV,GAAP;AAGD","names":["effectScope","onScopeDispose","readonly","ref","toRaw","watch","watchEffect","getCurrentInstance","stack","useStack","isActive","vm","scope","val","run","value","push","idx","indexOf","splice","stop","immediate","isTop","_isTop","length","setTimeout"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { effectScope, onScopeDispose, readonly, ref, toRaw, watch, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, EffectScope, Ref } from 'vue'\n\nconst stack = ref<ComponentInternalInstance[]>([])\n\nexport function useStack (isActive: Ref<boolean>) {\n  const vm = getCurrentInstance('useStack')\n  let scope: EffectScope | undefined\n  watch(isActive, val => {\n    if (val) {\n      scope = effectScope()\n      scope.run(() => {\n        stack.value.push(vm)\n\n        onScopeDispose(() => {\n          const idx = stack.value.indexOf(vm)\n          stack.value.splice(idx, 1)\n        })\n      })\n    } else {\n      scope?.stop()\n    }\n  }, { immediate: true })\n\n  const isTop = ref(true)\n  watchEffect(() => {\n    const _isTop = toRaw(stack.value[stack.value.length - 1]) === vm\n    setTimeout(() => isTop.value = _isTop)\n  })\n\n  return {\n    isTop: readonly(isTop),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}