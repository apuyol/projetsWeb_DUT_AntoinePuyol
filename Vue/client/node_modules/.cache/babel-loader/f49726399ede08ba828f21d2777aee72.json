{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n// Composables\nimport { useForm } from \"./form.mjs\";\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue';\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\n\nexport var makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String],\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  maxErrors: {\n    type: [Number, String],\n    \"default\": 1\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  modelValue: null\n});\nexport function useValidation(props) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  var model = useProxiedModel(props, 'modelValue');\n  var form = useForm();\n  var internalErrorMessages = ref([]);\n  var isPristine = ref(true);\n  var isDirty = computed(function () {\n    return wrapInArray(model.value || []).length > 0;\n  });\n  var isDisabled = computed(function () {\n    return !!(props.disabled || form != null && form.isDisabled.value);\n  });\n  var isReadonly = computed(function () {\n    return !!(props.readonly || form != null && form.isReadonly.value);\n  });\n  var errorMessages = computed(function () {\n    return props.errorMessages.length ? wrapInArray(props.errorMessages) : internalErrorMessages.value;\n  });\n  var isValid = computed(function () {\n    if (props.error || errorMessages.value.length) return false;\n    return isPristine.value ? null : true;\n  });\n  var isValidating = ref(false);\n  var validationClasses = computed(function () {\n    var _ref;\n\n    return _ref = {}, _defineProperty(_ref, \"\".concat(name, \"--error\"), isValid.value === false), _defineProperty(_ref, \"\".concat(name, \"--dirty\"), isDirty.value), _defineProperty(_ref, \"\".concat(name, \"--disabled\"), isDisabled.value), _defineProperty(_ref, \"\".concat(name, \"--readonly\"), isReadonly.value), _ref;\n  });\n  var uid = computed(function () {\n    var _props$name;\n\n    return (_props$name = props.name) != null ? _props$name : getUid();\n  });\n  onBeforeMount(function () {\n    form == null ? void 0 : form.register(uid.value, validate, reset, resetValidation);\n  });\n  onBeforeUnmount(function () {\n    form == null ? void 0 : form.unregister(uid.value);\n  });\n  watch(model, validate);\n\n  function reset() {\n    resetValidation();\n    model.value = null;\n  }\n\n  function resetValidation() {\n    isPristine.value = true;\n    internalErrorMessages.value = [];\n  }\n\n  function validate() {\n    return _validate.apply(this, arguments);\n  }\n\n  function _validate() {\n    _validate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var results, _iterator, _step, _loop, _ret;\n\n      return regeneratorRuntime.wrap(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              results = [];\n              isValidating.value = true;\n              _iterator = _createForOfIteratorHelper(props.rules);\n              _context2.prev = 3;\n              _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {\n                var rule, handler, result;\n                return regeneratorRuntime.wrap(function _loop$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        rule = _step.value;\n\n                        if (!(results.length >= (props.maxErrors || 1))) {\n                          _context.next = 3;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", \"break\");\n\n                      case 3:\n                        handler = typeof rule === 'function' ? rule : function () {\n                          return rule;\n                        };\n                        _context.next = 6;\n                        return handler(model.value);\n\n                      case 6:\n                        result = _context.sent;\n\n                        if (!(result === true)) {\n                          _context.next = 9;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", \"continue\");\n\n                      case 9:\n                        if (!(typeof result !== 'string')) {\n                          _context.next = 12;\n                          break;\n                        }\n\n                        // eslint-disable-next-line no-console\n                        console.warn(\"\".concat(result, \" is not a valid value. Rule functions must return boolean true or a string.\"));\n                        return _context.abrupt(\"return\", \"continue\");\n\n                      case 12:\n                        results.push(result);\n\n                      case 13:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _loop);\n              });\n\n              _iterator.s();\n\n            case 6:\n              if ((_step = _iterator.n()).done) {\n                _context2.next = 15;\n                break;\n              }\n\n              return _context2.delegateYield(_loop(), \"t0\", 8);\n\n            case 8:\n              _ret = _context2.t0;\n\n              if (!(_ret === \"break\")) {\n                _context2.next = 11;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 15);\n\n            case 11:\n              if (!(_ret === \"continue\")) {\n                _context2.next = 13;\n                break;\n              }\n\n              return _context2.abrupt(\"continue\", 13);\n\n            case 13:\n              _context2.next = 6;\n              break;\n\n            case 15:\n              _context2.next = 20;\n              break;\n\n            case 17:\n              _context2.prev = 17;\n              _context2.t1 = _context2[\"catch\"](3);\n\n              _iterator.e(_context2.t1);\n\n            case 20:\n              _context2.prev = 20;\n\n              _iterator.f();\n\n              return _context2.finish(20);\n\n            case 23:\n              internalErrorMessages.value = results;\n              isValidating.value = false;\n              isPristine.value = false;\n              return _context2.abrupt(\"return\", internalErrorMessages.value);\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee, null, [[3, 17, 20, 23]]);\n    }));\n    return _validate.apply(this, arguments);\n  }\n\n  return {\n    errorMessages: errorMessages,\n    isDirty: isDirty,\n    isDisabled: isDisabled,\n    isReadonly: isReadonly,\n    isPristine: isPristine,\n    isValid: isValid,\n    isValidating: isValidating,\n    reset: reset,\n    resetValidation: resetValidation,\n    validate: validate,\n    validationClasses: validationClasses\n  };\n}","map":{"version":3,"mappings":"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","names":["useForm","useProxiedModel","computed","onBeforeMount","onBeforeUnmount","ref","watch","getCurrentInstanceName","getUid","propsFactory","wrapInArray","makeValidationProps","disabled","Boolean","error","errorMessages","type","Array","String","default","maxErrors","Number","name","readonly","rules","modelValue","useValidation","props","model","form","internalErrorMessages","isPristine","isDirty","value","length","isDisabled","isReadonly","isValid","isValidating","validationClasses","uid","register","validate","reset","resetValidation","unregister","results","rule","handler","result","console","warn","push"],"sources":["../../src/composables/validation.ts"],"sourcesContent":["// Composables\nimport { useForm } from '@/composables/form'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue'\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type ValidationResult = string | true\nexport type ValidationRule =\n  | ValidationResult\n  | PromiseLike<ValidationResult>\n  | ((value: any) => ValidationResult)\n  | ((value: any) => PromiseLike<ValidationResult>)\n\nexport interface ValidationProps {\n  disabled: boolean\n  error: boolean\n  errorMessages: string | string[]\n  maxErrors: string | number\n  name: string | undefined\n  readonly: boolean\n  rules: ValidationRule[]\n  modelValue: any\n  'onUpdate:modelValue': ((val: any) => void) | undefined\n}\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1,\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array as PropType<ValidationRule[]>,\n    default: () => ([]),\n  },\n  modelValue: null,\n})\n\nexport function useValidation (\n  props: ValidationProps,\n  name = getCurrentInstanceName(),\n) {\n  const model = useProxiedModel(props, 'modelValue')\n  const form = useForm()\n  const internalErrorMessages = ref<string[]>([])\n  const isPristine = ref(true)\n  const isDirty = computed(() => wrapInArray(model.value || []).length > 0)\n  const isDisabled = computed(() => !!(props.disabled || form?.isDisabled.value))\n  const isReadonly = computed(() => !!(props.readonly || form?.isReadonly.value))\n  const errorMessages = computed(() => {\n    return props.errorMessages.length\n      ? wrapInArray(props.errorMessages)\n      : internalErrorMessages.value\n  })\n  const isValid = computed(() => {\n    if (props.error || errorMessages.value.length) return false\n\n    return isPristine.value ? null : true\n  })\n  const isValidating = ref(false)\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value,\n    }\n  })\n\n  const uid = computed(() => props.name ?? getUid())\n\n  onBeforeMount(() => {\n    form?.register(uid.value, validate, reset, resetValidation)\n  })\n\n  onBeforeUnmount(() => {\n    form?.unregister(uid.value)\n  })\n\n  watch(model, validate)\n\n  function reset () {\n    resetValidation()\n    model.value = null\n  }\n\n  function resetValidation () {\n    isPristine.value = true\n    internalErrorMessages.value = []\n  }\n\n  async function validate () {\n    const results = []\n\n    isValidating.value = true\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule\n      const result = await handler(model.value)\n\n      if (result === true) continue\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`)\n\n        continue\n      }\n\n      results.push(result)\n    }\n\n    internalErrorMessages.value = results\n    isValidating.value = false\n    isPristine.value = false\n\n    return internalErrorMessages.value\n  }\n\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}