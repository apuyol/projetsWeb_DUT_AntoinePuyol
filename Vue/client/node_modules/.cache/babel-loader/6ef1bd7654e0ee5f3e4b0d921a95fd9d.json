{"ast":null,"code":"import _objectWithoutProperties from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"modelValue\"],\n    _excluded2 = [\"class\"];\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, vModelDynamic as _vModelDynamic, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextField.css\"; // Components\n\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\"; // Composables\n\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\n\nimport { computed, nextTick, ref } from 'vue';\nimport { filterInputAttrs, genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nvar activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nexport var VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect: Intersect\n  },\n  inheritAttrs: false,\n  props: _objectSpread(_objectSpread({\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      \"default\": 'text'\n    }\n  }, makeVInputProps()), makeVFieldProps()),\n  emits: {\n    'click:append': function clickAppend(e) {\n      return true;\n    },\n    'click:append-inner': function clickAppendInner(e) {\n      return true;\n    },\n    'click:clear': function clickClear(e) {\n      return true;\n    },\n    'click:control': function clickControl(e) {\n      return true;\n    },\n    'click:input': function clickInput(e) {\n      return true;\n    },\n    'click:prepend': function clickPrepend(e) {\n      return true;\n    },\n    'click:prepend-inner': function clickPrependInner(e) {\n      return true;\n    },\n    'update:modelValue': function updateModelValue(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit,\n        slots = _ref.slots;\n    var model = useProxiedModel(props, 'modelValue');\n    var counterValue = computed(function () {\n      var _model$value;\n\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : ((_model$value = model.value) != null ? _model$value : '').toString().length;\n    });\n    var max = computed(function () {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n\n    var vInputRef = ref();\n    var vFieldRef = ref();\n    var isFocused = ref(false);\n    var inputRef = ref();\n    var isActive = computed(function () {\n      return activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value;\n    });\n    var messages = computed(function () {\n      return props.messages.length ? props.messages : isFocused.value || props.persistentHint ? props.hint : '';\n    });\n\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        var _inputRef$value;\n\n        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();\n      }\n\n      if (!isFocused.value) isFocused.value = true;\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(function () {\n        model.value = '';\n        emit('click:clear', e);\n      });\n    }\n\n    useRender(function () {\n      var hasCounter = !!(slots.counter || props.counter || props.counterValue);\n\n      var _filterInputAttrs = filterInputAttrs(attrs),\n          _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n          rootAttrs = _filterInputAttrs2[0],\n          inputAttrs = _filterInputAttrs2[1];\n\n      var _filterInputProps = filterInputProps(props),\n          _filterInputProps2 = _slicedToArray(_filterInputProps, 1),\n          _filterInputProps2$ = _filterInputProps2[0],\n          _ = _filterInputProps2$.modelValue,\n          inputProps = _objectWithoutProperties(_filterInputProps2$, _excluded);\n\n      var _filterFieldProps = filterFieldProps(props),\n          _filterFieldProps2 = _slicedToArray(_filterFieldProps, 1),\n          fieldProps = _filterFieldProps2[0];\n\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"class\": ['v-text-field', {\n          'v-text-field--persistent-placeholder': props.persistentPlaceholder,\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }],\n        \"onClick:prepend\": function onClickPrepend(e) {\n          return emit('click:prepend', e);\n        },\n        \"onClick:append\": function onClickAppend(e) {\n          return emit('click:append', e);\n        }\n      }, rootAttrs, inputProps, {\n        \"messages\": messages.value\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default(_ref2) {\n          var isDisabled = _ref2.isDisabled,\n              isDirty = _ref2.isDirty,\n              isReadonly = _ref2.isReadonly,\n              isValid = _ref2.isValid;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": function onMousedown(e) {\n              if (e.target === inputRef.value) return;\n              e.preventDefault();\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": function onClickPrependInner(e) {\n              return emit('click:prepend-inner', e);\n            },\n            \"onClick:appendInner\": function onClickAppendInner(e) {\n              return emit('click:append-inner', e);\n            },\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), _objectSpread(_objectSpread({}, slots), {}, {\n            \"default\": function _default(_ref3) {\n              var _slots$default;\n\n              var _ref3$props = _ref3.props,\n                  fieldClass = _ref3$props[\"class\"],\n                  slotProps = _objectWithoutProperties(_ref3$props, _excluded2);\n\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"onClick\": function onClick(e) {\n                  return emit('click:input', e);\n                }\n              }, [(_slots$default = slots[\"default\"]) == null ? void 0 : _slots$default.call(slots), _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n                  return model.value = $event;\n                },\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": function onBlur() {\n                  return isFocused.value = false;\n                }\n              }, slotProps, inputAttrs), null), [[_vModelDynamic, model.value], [_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]])]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          }));\n        },\n        details: hasCounter ? function () {\n          return _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n            \"active\": props.persistentCounter || isFocused.value,\n            \"value\": counterValue.value,\n            \"max\": max.value\n          }, slots.counter)]);\n        } : undefined\n      }));\n    });\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef);\n  }\n});","map":{"version":3,"mappings":"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","names":["filterInputProps","makeVInputProps","VInput","filterFieldProps","makeVFieldProps","VField","VCounter","useForwardRef","useProxiedModel","Intersect","computed","nextTick","ref","filterInputAttrs","genericComponent","useRender","activeTypes","VTextField","name","directives","inheritAttrs","props","autofocus","Boolean","counter","Number","String","counterValue","Function","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","suffix","type","default","emits","e","val","setup","_ref","attrs","emit","slots","model","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","vInputRef","vFieldRef","isFocused","inputRef","isActive","includes","messages","onFocus","document","activeElement","onControlClick","onClear","stopPropagation","hasCounter","rootAttrs","inputAttrs","_","modelValue","inputProps","fieldProps","$event","variant","isDisabled","isDirty","isReadonly","isValid","preventDefault","dirty","fieldClass","slotProps","_slots$default","handler","once","details"],"sources":["../../../src/components/VTextField/VTextField.tsx"],"sourcesContent":["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { VCounter } from '@/components/VCounter'\n\n// Composables\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, ref } from 'vue'\nimport { filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VFieldSlots } from '@/components/VField/VField'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const VTextField = genericComponent<new <T>() => {\n  $slots: VInputSlots & VFieldSlots\n}>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:append': (e: MouseEvent) => true,\n    'click:append-inner': (e: MouseEvent) => true,\n    'click:clear': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'click:input': (e: MouseEvent) => true,\n    'click:prepend': (e: MouseEvent) => true,\n    'click:prepend-inner': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        emit('click:clear', e)\n      })\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--persistent-placeholder': props.persistentPlaceholder,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ (e: MouseEvent) => emit('click:prepend', e) }\n          onClick:append={ (e: MouseEvent) => emit('click:append', e) }\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ (e: MouseEvent) => {\n                  if (e.target === inputRef.value) return\n\n                  e.preventDefault()\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ (e: MouseEvent) => emit('click:prepend-inner', e) }\n                onClick:appendInner={ (e: MouseEvent) => emit('click:append-inner', e) }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        ) }\n\n                        <div\n                          class={ fieldClass }\n                          onClick={ e => emit('click:input', e) }\n                        >\n                          { slots.default?.() }\n\n                          <input\n                            ref={ inputRef }\n                            v-model={ model.value }\n                            v-intersect={[{\n                              handler: onIntersect,\n                            }, null, ['once']]}\n                            autofocus={ props.autofocus }\n                            readonly={ isReadonly.value }\n                            disabled={ isDisabled.value }\n                            placeholder={ props.placeholder }\n                            size={ 1 }\n                            type={ props.type }\n                            onFocus={ onFocus }\n                            onBlur={ () => (isFocused.value = false) }\n                            { ...slotProps }\n                            { ...inputAttrs }\n                          />\n                        </div>\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        ) }\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused.value }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"]},"metadata":{},"sourceType":"module"}