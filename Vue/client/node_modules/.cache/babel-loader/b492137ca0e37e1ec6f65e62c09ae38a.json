{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\n// Utilities\nimport { computed, isRef } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport var makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    \"default\": undefined\n  }\n}, 'rounded');\nexport function useRounded(props) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  var roundedClasses = computed(function () {\n    var rounded = isRef(props) ? props.value : props.rounded;\n    var classes = [];\n\n    if (rounded === true || rounded === '') {\n      classes.push(\"\".concat(name, \"--rounded\"));\n    } else if (typeof rounded === 'string' || rounded === 0) {\n      var _iterator = _createForOfIteratorHelper(String(rounded).split(' ')),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          classes.push(\"rounded-\".concat(value));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return classes;\n  });\n  return {\n    roundedClasses: roundedClasses\n  };\n}","map":{"version":3,"mappings":";;;;AAAA;AACA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,wBAAwBC,oB,qBAEjC;AAcA;;AACA,OAAO,IAAMC,gBAAgB,GAAGD,YAAY,CAAC;AAC3CE,SAAO,EAAE;AACPC,QAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,CADC;AAEPC,eAASC;AAFF;AADkC,CAAD,EAKzC,SALyC,CAArC;AAOP,OAAO,SAASC,UAAT,CACLC,KADK,EAGQ;AAAA,MADbC,IACa,uEADNZ,sBAAsB,EAChB;AACb,MAAMa,cAAc,GAAGf,QAAQ,CAAC,YAAM;AACpC,QAAMK,OAAO,GAAGJ,KAAK,CAACY,KAAD,CAALZ,GAAeY,KAAK,CAACG,KAArBf,GAA6BY,KAAK,CAACR,OAAnD;AACA,QAAMY,OAAiB,GAAG,EAA1B;;AAEA,QAAIZ,OAAO,KAAK,IAAZA,IAAoBA,OAAO,KAAK,EAApC,EAAwC;AACtCY,aAAO,CAACC,IAARD,WAAgBH,IAAhBG;AADF,WAEO,IACL,OAAOZ,OAAP,KAAmB,QAAnB,IACAA,OAAO,KAAK,CAFP,EAGL;AAAA,iDACoBI,MAAM,CAACJ,OAAD,CAANI,CAAgBU,KAAhBV,CAAsB,GAAtBA,CADpB;AAAA;;AAAA;AACA,4DAAgD;AAAA,cAArCO,KAAqC;AAC9CC,iBAAO,CAACC,IAARD,mBAAwBD,KAAxBC;AACD;AAHD;AAAA;AAAA;AAAA;AAAA;AAID;;AAED,WAAOA,OAAP;AAf6B,IAA/B;AAkBA,SAAO;AAAEF;AAAF,GAAP;AACD","names":["computed","isRef","getCurrentInstanceName","propsFactory","makeRoundedProps","rounded","type","Boolean","Number","String","default","undefined","useRounded","props","name","roundedClasses","value","classes","push","split"],"sources":["../../src/composables/rounded.ts"],"sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const classes: string[] = []\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof rounded === 'string' ||\n      rounded === 0\n    ) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n"]},"metadata":{},"sourceType":"module"}