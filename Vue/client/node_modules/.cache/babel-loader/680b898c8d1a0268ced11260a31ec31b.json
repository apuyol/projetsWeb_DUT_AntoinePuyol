{"ast":null,"code":"import _defineProperty from \"D:/Stage/App/xr-place-application/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Composables\n\nimport { useColor } from \"./color.mjs\"; // Utilities\n\nimport { computed, unref } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport var allowedVariants = ['outlined', 'plain', 'text', 'contained', 'contained-flat', 'contained-text'];\nexport function genOverlays(isClickable, name) {\n  return _createVNode(_Fragment, null, [isClickable && _createVNode(\"div\", {\n    \"class\": \"\".concat(name, \"__overlay\")\n  }, null), _createVNode(\"div\", {\n    \"class\": \"\".concat(name, \"__underlay\")\n  }, null)]);\n}\nexport var makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String,\n    \"default\": 'contained',\n    validator: function validator(v) {\n      return allowedVariants.includes(v);\n    }\n  }\n}, 'variant');\nexport function useVariant(props) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  var variantClasses = computed(function () {\n    var _unref = unref(props),\n        variant = _unref.variant;\n\n    return \"\".concat(name, \"--variant-\").concat(variant);\n  });\n\n  var _useColor = useColor(computed(function () {\n    var _unref2 = unref(props),\n        variant = _unref2.variant,\n        color = _unref2.color;\n\n    return _defineProperty({}, ['contained', 'contained-flat'].includes(variant) ? 'background' : 'text', color);\n  })),\n      colorClasses = _useColor.colorClasses,\n      colorStyles = _useColor.colorStyles;\n\n  return {\n    colorClasses: colorClasses,\n    colorStyles: colorStyles,\n    variantClasses: variantClasses\n  };\n}","map":{"version":3,"mappings":";;;0EAAA;;SACSA,gB,eAET;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,wBAAwBC,oB,qBAEjC;;AAIA,OAAO,IAAMC,eAAe,GAAG,CAC7B,UAD6B,EAE7B,OAF6B,EAG7B,MAH6B,EAI7B,WAJ6B,EAK7B,gBAL6B,EAM7B,gBAN6B,CAAxB;AAgBP,OAAO,SAASC,WAAT,CAAsBC,WAAtB,EAA4CC,IAA5C,EAA0D;AAC/D,wCAEMD,WAAW;AAAA,uBAAmBC,IAAnB;AAAA,UAFjB;AAAA,uBAImBA,IAJnB;AAAA;AAOD;AAED,OAAO,IAAMC,gBAAgB,GAAGL,YAAY,CAAC;AAC3CM,OAAK,EAAEC,MADoC;AAE3CC,SAAO,EAAE;AACPC,QAAI,EAAEF,MADC;AAEPG,eAAS,WAFF;AAGPC,aAAS,EAAGC,oBAAD;AAAA,aAAYX,eAAe,CAACY,QAAhBZ,CAAyBW,CAAzBX,CAAZ;AAAA;AAHJ;AAFkC,CAAD,EAOzC,SAPyC,CAArC;AASP,OAAO,SAASa,UAAT,CACLC,KADK,EAGL;AAAA,MADAX,IACA,uEADOL,sBAAsB,EAC7B;AACA,MAAMiB,cAAc,GAAGnB,QAAQ,CAAC,YAAM;AACpC,iBAAoBC,KAAK,CAACiB,KAAD,CAAzB;AAAA,QAAQP,OAAR,UAAQA,OAAR;;AACA,qBAAUJ,IAAV,uBAA2BI,OAA3B;AAF6B,IAA/B;;AAKA,kBAAsCZ,QAAQ,CAACC,QAAQ,CAAC,YAAM;AAC5D,kBAA2BC,KAAK,CAACiB,KAAD,CAAhC;AAAA,QAAQP,OAAR,WAAQA,OAAR;AAAA,QAAiBF,KAAjB,WAAiBA,KAAjB;;AACA,+BACG,CAAC,WAAD,EAAc,gBAAd,EAAgCO,QAAhC,CAAyCL,OAAzC,IAAoD,YAApD,GAAmE,MADtE,EAC+EF,KAD/E;AAFqD,IAAT,CAA9C;AAAA,MAAQW,YAAR,aAAQA,YAAR;AAAA,MAAsBC,WAAtB,aAAsBA,WAAtB;;AAOA,SAAO;AAAED,gBAAF,EAAEA,YAAF;AAAgBC,eAAhB,EAAgBA,WAAhB;AAA6BF;AAA7B,GAAP;AACD","names":["useColor","computed","unref","getCurrentInstanceName","propsFactory","allowedVariants","genOverlays","isClickable","name","makeVariantProps","color","String","variant","type","default","validator","v","includes","useVariant","props","variantClasses","colorClasses","colorStyles"],"sources":["../../src/composables/variant.tsx"],"sourcesContent":["// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'outlined',\n  'plain',\n  'text',\n  'contained',\n  'contained-flat',\n  'contained-text',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <div class={`${name}__overlay`} /> }\n\n      <div class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'contained',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['contained', 'contained-flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"]},"metadata":{},"sourceType":"module"}