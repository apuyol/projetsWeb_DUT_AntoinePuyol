{"ast":null,"code":"import _defineProperty from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _typeof from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport { createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VSelect.css\"; // Components\n\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, ref, watch } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport function genItem(item) {\n  var _ref;\n\n  return {\n    title: String((_ref = _typeof(item) === 'object' ? item.title : item) != null ? _ref : ''),\n    value: _typeof(item) === 'object' ? item.value : item\n  };\n}\nexport var makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  items: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  menuIcon: {\n    type: String,\n    \"default\": '$dropdown'\n  },\n  modelValue: {\n    type: [Number, String, Array],\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    \"default\": '$vuetify.noDataText'\n  },\n  openOnClear: Boolean\n}, 'select');\nexport var VSelect = genericComponent()({\n  name: 'VSelect',\n  props: _objectSpread(_objectSpread({}, makeSelectProps()), makeTransitionProps({\n    transition: 'scale-transition'\n  })),\n  emits: {\n    'update:modelValue': function updateModelValue(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref2) {\n    var slots = _ref2.slots;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var vTextFieldRef = ref();\n    var activator = ref();\n    var menu = ref(false);\n    var items = computed(function () {\n      return props.items.map(genItem);\n    });\n    var model = useProxiedModel(props, 'modelValue', [], function (v) {\n      return wrapInArray(v);\n    }, function (v) {\n      return props.multiple ? v : v[0];\n    });\n    var selections = computed(function () {\n      return items.value.filter(function (item) {\n        return model.value.includes(item.value);\n      });\n    });\n    var selected = computed(function () {\n      return selections.value.map(function (selection) {\n        return selection.value;\n      });\n    });\n\n    function onClear(e) {\n      model.value = [];\n\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n    }\n\n    function onClickControl() {\n      if (props.hideNoData && !items.value.length) return;\n      menu.value = true;\n    }\n\n    function onKeydown(e) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false;\n      }\n    }\n\n    function select(item) {\n      if (props.multiple) {\n        var index = selections.value.findIndex(function (selection) {\n          return selection.value === item.value;\n        });\n\n        if (index === -1) {\n          model.value.push(item.value);\n        } else {\n          model.value = selected.value.filter(function (selection) {\n            return selection !== item.value;\n          });\n        }\n      } else {\n        model.value = [item.value];\n        menu.value = false;\n      }\n    }\n\n    watch(function () {\n      return vTextFieldRef.value;\n    }, function (val) {\n      activator.value = val.$el.querySelector('.v-input__control');\n    });\n    useRender(function () {\n      var hasChips = !!(props.chips || slots.chip);\n      return _createVNode(VTextField, {\n        \"ref\": vTextFieldRef,\n        \"class\": ['v-select', _defineProperty({\n          'v-select--active-menu': menu.value,\n          'v-select--chips': !!props.chips\n        }, \"v-select--\".concat(props.multiple ? 'multiple' : 'single'), true)],\n        \"appendInnerIcon\": props.menuIcon,\n        \"readonly\": true,\n        \"onClick:clear\": onClear,\n        \"onClick:input\": onClickControl,\n        \"onClick:control\": onClickControl,\n        \"onBlur\": function onBlur() {\n          return menu.value = false;\n        },\n        \"modelValue\": model.value.join(', '),\n        \"onKeydown\": onKeydown\n      }, _objectSpread(_objectSpread({}, slots), {}, {\n        \"default\": function _default() {\n          return _createVNode(_Fragment, null, [activator.value && _createVNode(VMenu, {\n            \"modelValue\": menu.value,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return menu.value = $event;\n            },\n            \"activator\": activator.value,\n            \"contentClass\": \"v-select__content\",\n            \"eager\": props.eager,\n            \"openOnClick\": false,\n            \"transition\": props.transition\n          }, {\n            \"default\": function _default() {\n              return [_createVNode(VList, {\n                \"selected\": selected.value,\n                \"selectStrategy\": props.multiple ? 'independent' : 'single-independent'\n              }, {\n                \"default\": function _default() {\n                  return [!items.value.length && !props.hideNoData && _createVNode(VListItem, {\n                    \"title\": t(props.noDataText)\n                  }, null), items.value.map(function (item) {\n                    return _createVNode(VListItem, {\n                      \"title\": item.title,\n                      \"value\": item.value,\n                      \"onMousedown\": function onMousedown(e) {\n                        return e.preventDefault();\n                      },\n                      \"onClick\": function onClick() {\n                        return select(item);\n                      }\n                    }, null);\n                  })];\n                }\n              })];\n            }\n          }), selections.value.map(function (selection, index) {\n            function onChipClose(e) {\n              e.stopPropagation();\n              e.preventDefault();\n              select(selection);\n            }\n\n            var slotProps = {\n              'onClick:close': onChipClose,\n              modelValue: true\n            };\n            return _createVNode(\"div\", {\n              \"class\": \"v-select__selection\"\n            }, [hasChips && _createVNode(VDefaultsProvider, {\n              \"defaults\": {\n                VChip: {\n                  closable: props.closableChips,\n                  size: 'small',\n                  text: selection.title\n                }\n              }\n            }, {\n              \"default\": function _default() {\n                return [slots.chip ? slots.chip({\n                  props: slotProps,\n                  selection: selection\n                }) : _createVNode(VChip, slotProps, null)];\n              }\n            }), !hasChips && (slots.selection ? slots.selection({\n              selection: selection\n            }) : _createVNode(\"span\", {\n              \"class\": \"v-select__selection-text\"\n            }, [selection.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n              \"class\": \"v-select__selection-comma\"\n            }, [_createTextVNode(\",\")])]))]);\n          })]);\n        }\n      }));\n    });\n    return useForwardRef({}, vTextFieldRef);\n  }\n});","map":{"version":3,"mappings":"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","names":["VChip","VDefaultsProvider","VList","VListItem","VMenu","VTextField","makeTransitionProps","useForwardRef","useLocale","useProxiedModel","computed","ref","watch","genericComponent","propsFactory","useRender","wrapInArray","genItem","item","title","String","value","makeSelectProps","chips","Boolean","closableChips","eager","hideNoData","hideSelected","items","type","Array","default","menuIcon","modelValue","Number","multiple","noDataText","openOnClear","VSelect","name","props","transition","emits","val","setup","_ref2","slots","t","vTextFieldRef","activator","menu","map","model","v","selections","filter","includes","selected","selection","onClear","e","onClickControl","length","onKeydown","key","select","index","findIndex","push","$el","querySelector","hasChips","chip","join","$event","preventDefault","onChipClose","stopPropagation","slotProps","closable","size","text"],"sources":["../../../src/components/VSelect/VSelect.tsx"],"sourcesContent":["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref, watch } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { LinkProps } from '@/composables/router'\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport interface InternalSelectItem {\n  title: string\n  value: any\n  index: number\n}\n\nexport interface DefaultSelectionSlot {\n  selection: InternalSelectItem\n}\n\nexport interface DefaultChipSlot extends DefaultSelectionSlot {\n  props: {\n    'onClick:close': (e: Event) => void\n    modelValue: any\n  }\n}\n\nexport type SelectItem = string | (string | number)[] | ((item: Record<string, any>, fallback?: any) => any) | (LinkProps & {\n  text: string\n})\n\nexport function genItem (item: any) {\n  return {\n    title: String((typeof item === 'object' ? item.title : item) ?? ''),\n    value: (typeof item === 'object' ? item.value : item),\n  }\n}\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  items: {\n    type: Array as PropType<SelectItem[]>,\n    default: () => ([]),\n  },\n  menuIcon: {\n    type: String,\n    default: '$dropdown',\n  },\n  modelValue: {\n    type: [Number, String, Array],\n    default: () => ([]),\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n}, 'select')\n\nexport const VSelect = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    chip: [DefaultChipSlot]\n    default: []\n    selection: [DefaultSelectionSlot]\n  }>\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: 'scale-transition' }),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const activator = ref()\n    const menu = ref(false)\n    const items = computed(() => props.items.map(genItem))\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => wrapInArray(v),\n      (v: any) => props.multiple ? v : v[0]\n    )\n    const selections = computed(() => items.value.filter(item => model.value.includes(item.value)))\n    const selected = computed(() => selections.value.map(selection => selection.value))\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onClickControl () {\n      if (props.hideNoData && !items.value.length) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n    }\n    function select (item: any) {\n      if (props.multiple) {\n        const index = selections.value.findIndex(selection => selection.value === item.value)\n\n        if (index === -1) {\n          model.value.push(item.value)\n        } else {\n          model.value = selected.value.filter(selection => selection !== item.value)\n        }\n      } else {\n        model.value = [item.value]\n        menu.value = false\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control')\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          onClick:clear={ onClear }\n          onClick:input={ onClickControl }\n          onClick:control={ onClickControl }\n          onBlur={ () => menu.value = false }\n          modelValue={ model.value.join(', ') }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                { activator.value && (\n                  <VMenu\n                    v-model={ menu.value }\n                    activator={ activator.value }\n                    contentClass=\"v-select__content\"\n                    eager={ props.eager }\n                    openOnClick={ false }\n                    transition={ props.transition }\n                  >\n                    <VList\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    >\n                      { !items.value.length && !props.hideNoData && (\n                        <VListItem title={ t(props.noDataText) } />\n                      ) }\n\n                      { items.value.map(item => (\n                        <VListItem\n                          title={ item.title }\n                          value={ item.value }\n                          onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                          onClick={ () => select(item) }\n                        />\n                      )) }\n                    </VList>\n                  </VMenu>\n                ) }\n\n                { selections.value.map((selection, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(selection)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                  }\n\n                  return (\n                    <div class=\"v-select__selection\">\n                      { hasChips && (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: selection.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ props: slotProps, selection })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) }\n\n                      { !hasChips && (\n                        slots.selection\n                          ? slots.selection({ selection })\n                          : (\n                            <span class=\"v-select__selection-text\">\n                              { selection.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-select__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      ) }\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return useForwardRef({}, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"]},"metadata":{},"sourceType":"module"}