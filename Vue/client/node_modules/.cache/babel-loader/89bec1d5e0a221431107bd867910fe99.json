{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport { resolveDirective as _resolveDirective, withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VChip.css\"; // Components\n\nimport { VAvatar } from \"../VAvatar/index.mjs\";\nimport { VChipGroupSymbol } from \"../VChipGroup/VChipGroup.mjs\";\nimport { VExpandXTransition } from \"../transitions/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\n\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeRouterProps, useLink } from \"../../composables/router.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\n\nimport { defineComponent } from \"../../util/index.mjs\";\nexport var VChip = defineComponent({\n  name: 'VChip',\n  directives: {\n    Ripple: Ripple\n  },\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: String,\n    closable: Boolean,\n    closeIcon: {\n      type: String,\n      \"default\": '$delete'\n    },\n    closeLabel: {\n      type: String,\n      \"default\": '$vuetify.close'\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      \"default\": '$complete'\n    },\n    label: Boolean,\n    link: Boolean,\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: String,\n    ripple: {\n      type: Boolean,\n      \"default\": true\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      \"default\": true\n    }\n  }, makeBorderProps()), makeDensityProps()), makeElevationProps()), makeGroupItemProps()), makeRoundedProps()), makeRouterProps()), makeSizeProps()), makeTagProps({\n    tag: 'span'\n  })), makeThemeProps()), makeVariantProps({\n    variant: 'contained-text'\n  })),\n  emits: {\n    'click:close': function clickClose(e) {\n      return true;\n    },\n    'update:active': function updateActive(value) {\n      return true;\n    },\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        emit = _ref.emit,\n        slots = _ref.slots;\n    var isActive = useProxiedModel(props, 'modelValue');\n\n    var _provideTheme = provideTheme(props),\n        themeClasses = _provideTheme.themeClasses;\n\n    var _useBorder = useBorder(props),\n        borderClasses = _useBorder.borderClasses;\n\n    var _useVariant = useVariant(props),\n        colorClasses = _useVariant.colorClasses,\n        colorStyles = _useVariant.colorStyles,\n        variantClasses = _useVariant.variantClasses;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var group = useGroupItem(props, VChipGroupSymbol, false);\n\n    var _useRounded = useRounded(props),\n        roundedClasses = _useRounded.roundedClasses;\n\n    var _useSize = useSize(props),\n        sizeClasses = _useSize.sizeClasses;\n\n    var _useDensity = useDensity(props),\n        densityClasses = _useDensity.densityClasses;\n\n    var link = useLink(props, attrs);\n\n    function onCloseClick(e) {\n      isActive.value = false;\n      emit('click:close', e);\n    }\n\n    return function () {\n      var _slots$default, _slots$default2;\n\n      var Tag = link.isLink.value ? 'a' : props.tag;\n      var hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar);\n      var hasClose = !!(slots.close || props.closable);\n      var hasFilter = !!(slots.filter || props.filter) && group;\n      var hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar);\n      var hasColor = !group || group.isSelected.value;\n      var isClickable = !props.disabled && (!!group || link.isClickable.value || props.link);\n      var onClickFunc = props.link ? props.link : group == null ? void 0 : group.toggle;\n      return isActive.value && _withDirectives(_createVNode(Tag, {\n        \"class\": ['v-chip', {\n          'v-chip--disabled': props.disabled,\n          'v-chip--label': props.label,\n          'v-chip--link': isClickable,\n          'v-chip--pill': props.pill\n        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value, group == null ? void 0 : group.selectedClass.value],\n        \"style\": [hasColor ? colorStyles.value : undefined],\n        \"disabled\": props.disabled || undefined,\n        \"draggable\": props.draggable,\n        \"href\": link.href.value,\n        \"onClick\": isClickable && onClickFunc\n      }, {\n        \"default\": function _default() {\n          return [genOverlays(isClickable, 'v-chip'), hasFilter && _createVNode(VExpandXTransition, null, {\n            \"default\": function _default() {\n              return [_withDirectives(_createVNode(\"div\", {\n                \"class\": \"v-chip__filter\"\n              }, [slots.filter ? slots.filter() : _createVNode(VIcon, {\n                \"icon\": props.filterIcon\n              }, null)]), [[_vShow, group.isSelected.value]])];\n            }\n          }), hasPrepend && _createVNode(\"div\", {\n            \"class\": \"v-chip__prepend\"\n          }, [slots.prepend ? slots.prepend() : _createVNode(VAvatar, {\n            \"icon\": props.prependIcon,\n            \"image\": props.prependAvatar,\n            \"size\": props.size\n          }, null)]), (_slots$default = (_slots$default2 = slots[\"default\"]) == null ? void 0 : _slots$default2.call(slots, {\n            isSelected: group == null ? void 0 : group.isSelected.value,\n            selectedClass: group == null ? void 0 : group.selectedClass.value,\n            select: group == null ? void 0 : group.select,\n            toggle: group == null ? void 0 : group.toggle,\n            value: group == null ? void 0 : group.value.value,\n            disabled: props.disabled\n          })) != null ? _slots$default : props.text, hasAppend && _createVNode(\"div\", {\n            \"class\": \"v-chip__append\"\n          }, [slots.append ? slots.append() : _createVNode(VAvatar, {\n            \"icon\": props.appendIcon,\n            \"image\": props.appendAvatar,\n            \"size\": props.size\n          }, null)]), hasClose && _createVNode(\"div\", {\n            \"class\": \"v-chip__close\",\n            \"onClick\": onCloseClick\n          }, [slots.close ? slots.close({\n            props: {\n              onClick: onCloseClick\n            }\n          }) : _createVNode(VIcon, {\n            \"icon\": props.closeIcon,\n            \"size\": \"x-small\"\n          }, null)])];\n        }\n      }), [[_resolveDirective(\"ripple\"), isClickable && props.ripple, null]]);\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["VAvatar","VChipGroupSymbol","VExpandXTransition","VIcon","genOverlays","makeVariantProps","useVariant","makeBorderProps","useBorder","makeDensityProps","useDensity","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","makeRouterProps","useLink","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useProxiedModel","Ripple","defineComponent","VChip","name","directives","props","activeClass","String","appendAvatar","appendIcon","closable","Boolean","closeIcon","type","default","closeLabel","draggable","filter","filterIcon","label","link","pill","prependAvatar","prependIcon","ripple","text","modelValue","tag","variant","emits","e","value","setup","_ref","attrs","emit","slots","isActive","themeClasses","borderClasses","colorClasses","colorStyles","variantClasses","elevationClasses","group","roundedClasses","sizeClasses","densityClasses","onCloseClick","Tag","isLink","hasAppend","append","hasClose","close","hasFilter","hasPrepend","prepend","hasColor","isSelected","isClickable","disabled","onClickFunc","toggle","undefined","selectedClass","href","size","_slots$default2","select","onClick"],"sources":["../../../src/components/VChip/VChip.tsx"],"sourcesContent":["// Styles\nimport './VChip.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VChipGroupSymbol } from '@/components/VChipGroup/VChipGroup'\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { defineComponent } from '@/util'\n\nexport const VChip = defineComponent({\n  name: 'VChip',\n\n  directives: { Ripple },\n\n  props: {\n    activeClass: String,\n    appendAvatar: String,\n    appendIcon: String,\n    closable: Boolean,\n    closeIcon: {\n      type: String,\n      default: '$delete',\n    },\n    closeLabel: {\n      type: String,\n      default: '$vuetify.close',\n    },\n    draggable: Boolean,\n    filter: Boolean,\n    filterIcon: {\n      type: String,\n      default: '$complete',\n    },\n    label: Boolean,\n    link: Boolean,\n    pill: Boolean,\n    prependAvatar: String,\n    prependIcon: String,\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    text: String,\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'span' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'contained-text' } as const),\n  },\n\n  emits: {\n    'click:close': (e: Event) => true,\n    'update:active': (value: Boolean) => true,\n    'update:modelValue': (value: Boolean) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n\n    const { themeClasses } = provideTheme(props)\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { elevationClasses } = useElevation(props)\n    const group = useGroupItem(props, VChipGroupSymbol, false)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const { densityClasses } = useDensity(props)\n    const link = useLink(props, attrs)\n\n    function onCloseClick (e: Event) {\n      isActive.value = false\n\n      emit('click:close', e)\n    }\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar)\n      const hasClose = !!(slots.close || props.closable)\n      const hasFilter = !!(slots.filter || props.filter) && group\n      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar)\n      const hasColor = !group || group.isSelected.value\n      const isClickable = !props.disabled && (!!group || link.isClickable.value || props.link)\n      const onClickFunc = props.link ? props.link : group?.toggle\n\n      return isActive.value && (\n        <Tag\n          class={[\n            'v-chip',\n            {\n              'v-chip--disabled': props.disabled,\n              'v-chip--label': props.label,\n              'v-chip--link': isClickable,\n              'v-chip--pill': props.pill,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n            group?.selectedClass.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n          ]}\n          disabled={ props.disabled || undefined }\n          draggable={ props.draggable }\n          href={ link.href.value }\n          v-ripple={ [isClickable && props.ripple, null] }\n          onClick={ isClickable && onClickFunc }\n        >\n          { genOverlays(isClickable, 'v-chip') }\n\n          { hasFilter && (\n            <VExpandXTransition>\n              <div\n                class=\"v-chip__filter\"\n                v-show={ group.isSelected.value }\n              >\n                { slots.filter\n                  ? slots.filter()\n                  : <VIcon icon={ props.filterIcon } />\n                }\n              </div>\n            </VExpandXTransition>\n          ) }\n\n          { hasPrepend && (\n            <div class=\"v-chip__prepend\">\n              { slots.prepend\n                ? slots.prepend()\n                : (\n                  <VAvatar\n                    icon={ props.prependIcon }\n                    image={ props.prependAvatar }\n                    size={ props.size }\n                  />\n                )\n              }\n            </div>\n          ) }\n\n          { slots.default?.({\n            isSelected: group?.isSelected.value,\n            selectedClass: group?.selectedClass.value,\n            select: group?.select,\n            toggle: group?.toggle,\n            value: group?.value.value,\n            disabled: props.disabled,\n          }) ?? props.text }\n\n          { hasAppend && (\n            <div class=\"v-chip__append\">\n              { slots.append\n                ? slots.append()\n                : (\n                  <VAvatar\n                    icon={ props.appendIcon }\n                    image={ props.appendAvatar }\n                    size={ props.size }\n                  />\n                )\n              }\n            </div>\n          ) }\n\n          { hasClose && (\n            <div\n              class=\"v-chip__close\"\n              onClick={ onCloseClick }\n            >\n              { slots.close\n                ? slots.close({ props: { onClick: onCloseClick } })\n                : (\n                  <VIcon\n                    icon={ props.closeIcon }\n                    size=\"x-small\"\n                  />\n                )\n              }\n            </div>\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VChip = InstanceType<typeof VChip>\n"]},"metadata":{},"sourceType":"module"}