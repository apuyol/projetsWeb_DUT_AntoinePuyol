{"ast":null,"code":"import _toConsumableArray from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.mjs\";\nimport { VExpansionPanelText } from \"./VExpansionPanelText.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeLazyProps } from \"../../composables/lazy.mjs\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nexport var VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    title: String,\n    text: String,\n    bgColor: String\n  }, makeElevationProps()), makeGroupItemProps()), makeLazyProps()), makeRoundedProps()), makeTagProps()), makeVExpansionPanelTitleProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var groupItem = useGroupItem(props, VExpansionPanelSymbol);\n\n    var _useBackgroundColor = useBackgroundColor(props, 'bgColor'),\n        backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n        backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useRounded = useRounded(props),\n        roundedClasses = _useRounded.roundedClasses;\n\n    var isDisabled = computed(function () {\n      return (groupItem == null ? void 0 : groupItem.disabled.value) || props.disabled;\n    });\n    var isBeforeSelected = computed(function () {\n      var index = groupItem.group.items.value.findIndex(function (item) {\n        return item.id === groupItem.id;\n      });\n      return !groupItem.isSelected.value && groupItem.group.selected.value.some(function (id) {\n        return groupItem.group.items.value.indexOf(id) - index === 1;\n      });\n    });\n    var isAfterSelected = computed(function () {\n      var index = groupItem.group.items.value.findIndex(function (item) {\n        return item.id === groupItem.id;\n      });\n      return !groupItem.isSelected.value && groupItem.group.selected.value.some(function (id) {\n        return groupItem.group.items.value.indexOf(id) - index === -1;\n      });\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(function () {\n      var _slots$default;\n\n      var hasText = !!(slots.text || props.text);\n      var hasTitle = !!(slots.title || props.title);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"aria-expanded\": groupItem.isSelected.value\n      }, {\n        \"default\": function _default() {\n          return [_createVNode(\"div\", {\n            \"class\": ['v-expansion-panel__shadow'].concat(_toConsumableArray(elevationClasses.value))\n          }, null), hasTitle && _createVNode(VExpansionPanelTitle, {\n            \"collapseIcon\": props.collapseIcon,\n            \"color\": props.color,\n            \"expandIcon\": props.expandIcon,\n            \"hideActions\": props.hideActions,\n            \"ripple\": props.ripple\n          }, {\n            \"default\": function _default() {\n              return [slots.title ? slots.title() : props.title];\n            }\n          }), hasText && _createVNode(VExpansionPanelText, {\n            \"eager\": props.eager\n          }, {\n            \"default\": function _default() {\n              return [slots.text ? slots.text() : props.text];\n            }\n          }), (_slots$default = slots[\"default\"]) == null ? void 0 : _slots$default.call(slots)];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["makeVExpansionPanelTitleProps","VExpansionPanelTitle","VExpansionPanelText","VExpansionPanelSymbol","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","useBackgroundColor","makeTagProps","makeLazyProps","computed","provide","defineComponent","useRender","VExpansionPanel","name","props","title","String","text","bgColor","setup","_ref","slots","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","isBeforeSelected","index","group","items","findIndex","item","id","isSelected","selected","some","indexOf","isAfterSelected","hasText","hasTitle","collapseIcon","color","expandIcon","hideActions","ripple","eager","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelText } from './VExpansionPanelText'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeLazyProps } from '@/composables/lazy'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          ) }\n\n          { hasText && (\n            <VExpansionPanelText eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          ) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}