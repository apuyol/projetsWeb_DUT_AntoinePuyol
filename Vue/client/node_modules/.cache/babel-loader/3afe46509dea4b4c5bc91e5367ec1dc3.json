{"ast":null,"code":"/**\n * Detect double tap events\n * # Deals with:\n * - Time intervals between taps\n * - Swipe will stop the taps\n * # Usage:\n * let tapDetector = new TapDetector()\n * tapDetector.attach(this.$el) // in mounted\n * tapDetector.detach(this.$el) // in destroy\n * tapDetector.onSingle(callback)\n * tapDetector.onDouble(callback)\n */\nfunction TapDetector() {\n  // Callbacks -----------------------------------------------------------------\n  let singleTapCallbacks = [];\n  let doubleTapCallbacks = [];\n\n  function triggerCallbacks(cbList, arg) {\n    cbList.forEach(cbItem => {\n      cbItem.call(null, arg);\n    });\n  }\n\n  this.onSingleTap = function (cb) {\n    if (typeof cb === 'function' && !singleTapCallbacks.includes(cb)) {\n      singleTapCallbacks.push(cb);\n    }\n  };\n\n  this.onDoubleTap = function (cb) {\n    if (typeof cb === 'function' && !doubleTapCallbacks.includes(cb)) {\n      doubleTapCallbacks.push(cb);\n    }\n  };\n\n  this.attach = function (dom) {\n    if (!(dom instanceof Element)) {\n      console.error('TapDetector.attach: arg must be an Element');\n      return;\n    }\n\n    dom.addEventListener('touchstart', onTouchStart);\n    dom.addEventListener('touchmove', onTouchMove);\n    dom.addEventListener('touchend', onTouchEnd);\n    dom.addEventListener('mousedown', onMouseDown);\n    dom.addEventListener('mouseup', onMouseUp);\n    dom.addEventListener('mousemove', onMouseMove);\n  };\n\n  this.detach = function (dom) {\n    dom.removeEventListener('touchstart', onTouchStart);\n    dom.removeEventListener('touchmove', onTouchMove);\n    dom.removeEventListener('touchend', onTouchEnd);\n    dom.removeEventListener('mousedown', onMouseDown);\n    dom.removeEventListener('mouseup', onMouseUp);\n    dom.removeEventListener('mousemove', onMouseMove);\n  }; // Main logic ----------------------------------------------------------------\n  // in touch mode mouse events will be disabled. Otherwise touches will\n  // trigger both touchend end mouseup, i.e. one touch triggers two onPointerUp.\n\n\n  let isTouchMode = false;\n  let lastTapTimestamp = 0;\n  let tappedCount = 0;\n  let touchMovedLength = 0;\n  let lastPointerX = 0;\n  let lastPointerY = 0;\n\n  function onTouchStart(ev) {\n    isTouchMode = true; // console.log('onTouchStart')\n\n    if (ev.touches.length === 1) {\n      onPointerDown(ev.touches[0].clientX, ev.touches[0].clientY);\n    }\n  }\n\n  function onTouchEnd(ev) {\n    // console.log('onTouchEnd')\n    if (ev.touches.length === 0) {\n      onPointerUp();\n    }\n  }\n\n  function onTouchMove(ev) {\n    // console.log('onTouchMove', ev)\n    if (ev.touches.length === 1) {\n      onPointerMove(ev.touches[0].clientX, ev.touches[0].clientY);\n    }\n  }\n\n  function onMouseDown(ev) {\n    if (isTouchMode) return; // console.log('onMouseDown')\n\n    onPointerDown(ev.clientX, ev.clientY);\n  }\n\n  function onMouseUp(ev) {\n    if (isTouchMode) return; // console.log('onMouseUp')\n\n    onPointerUp();\n  }\n\n  function onMouseMove(ev) {\n    if (isTouchMode) return; // console.log('onMouseMove', ev)\n\n    if (ev.button === 0) {\n      onPointerMove(ev.clientX, ev.clientY);\n    }\n  }\n\n  function onPointerDown(x, y) {\n    lastPointerX = x;\n    lastPointerY = y;\n    touchMovedLength = 0;\n  }\n\n  function onPointerUp() {\n    let currTimeStamp = Date.now(); // console.log('touchMovedLength', touchMovedLength)\n\n    if (touchMovedLength < 10) {\n      // Only when no sliding two far is considered as a valid tap\n      if (currTimeStamp - lastTapTimestamp < 300) {\n        tappedCount += 1;\n      } else {\n        tappedCount = 1;\n      }\n\n      lastTapTimestamp = Date.now(); // console.log('tappedCount', tappedCount)\n\n      triggerCallbacks(singleTapCallbacks, {\n        clientX: lastPointerX,\n        clientY: lastPointerY\n      });\n\n      if (tappedCount === 2) {\n        triggerCallbacks(doubleTapCallbacks, {\n          clientX: lastPointerX,\n          clientY: lastPointerY\n        });\n        tappedCount = 0; // clear count on maximum tap count\n      }\n    }\n\n    touchMovedLength = 0;\n  }\n\n  function onPointerMove(x, y) {\n    let deltaX = lastPointerX - x;\n    let deltaY = lastPointerY - y;\n    let length = Math.sqrt(deltaX * deltaX + deltaY * deltaY); // console.log('onTouchMove length', length)\n\n    touchMovedLength += length;\n    lastPointerX = x;\n    lastPointerY = y;\n  }\n}\n\nexport default TapDetector;","map":{"version":3,"sources":["D:/Stage/App/xr-place-application/client/node_modules/vue-zoomer/src/TapDetector.js"],"names":["TapDetector","singleTapCallbacks","doubleTapCallbacks","triggerCallbacks","cbList","arg","forEach","cbItem","call","onSingleTap","cb","includes","push","onDoubleTap","attach","dom","Element","console","error","addEventListener","onTouchStart","onTouchMove","onTouchEnd","onMouseDown","onMouseUp","onMouseMove","detach","removeEventListener","isTouchMode","lastTapTimestamp","tappedCount","touchMovedLength","lastPointerX","lastPointerY","ev","touches","length","onPointerDown","clientX","clientY","onPointerUp","onPointerMove","button","x","y","currTimeStamp","Date","now","deltaX","deltaY","Math","sqrt"],"mappings":"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","sourcesContent":["/**\n * Detect double tap events\n * # Deals with:\n * - Time intervals between taps\n * - Swipe will stop the taps\n * # Usage:\n * let tapDetector = new TapDetector()\n * tapDetector.attach(this.$el) // in mounted\n * tapDetector.detach(this.$el) // in destroy\n * tapDetector.onSingle(callback)\n * tapDetector.onDouble(callback)\n */\n\nfunction TapDetector () {\n\n  // Callbacks -----------------------------------------------------------------\n\n  let singleTapCallbacks = []\n  let doubleTapCallbacks = []\n\n  function triggerCallbacks (cbList, arg) {\n    cbList.forEach(cbItem => {\n      cbItem.call(null, arg)\n    })\n  }\n\n  this.onSingleTap = function (cb) {\n    if (typeof cb === 'function' && !singleTapCallbacks.includes(cb)) {\n      singleTapCallbacks.push(cb)\n    }\n  }\n  this.onDoubleTap = function (cb) {\n    if (typeof cb === 'function' && !doubleTapCallbacks.includes(cb)) {\n      doubleTapCallbacks.push(cb)\n    }\n  }\n\n  this.attach = function (dom) {\n    if (!(dom instanceof Element)) {\n      console.error('TapDetector.attach: arg must be an Element')\n      return\n    }\n    dom.addEventListener('touchstart', onTouchStart)\n    dom.addEventListener('touchmove', onTouchMove)\n    dom.addEventListener('touchend', onTouchEnd)\n    dom.addEventListener('mousedown', onMouseDown)\n    dom.addEventListener('mouseup', onMouseUp)\n    dom.addEventListener('mousemove', onMouseMove)\n  }\n\n  this.detach = function (dom) {\n    dom.removeEventListener('touchstart', onTouchStart)\n    dom.removeEventListener('touchmove', onTouchMove)\n    dom.removeEventListener('touchend', onTouchEnd)\n    dom.removeEventListener('mousedown', onMouseDown)\n    dom.removeEventListener('mouseup', onMouseUp)\n    dom.removeEventListener('mousemove', onMouseMove)\n  }\n\n  // Main logic ----------------------------------------------------------------\n\n  // in touch mode mouse events will be disabled. Otherwise touches will\n  // trigger both touchend end mouseup, i.e. one touch triggers two onPointerUp.\n  let isTouchMode = false\n  let lastTapTimestamp = 0\n  let tappedCount = 0\n  let touchMovedLength = 0\n  let lastPointerX = 0\n  let lastPointerY = 0\n\n  function onTouchStart (ev) {\n    isTouchMode = true\n    // console.log('onTouchStart')\n    if (ev.touches.length === 1) {\n      onPointerDown(ev.touches[0].clientX, ev.touches[0].clientY)\n    }\n  }\n  function onTouchEnd (ev) {\n    // console.log('onTouchEnd')\n    if (ev.touches.length === 0) {\n      onPointerUp()\n    }\n  }\n  function onTouchMove (ev) {\n    // console.log('onTouchMove', ev)\n    if (ev.touches.length === 1) {\n      onPointerMove(ev.touches[0].clientX, ev.touches[0].clientY)\n    }\n  }\n\n  function onMouseDown (ev) {\n    if (isTouchMode) return\n\n    // console.log('onMouseDown')\n    onPointerDown(ev.clientX, ev.clientY)\n  }\n  function onMouseUp (ev) {\n    if (isTouchMode) return\n\n    // console.log('onMouseUp')\n    onPointerUp()\n  }\n  function onMouseMove (ev) {\n    if (isTouchMode) return\n\n    // console.log('onMouseMove', ev)\n    if (ev.button === 0) {\n      onPointerMove(ev.clientX, ev.clientY)\n    }\n  }\n\n  function onPointerDown (x, y) {\n    lastPointerX = x\n    lastPointerY = y\n    touchMovedLength = 0\n  }\n  function onPointerUp () {\n    let currTimeStamp = Date.now()\n    // console.log('touchMovedLength', touchMovedLength)\n    if (touchMovedLength < 10) {\n      // Only when no sliding two far is considered as a valid tap\n      if (currTimeStamp - lastTapTimestamp < 300) {\n        tappedCount += 1\n      } else {\n        tappedCount = 1\n      }\n      lastTapTimestamp = Date.now()\n      // console.log('tappedCount', tappedCount)\n      triggerCallbacks(singleTapCallbacks, {\n        clientX: lastPointerX,\n        clientY: lastPointerY,\n      })\n      if (tappedCount === 2) {\n        triggerCallbacks(doubleTapCallbacks, {\n          clientX: lastPointerX,\n          clientY: lastPointerY,\n        })\n        tappedCount = 0 // clear count on maximum tap count\n      }\n    }\n    touchMovedLength = 0\n  }\n  function onPointerMove (x, y) {\n    let deltaX = lastPointerX - x\n    let deltaY = lastPointerY - y\n    let length = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n    // console.log('onTouchMove length', length)\n    touchMovedLength += length\n    lastPointerX = x\n    lastPointerY = y\n  }\n}\n\nexport default TapDetector\n"]},"metadata":{},"sourceType":"module"}