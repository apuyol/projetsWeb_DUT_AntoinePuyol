{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VChipGroup.css\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeVariantProps } from \"../../composables/variant.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { deepEqual, defineComponent } from \"../../util/index.mjs\";\nimport { toRef } from 'vue'; // Types\n\nexport var VChipGroupSymbol = Symbol[\"for\"]('vuetify:v-chip-group');\nexport var VChipGroup = defineComponent({\n  name: 'VChipGroup',\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function,\n      \"default\": deepEqual\n    }\n  }, makeGroupProps({\n    selectedClass: 'v-chip--selected'\n  })), makeTagProps()), makeThemeProps()), makeVariantProps({\n    variant: 'contained-text'\n  })),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _provideTheme = provideTheme(props),\n        themeClasses = _provideTheme.themeClasses;\n\n    var _useGroup = useGroup(props, VChipGroupSymbol),\n        isSelected = _useGroup.isSelected,\n        select = _useGroup.select,\n        next = _useGroup.next,\n        prev = _useGroup.prev,\n        selected = _useGroup.selected;\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    return function () {\n      var _slots$default;\n\n      return _createVNode(props.tag, {\n        \"class\": ['v-chip-group', {\n          'v-chip-group--column': props.column\n        }, themeClasses.value]\n      }, {\n        \"default\": function _default() {\n          return [(_slots$default = slots[\"default\"]) == null ? void 0 : _slots$default.call(slots, {\n            isSelected: isSelected,\n            select: select,\n            next: next,\n            prev: prev,\n            selected: selected.value\n          })];\n        }\n      });\n    };\n  }\n});","map":{"version":3,"mappings":";;;;mDAAA;;AACA,0B,CAEA;;SACSA,gBAAgBC,gB;SAChBC,oB;SACAC,gBAAgBC,oB;SAChBC,wB;SACAC,uB,kCAET;;SACSC,WAAWC,uB;AACpB,SAASC,KAAT,QAAsB,KAAtB,C,CAEA;;AAGA,OAAO,IAAMC,gBAAgB,GAAGC,MAAM,OAANA,CAAW,sBAAXA,CAAzB;AAEP,OAAO,IAAMC,UAAU,GAAGJ,eAAe,CAAC;AACxCK,MAAI,EAAE,YADkC;AAGxCC,OAAK;AACHC,UAAM,EAAEC,OADL;AAEHC,UAAM,EAAED,OAFL;AAGHE,mBAAe,EAAE;AACfC,UAAI,EAAEC,QADS;AAEfC,iBAASd;AAFM;AAHd,KAQAP,cAAc,CAAC;AAAEsB,iBAAa,EAAE;AAAjB,GAAD,CARd,GASApB,YAAY,EATZ,GAUAC,cAAc,EAVd,GAWAE,gBAAgB,CAAC;AAAEkB,WAAO,EAAE;AAAX,GAAD,CAXhB,CAHmC;AAiBxCC,OAAK,EAAE;AACL,yBAAsBC,+BAAD;AAAA,aAAgB,IAAhB;AAAA;AADhB,GAjBiC;AAqBxCC,OArBwC,iBAqBjCZ,KArBiC,EAqBnCa,IArBmC,EAqBf;AAAA,QAATC,KAAS,QAATA,KAAS;;AACvB,wBAAyBxB,YAAY,CAACU,KAAD,CAArC;AAAA,QAAQe,YAAR,iBAAQA,YAAR;;AACA,oBAAqD5B,QAAQ,CAACa,KAAD,EAAQJ,gBAAR,CAA7D;AAAA,QAAQoB,UAAR,aAAQA,UAAR;AAAA,QAAoBC,MAApB,aAAoBA,MAApB;AAAA,QAA4BC,IAA5B,aAA4BA,IAA5B;AAAA,QAAkCC,IAAlC,aAAkCA,IAAlC;AAAA,QAAwCC,QAAxC,aAAwCA,QAAxC;;AAEA5B,mBAAe,CAAC;AACd6B,WAAK,EAAE;AACLC,aAAK,EAAE3B,KAAK,CAACK,KAAD,EAAQ,OAAR,CADP;AAELG,cAAM,EAAER,KAAK,CAACK,KAAD,EAAQ,QAAR,CAFR;AAGLS,eAAO,EAAEd,KAAK,CAACK,KAAD,EAAQ,SAAR;AAHT;AADO,KAAD,CAAfR;AAQA,WAAO;AAAA;;AAAA;AAAA,iBAEI,CACL,cADK,EAEL;AACE,kCAAwBQ,KAAK,CAACC;AADhC,SAFK,EAKLc,YAAY,CAACJ,KALR;AAFJ;AAAA;AAAA,oCAUDG,KAAK,WAVJ,qBAUDS,2BAAgB;AAChBP,sBADgB,EAChBA,UADgB;AAEhBC,kBAFgB,EAEhBA,MAFgB;AAGhBC,gBAHgB,EAGhBA,IAHgB;AAIhBC,gBAJgB,EAIhBA,IAJgB;AAKhBC,oBAAQ,EAAEA,QAAQ,CAACT;AALH,WAAhB,CAVC;AAAA;AAAA;AAAP;AAmBD;AApDuC,CAAD,CAAlC","names":["makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","provideDefaults","deepEqual","defineComponent","toRef","VChipGroupSymbol","Symbol","VChipGroup","name","props","column","Boolean","filter","valueComparator","type","Function","default","selectedClass","variant","emits","value","setup","_ref","slots","themeClasses","isSelected","select","next","prev","selected","VChip","color","_slots$default"],"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { deepEqual, defineComponent } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const VChipGroup = defineComponent({\n  name: 'VChipGroup',\n\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function as PropType<typeof deepEqual>,\n      default: deepEqual,\n    },\n\n    ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'contained-text' } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    return () => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        }) }\n      </props.tag>\n    )\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"]},"metadata":{},"sourceType":"module"}