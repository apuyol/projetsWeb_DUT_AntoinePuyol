{"ast":null,"code":"import PopupComponent from \"./Popup/PopupMyComponents.vue\";\nimport PopupEditComponent from \"./Popup/PopupEditComponents.vue\";\nlet sphereId = 0;\nlet textId = 0;\nlet imageId = 0;\nexport default {\n  components: {\n    PopupComponent,\n    PopupEditComponent\n  },\n\n  data() {\n    return {\n      popupOpen: false,\n      editPopupOpen: false,\n      selected: null,\n      selectedType: \"\"\n    };\n  },\n\n  methods: {\n    addSphere(n) {\n      this.spheres.push({\n        id: sphereId++,\n        name: n\n      });\n    },\n\n    addText(n, t) {\n      this.texts.push({\n        id: textId++,\n        name: n,\n        txt: t\n      });\n    },\n\n    addImage(n, f) {\n      this.images.push({\n        id: imageId++,\n        name: n,\n        file: f\n      });\n    },\n\n    remove(component, type) {\n      if (type == \"sphere\") {\n        this.spheres = this.spheres.filter(t => t !== component);\n      } else if (type == \"text\") {\n        this.texts = this.texts.filter(t => t !== component);\n      } else if (type == \"image\") {\n        this.images = this.images.filter(t => t !== component);\n      }\n    },\n\n    openOrClosePopup() {\n      this.popupOpen = !this.popupOpen;\n    },\n\n    openOrCloseEditPopup(object, type) {\n      this.editPopupOpen = !this.editPopupOpen;\n      this.selected = object;\n      this.selectedType = type;\n    },\n\n    editImage(img, name, file) {\n      let tmpId = img.id;\n      this.images[tmpId].name = name;\n      this.images[tmpId].file = file;\n    },\n\n    editText(txt, name, content) {\n      let tmpId = txt.id;\n      this.texts[tmpId].name = name;\n      this.texts[tmpId].txt = content;\n    },\n\n    editSphere(sph, name) {\n      let tmpId = sph.id;\n      this.spheres[tmpId].name = name;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["PopupComponent","PopupEditComponent","sphereId","textId","imageId","components","data","popupOpen","editPopupOpen","selected","selectedType","methods","addSphere","n","spheres","push","id","name","addText","t","texts","txt","addImage","f","images","file","remove","component","type","filter","openOrClosePopup","openOrCloseEditPopup","object","editImage","img","tmpId","editText","content","editSphere","sph"],"sourceRoot":"","sources":["D:\\Stage\\App\\xr-place-application\\client\\src\\components\\MyComponents.vue"],"sourcesContent":["<template>\n  <PopupComponent\n    v-if=\"popupOpen\"\n    :status=\"openOrClosePopup\"\n    :addSphere=\"addSphere\"\n    :addImage=\"addImage\"\n    :addText=\"addText\"\n  />\n  <PopupEditComponent\n    v-if=\"editPopupOpen\"\n    :status=\"openOrCloseEditPopup\"\n    :editImage=\"editImage\"\n    :editSphere=\"editSphere\"\n    :editText=\"editText\"\n    :object=\"selected\"\n    :typeObject=\"selectedType\"\n  />\n  <h3>Spheres</h3>\n  <ul>\n    <li v-for=\"sphere in spheres\" :key=\"sphere.id\" class=\"scene\">\n      <v-btn\n        icon=\"mdi-cog\"\n        color=\"#607D8B\"\n        size=\"25\"\n        variant=\"outlined\"\n        @click=\"openOrCloseEditPopup(sphere, 'sphere')\"\n      ></v-btn>\n      <p>{{ sphere.name }}</p>\n      <v-btn\n        icon=\"mdi-close\"\n        color=\"#EF5350\"\n        size=\"25\"\n        variant=\"outlined\"\n        @click=\"remove(sphere, 'sphere')\"\n      ></v-btn>\n    </li>\n  </ul>\n  <h3>Textes</h3>\n  <ul>\n    <li v-for=\"text in texts\" :key=\"text.id\" class=\"scene\">\n      <v-btn\n        icon=\"mdi-cog\"\n        color=\"#607D8B\"\n        size=\"25\"\n        variant=\"outlined\"\n        @click=\"openOrCloseEditPopup(text, 'text')\"\n      ></v-btn>\n      <p>{{ text.name }}</p>\n      <v-btn\n        icon=\"mdi-close\"\n        color=\"#EF5350\"\n        size=\"25\"\n        variant=\"outlined\"\n        @click=\"remove(text, 'text')\"\n      ></v-btn>\n    </li>\n  </ul>\n  <h3>Images</h3>\n  <ul>\n    <li v-for=\"image in images\" :key=\"image.id\" class=\"scene\">\n      <v-btn\n        icon=\"mdi-cog\"\n        color=\"#607D8B\"\n        size=\"25\"\n        variant=\"outlined\"\n        @click=\"openOrCloseEditPopup(image, 'image')\"\n      ></v-btn>\n      <p>{{ image.name }}</p>\n      <v-btn\n        icon=\"mdi-close\"\n        color=\"#EF5350\"\n        size=\"25\"\n        variant=\"outlined\"\n        @click=\"remove(image, 'image')\"\n      ></v-btn>\n    </li>\n  </ul>\n  <div class=\"scene\" style=\"width: 100%\">\n    <v-btn\n      icon=\"mdi-plus\"\n      color=\"#81C784\"\n      class=\"add\"\n      size=\"25\"\n      variant=\"outlined\"\n      @click=\"openOrClosePopup\"\n    ></v-btn>\n  </div>\n</template>\n\n<style scoped>\n.scene {\n  display: flex;\n  justify-content: space-between;\n  margin: 5%;\n}\n\n.add {\n  display: flex;\n  margin-left: auto;\n}\n</style>\n\n<script>\nimport PopupComponent from \"./Popup/PopupMyComponents.vue\";\nimport PopupEditComponent from \"./Popup/PopupEditComponents.vue\";\n\nlet sphereId = 0;\nlet textId = 0;\nlet imageId = 0;\n\nexport default {\n  components: { PopupComponent, PopupEditComponent },\n\n  data() {\n    return {\n      popupOpen: false,\n      editPopupOpen: false,\n      selected: null,\n      selectedType: \"\",\n    };\n  },\n  methods: {\n    addSphere(n) {\n      this.spheres.push({ id: sphereId++, name: n });\n    },\n    addText(n, t) {\n      this.texts.push({ id: textId++, name: n, txt: t });\n    },\n    addImage(n, f) {\n      this.images.push({ id: imageId++, name: n, file: f });\n    },\n    remove(component, type) {\n      if (type == \"sphere\") {\n        this.spheres = this.spheres.filter((t) => t !== component);\n      } else if (type == \"text\") {\n        this.texts = this.texts.filter((t) => t !== component);\n      } else if (type == \"image\") {\n        this.images = this.images.filter((t) => t !== component);\n      }\n    },\n    openOrClosePopup() {\n      this.popupOpen = !this.popupOpen;\n    },\n    openOrCloseEditPopup(object, type) {\n      this.editPopupOpen = !this.editPopupOpen;\n      this.selected = object;\n      this.selectedType = type;\n    },\n    editImage(img, name, file) {\n      let tmpId = img.id;\n      this.images[tmpId].name = name;\n      this.images[tmpId].file = file;\n    },\n    editText(txt, name, content) {\n      let tmpId = txt.id;\n      this.texts[tmpId].name = name;\n      this.texts[tmpId].txt = content;\n    },\n    editSphere(sph, name) {\n      let tmpId = sph.id;\n      this.spheres[tmpId].name = name;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}