{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\n\nimport { computed, inject } from 'vue';\nimport { defineComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport var makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: String,\n    \"default\": '$expand'\n  },\n  collapseIcon: {\n    type: String,\n    \"default\": '$collapse'\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    \"default\": false\n  }\n});\nexport var VExpansionPanelTitle = defineComponent({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    Ripple: Ripple\n  },\n  props: _objectSpread({}, makeVExpansionPanelTitleProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n\n    var _useBackgroundColor = useBackgroundColor(props, 'color'),\n        backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n        backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n\n    var slotProps = computed(function () {\n      return {\n        collapseIcon: props.collapseIcon,\n        disabled: expansionPanel.disabled.value,\n        expanded: expansionPanel.isSelected.value,\n        expandIcon: props.expandIcon\n      };\n    });\n    useRender(function () {\n      var _slots$default;\n\n      return _withDirectives(_createVNode(\"button\", {\n        \"class\": ['v-expansion-panel-title', {\n          'v-expansion-panel-title--active': expansionPanel.isSelected.value\n        }, backgroundColorClasses.value],\n        \"style\": backgroundColorStyles.value,\n        \"type\": \"button\",\n        \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n        \"disabled\": expansionPanel.disabled.value,\n        \"aria-expanded\": expansionPanel.isSelected.value,\n        \"onClick\": expansionPanel.toggle\n      }, [_createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-title__overlay\"\n      }, null), (_slots$default = slots[\"default\"]) == null ? void 0 : _slots$default.call(slots, slotProps.value), !props.hideActions && _createVNode(\"div\", {\n        \"class\": \"v-expansion-panel-title__icon\"\n      }, [slots.actions ? slots.actions(slotProps.value) : _createVNode(VIcon, {\n        \"icon\": expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon\n      }, null)])]), [[_resolveDirective(\"ripple\"), props.ripple]]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;;6HAAA;;SACSA,a;SACAC,6B,0BAET;;SACSC,0B,+BAET;;SACSC,c,qCAET;;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,KAAjC;SACSC,iBAAiBC,cAAcC,iB;AAExC,OAAO,IAAMC,6BAA6B,GAAGF,YAAY,CAAC;AACxDG,OAAK,EAAEC,MADiD;AAExDC,YAAU,EAAE;AACVC,QAAI,EAAEF,MADI;AAEVG,eAAS;AAFC,GAF4C;AAMxDC,cAAY,EAAE;AACZF,QAAI,EAAEF,MADM;AAEZG,eAAS;AAFG,GAN0C;AAUxDE,aAAW,EAAEC,OAV2C;AAWxDC,QAAM,EAAE;AACNL,QAAI,EAAE,CAACI,OAAD,EAAUE,MAAV,CADA;AAENL,eAAS;AAFH;AAXgD,CAAD,CAAlD;AAiBP,OAAO,IAAMM,oBAAoB,GAAGd,eAAe,CAAC;AAClDe,MAAI,EAAE,sBAD4C;AAGlDC,YAAU,EAAE;AAAEnB;AAAF,GAHsC;AAKlDoB,OAAK,oBACAd,6BAA6B,EAD7B,CAL6C;AASlDe,OATkD,iBAS3CD,KAT2C,EAS7CE,IAT6C,EASzB;AAAA,QAATC,KAAS,QAATA,KAAS;AACvB,QAAMC,cAAc,GAAGtB,MAAM,CAACJ,qBAAD,CAA7B;AAEA,QAAI,CAAC0B,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,+EAAV,CAAN;;AAErB,8BAA0D1B,kBAAkB,CAACqB,KAAD,EAAQ,OAAR,CAA5E;AAAA,QAAQM,sBAAR,uBAAQA,sBAAR;AAAA,QAAgCC,qBAAhC,uBAAgCA,qBAAhC;;AAEA,QAAMC,SAAS,GAAG3B,QAAQ,CAAC;AAAA,aAAO;AAChCW,oBAAY,EAAEQ,KAAK,CAACR,YADY;AAEhCiB,gBAAQ,EAAEL,cAAc,CAACK,QAAfL,CAAwBM,KAFF;AAGhCC,gBAAQ,EAAEP,cAAc,CAACQ,UAAfR,CAA0BM,KAHJ;AAIhCrB,kBAAU,EAAEW,KAAK,CAACX;AAJc,OAAP;AAAA,KAAD,CAA1B;AAOAJ,aAAS,CAAC;AAAA;;AAAA;AAAA,iBAEC,CACL,yBADK,EAEL;AACE,6CAAmCmB,cAAc,CAACQ,UAAfR,CAA0BM;AAD/D,SAFK,EAKLJ,sBAAsB,CAACI,KALlB,CAFD;AAAA,iBASEH,qBAAqB,CAACG,KATxB;AAAA,gBAUD,QAVC;AAAA,oBAWKN,cAAc,CAACK,QAAfL,CAAwBM,KAAxBN,GAAgC,CAAC,CAAjCA,GAAqCS,SAX1C;AAAA,oBAYKT,cAAc,CAACK,QAAfL,CAAwBM,KAZ7B;AAAA,yBAaUN,cAAc,CAACQ,UAAfR,CAA0BM,KAbpC;AAAA,mBAcIN,cAAc,CAACU;AAdnB;AAAA,iBAiBK;AAjBL,kCAmBJX,KAAK,WAnBD,qBAmBJY,2BAAgBP,SAAS,CAACE,KAA1B,CAnBI,EAqBJ,CAACV,KAAK,CAACP,WAAP;AAAA,iBACW;AADX,UAGIU,KAAK,CAACa,OAANb,GAAgBA,KAAK,CAACa,OAANb,CAAcK,SAAS,CAACE,KAAxBP,CAAhBA;AAAA,gBACgBC,cAAc,CAACQ,UAAfR,CAA0BM,KAA1BN,GAAkCJ,KAAK,CAACR,YAAxCY,GAAuDJ,KAAK,CAACX;AAD7E,cAHJ,EArBI,mCAeKW,KAAK,CAACL,MAfX;AAAD,MAATV;AAgCA,WAAO,EAAP;AACD;AAxDiD,CAAD,CAA5C","names":["VIcon","VExpansionPanelSymbol","useBackgroundColor","Ripple","computed","inject","defineComponent","propsFactory","useRender","makeVExpansionPanelTitleProps","color","String","expandIcon","type","default","collapseIcon","hideActions","Boolean","ripple","Object","VExpansionPanelTitle","name","directives","props","setup","_ref","slots","expansionPanel","Error","backgroundColorClasses","backgroundColorStyles","slotProps","disabled","value","expanded","isSelected","undefined","toggle","_slots$default","actions"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx"],"sourcesContent":["// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { defineComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: String,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: String,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false,\n  },\n})\n\nexport const VExpansionPanelTitle = defineComponent({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: {\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n        ]}\n        style={ backgroundColorStyles.value }\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ expansionPanel.toggle }\n        v-ripple={ props.ripple }\n      >\n        <div class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <div class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </div>\n        ) }\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n"]},"metadata":{},"sourceType":"module"}