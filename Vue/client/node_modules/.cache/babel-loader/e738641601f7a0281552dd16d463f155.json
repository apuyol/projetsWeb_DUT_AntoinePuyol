{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSliderTrack.css\"; // Components\n\nimport { VSliderSymbol } from \"./slider.mjs\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useRounded } from \"../../composables/rounded.mjs\"; // Utilities\n\nimport { computed, inject } from 'vue';\nimport { convertToUnit, defineComponent } from \"../../util/index.mjs\";\nexport const VSliderTrack = defineComponent({\n  name: 'VSliderTrack',\n  props: {\n    start: {\n      type: Number,\n      required: true\n    },\n    stop: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: {},\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const slider = inject(VSliderSymbol);\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider');\n    const {\n      trackColor,\n      trackFillColor,\n      vertical,\n      tickSize,\n      showTicks,\n      trackSize,\n      color,\n      rounded,\n      parsedTicks,\n      horizontalDirection\n    } = slider;\n    const {\n      roundedClasses\n    } = useRounded(rounded);\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles\n    } = useBackgroundColor(trackFillColor);\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles\n    } = useBackgroundColor(trackColor);\n    const startDir = computed(() => `inset-${vertical.value ? 'block-end' : 'inline-start'}`);\n    const endDir = computed(() => vertical.value ? 'height' : 'width');\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%'\n      };\n    });\n    const trackFillWidth = computed(() => props.stop - props.start);\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%')\n      };\n    });\n    const computedTicks = computed(() => {\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value;\n      return ticks.map((tick, index) => {\n        var _slots$tickLabel, _slots$tickLabel2;\n\n        const directionProperty = vertical.value ? 'inset-block-end' : 'margin-inline-start';\n        return _createVNode(\"div\", {\n          \"key\": tick.value,\n          \"class\": ['v-slider-track__tick', {\n            'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop\n          }],\n          \"style\": {\n            [directionProperty]: tick.position > 0 && tick.position < 100 && convertToUnit(tick.position, '%')\n          }\n        }, [(tick.label || slots['tick-label']) && _createVNode(\"div\", {\n          \"class\": \"v-slider-track__tick-label\"\n        }, [(_slots$tickLabel = (_slots$tickLabel2 = slots['tick-label']) == null ? void 0 : _slots$tickLabel2.call(slots, {\n          tick,\n          index\n        })) != null ? _slots$tickLabel : tick.label])]);\n      });\n    });\n    return () => {\n      return _createVNode(\"div\", {\n        \"class\": ['v-slider-track', roundedClasses.value],\n        \"style\": {\n          '--v-slider-track-size': convertToUnit(trackSize.value),\n          '--v-slider-tick-size': convertToUnit(tickSize.value),\n          direction: !vertical.value ? horizontalDirection.value : undefined\n        }\n      }, [_createVNode(\"div\", {\n        \"class\": ['v-slider-track__background', trackColorClasses.value, {\n          'v-slider-track__background--opacity': !!color.value || !trackFillColor.value\n        }],\n        \"style\": { ...backgroundStyles.value,\n          ...trackColorStyles.value\n        }\n      }, null), _createVNode(\"div\", {\n        \"class\": ['v-slider-track__fill', trackFillColorClasses.value],\n        \"style\": { ...trackFillStyles.value,\n          ...trackFillColorStyles.value\n        }\n      }, null), showTicks.value && _createVNode(\"div\", {\n        \"class\": ['v-slider-track__ticks', {\n          'v-slider-track__ticks--always-show': showTicks.value === 'always'\n        }]\n      }, [computedTicks.value])]);\n    };\n  }\n\n});","map":{"version":3,"mappings":";mDAAA;;AACA,4B,CAEA;;SACSA,qB,gBAET;;SACSC,0B;SACAC,kB,iCAET;;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,KAAjC;SACSC,eAAeC,uB;AAExB,OAAO,MAAMC,YAAY,GAAGD,eAAe,CAAC;AAC1CE,MAAI,EAAE,cADoC;AAG1CC,OAAK,EAAE;AACLC,SAAK,EAAE;AACLC,UAAI,EAAEC,MADD;AAELC,cAAQ,EAAE;AAFL,KADF;AAKLC,QAAI,EAAE;AACJH,UAAI,EAAEC,MADF;AAEJC,cAAQ,EAAE;AAFN;AALD,GAHmC;AAc1CE,OAAK,EAAE,EAdmC;;AAgB1CC,OAAK,CAAEP,KAAF,QAAoB;AAAA,QAAX;AAAEQ;AAAF,QAAWC;AACvB,UAAMC,MAAM,GAAGf,MAAM,CAACJ,aAAD,CAArB;AAEA,QAAI,CAACmB,MAAL,EAAa,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AAEb,UAAM;AACJC,gBADI;AAEJC,oBAFI;AAGJC,cAHI;AAIJC,cAJI;AAKJC,eALI;AAMJC,eANI;AAOJC,WAPI;AAQJC,aARI;AASJC,iBATI;AAUJC;AAVI,QAWFX,MAXJ;AAaA,UAAM;AAAEY;AAAF,QAAqB7B,UAAU,CAAC0B,OAAD,CAArC;AAEA,UAAM;AACJI,4BAAsB,EAAEC,qBADpB;AAEJC,2BAAqB,EAAEC;AAFnB,QAGFlC,kBAAkB,CAACqB,cAAD,CAHtB;AAKA,UAAM;AACJU,4BAAsB,EAAEI,iBADpB;AAEJF,2BAAqB,EAAEG;AAFnB,QAGFpC,kBAAkB,CAACoB,UAAD,CAHtB;AAKA,UAAMiB,QAAQ,GAAGnC,QAAQ,CAAC,MAAO,SAAQoB,QAAQ,CAACgB,KAAThB,GAAiB,WAAjBA,GAA+B,cAAe,EAA9D,CAAzB;AACA,UAAMiB,MAAM,GAAGrC,QAAQ,CAAC,MAAMoB,QAAQ,CAACgB,KAAThB,GAAiB,QAAjBA,GAA4B,OAAnC,CAAvB;AAEA,UAAMkB,gBAAgB,GAAGtC,QAAQ,CAAC,MAAM;AACtC,aAAO;AACL,SAACmC,QAAQ,CAACC,KAAV,GAAkB,IADb;AAEL,SAACC,MAAM,CAACD,KAAR,GAAgB;AAFX,OAAP;AAD+B,MAAjC;AAOA,UAAMG,cAAc,GAAGvC,QAAQ,CAAC,MAAMM,KAAK,CAACK,IAANL,GAAaA,KAAK,CAACC,KAA1B,CAA/B;AAEA,UAAMiC,eAAe,GAAGxC,QAAQ,CAAC,MAAM;AACrC,aAAO;AACL,SAACmC,QAAQ,CAACC,KAAV,GAAkBlC,aAAa,CAACI,KAAK,CAACC,KAAP,EAAc,GAAd,CAD1B;AAEL,SAAC8B,MAAM,CAACD,KAAR,GAAgBlC,aAAa,CAACqC,cAAc,CAACH,KAAhB,EAAuB,GAAvB;AAFxB,OAAP;AAD8B,MAAhC;AAOA,UAAMK,aAAa,GAAGzC,QAAQ,CAAC,MAAM;AACnC,YAAM0C,KAAK,GAAGtB,QAAQ,CAACgB,KAAThB,GAAiBM,WAAW,CAACU,KAAZV,CAAkBiB,KAAlBjB,GAA0BkB,OAA1BlB,EAAjBN,GAAuDM,WAAW,CAACU,KAAjF;AAEA,aAAOM,KAAK,CAACG,GAANH,CAAU,CAACI,IAAD,EAAOC,KAAP,KAAiB;AAAA;;AAChC,cAAMC,iBAAiB,GAAG5B,QAAQ,CAACgB,KAAThB,GAAiB,iBAAjBA,GAAqC,qBAA/D;AACA;AAAA,iBAEU0B,IAAI,CAACV,KAFf;AAAA,mBAGW,CACL,sBADK,EAEL;AACE,4CAAgCU,IAAI,CAACG,QAALH,IAAiBxC,KAAK,CAACC,KAAvBuC,IAAgCA,IAAI,CAACG,QAALH,IAAiBxC,KAAK,CAACK;AADzF,WAFK,CAHX;AAAA,mBASW;AACL,aAACqC,iBAAD,GAAsBF,IAAI,CAACG,QAALH,GAAgB,CAAhBA,IAAqBA,IAAI,CAACG,QAALH,GAAgB,GAArCA,IAA6C5C,aAAa,CAAC4C,IAAI,CAACG,QAAN,EAAgB,GAAhB;AAD3E;AATX,YAcM,CAACH,IAAI,CAACI,KAALJ,IAAchC,KAAK,CAAC,YAAD,CAApB;AAAA,mBACa;AADb,qDAEMA,KAAK,CAAC,YAAD,CAFX,qBAEMqC,8BAAsB;AAAEL,cAAF;AAAQC;AAAR,SAAtB,CAFN,+BAEgDD,IAAI,CAACI,KAFrD,EAdN;AAFK,QAAP;AAH4B,MAA9B;AA8BA,WAAO,MAAM;AACX;AAAA,iBAEW,CACL,gBADK,EAELtB,cAAc,CAACQ,KAFV,CAFX;AAAA,iBAMW;AACL,mCAAyBlC,aAAa,CAACqB,SAAS,CAACa,KAAX,CADjC;AAEL,kCAAwBlC,aAAa,CAACmB,QAAQ,CAACe,KAAV,CAFhC;AAGLgB,mBAAS,EAAE,CAAChC,QAAQ,CAACgB,KAAV,GAAkBT,mBAAmB,CAACS,KAAtC,GAA8CiB;AAHpD;AANX;AAAA,iBAaa,CACL,4BADK,EAELpB,iBAAiB,CAACG,KAFb,EAGL;AACE,iDAAuC,CAAC,CAACZ,KAAK,CAACY,KAAR,IAAiB,CAACjB,cAAc,CAACiB;AAD1E,SAHK,CAbb;AAAA,iBAoBa,EACL,GAAGE,gBAAgB,CAACF,KADf;AAEL,aAAGF,gBAAgB,CAACE;AAFf;AApBb;AAAA,iBA0Ba,CACL,sBADK,EAELN,qBAAqB,CAACM,KAFjB,CA1Bb;AAAA,iBA8Ba,EACL,GAAGI,eAAe,CAACJ,KADd;AAEL,aAAGJ,oBAAoB,CAACI;AAFnB;AA9Bb,gBAoCMd,SAAS,CAACc,KAAVd;AAAA,iBAES,CACL,uBADK,EAEL;AACE,gDAAsCA,SAAS,CAACc,KAAVd,KAAoB;AAD5D,SAFK;AAFT,UASImB,aAAa,CAACL,KATlB,EApCN;AADF;AAoDD;;AAnJyC,CAAD,CAApC","names":["VSliderSymbol","useBackgroundColor","useRounded","computed","inject","convertToUnit","defineComponent","VSliderTrack","name","props","start","type","Number","required","stop","emits","setup","slots","_ref","slider","Error","trackColor","trackFillColor","vertical","tickSize","showTicks","trackSize","color","rounded","parsedTicks","horizontalDirection","roundedClasses","backgroundColorClasses","trackFillColorClasses","backgroundColorStyles","trackFillColorStyles","trackColorClasses","trackColorStyles","startDir","value","endDir","backgroundStyles","trackFillWidth","trackFillStyles","computedTicks","ticks","slice","reverse","map","tick","index","directionProperty","position","label","_slots$tickLabel2","direction","undefined"],"sources":["../../../src/components/VSlider/VSliderTrack.tsx"],"sourcesContent":["// Styles\nimport './VSliderTrack.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { useRounded } from '@/composables/rounded'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, defineComponent } from '@/util'\n\nexport const VSliderTrack = defineComponent({\n  name: 'VSliderTrack',\n\n  props: {\n    start: {\n      type: Number,\n      required: true,\n    },\n    stop: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  emits: {},\n\n  setup (props, { slots }) {\n    const slider = inject(VSliderSymbol)\n\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider')\n\n    const {\n      trackColor,\n      trackFillColor,\n      vertical,\n      tickSize,\n      showTicks,\n      trackSize,\n      color,\n      rounded,\n      parsedTicks,\n      horizontalDirection,\n    } = slider\n\n    const { roundedClasses } = useRounded(rounded)\n\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles,\n    } = useBackgroundColor(trackFillColor)\n\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles,\n    } = useBackgroundColor(trackColor)\n\n    const startDir = computed(() => `inset-${vertical.value ? 'block-end' : 'inline-start'}`)\n    const endDir = computed(() => vertical.value ? 'height' : 'width')\n\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%',\n      }\n    })\n\n    const trackFillWidth = computed(() => props.stop - props.start)\n\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%'),\n      }\n    })\n\n    const computedTicks = computed(() => {\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value\n\n      return ticks.map((tick, index) => {\n        const directionProperty = vertical.value ? 'inset-block-end' : 'margin-inline-start'\n        return (\n          <div\n            key={ tick.value }\n            class={[\n              'v-slider-track__tick',\n              {\n                'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop,\n              },\n            ]}\n            style={{\n              [directionProperty]: (tick.position > 0 && tick.position < 100) && convertToUnit(tick.position, '%'),\n            }}\n          >\n            {\n              (tick.label || slots['tick-label']) && (\n                <div class=\"v-slider-track__tick-label\">\n                  { slots['tick-label']?.({ tick, index }) ?? tick.label }\n                </div>\n              )\n            }\n          </div>\n        )\n      })\n    })\n\n    return () => {\n      return (\n        <div\n          class={[\n            'v-slider-track',\n            roundedClasses.value,\n          ]}\n          style={{\n            '--v-slider-track-size': convertToUnit(trackSize.value),\n            '--v-slider-tick-size': convertToUnit(tickSize.value),\n            direction: !vertical.value ? horizontalDirection.value : undefined,\n          }}\n        >\n          <div\n            class={[\n              'v-slider-track__background',\n              trackColorClasses.value,\n              {\n                'v-slider-track__background--opacity': !!color.value || !trackFillColor.value,\n              },\n            ]}\n            style={{\n              ...backgroundStyles.value,\n              ...trackColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-track__fill',\n              trackFillColorClasses.value,\n            ]}\n            style={{\n              ...trackFillStyles.value,\n              ...trackFillColorStyles.value,\n            }}\n          />\n\n          { showTicks.value && (\n            <div\n              class={[\n                'v-slider-track__ticks',\n                {\n                  'v-slider-track__ticks--always-show': showTicks.value === 'always',\n                },\n              ]}\n            >\n              { computedTicks.value }\n            </div>\n          ) }\n        </div>\n      )\n    }\n  },\n})\n\nexport type VSliderTrack = InstanceType<typeof VSliderTrack>\n"]},"metadata":{},"sourceType":"module"}