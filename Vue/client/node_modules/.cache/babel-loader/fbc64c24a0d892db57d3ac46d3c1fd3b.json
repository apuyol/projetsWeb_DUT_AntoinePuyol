{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nimport { h, openBlock, createElementBlock, normalizeStyle, renderSlot } from \"vue\";\nvar splitpanes_vue_vue_type_style_index_0_lang = \"\";\nconst _sfc_main$1 = {\n  name: \"splitpanes\",\n  emits: [\"ready\", \"resize\", \"resized\", \"pane-click\", \"pane-maximize\", \"pane-add\", \"pane-remove\", \"splitter-click\"],\n  props: {\n    horizontal: {\n      type: Boolean\n    },\n    pushOtherPanes: {\n      type: Boolean,\n      default: true\n    },\n    dblClickSplitter: {\n      type: Boolean,\n      default: true\n    },\n    rtl: {\n      type: Boolean,\n      default: false\n    },\n    firstSplitter: {\n      type: Boolean\n    }\n  },\n\n  provide() {\n    return {\n      requestUpdate: this.requestUpdate,\n      onPaneAdd: this.onPaneAdd,\n      onPaneRemove: this.onPaneRemove,\n      onPaneClick: this.onPaneClick\n    };\n  },\n\n  data: () => ({\n    container: null,\n    ready: false,\n    panes: [],\n    touch: {\n      mouseDown: false,\n      dragging: false,\n      activeSplitter: null\n    },\n    splitterTaps: {\n      splitter: null,\n      timeoutId: null\n    }\n  }),\n  computed: {\n    panesCount() {\n      return this.panes.length;\n    },\n\n    indexedPanes() {\n      return this.panes.reduce((obj, pane2) => (obj[pane2.id] = pane2) && obj, {});\n    }\n\n  },\n  methods: {\n    updatePaneComponents() {\n      this.panes.forEach(pane2 => {\n        pane2.update && pane2.update({\n          [this.horizontal ? \"height\" : \"width\"]: `${this.indexedPanes[pane2.id].size}%`\n        });\n      });\n    },\n\n    bindEvents() {\n      document.addEventListener(\"mousemove\", this.onMouseMove, {\n        passive: false\n      });\n      document.addEventListener(\"mouseup\", this.onMouseUp);\n\n      if (\"ontouchstart\" in window) {\n        document.addEventListener(\"touchmove\", this.onMouseMove, {\n          passive: false\n        });\n        document.addEventListener(\"touchend\", this.onMouseUp);\n      }\n    },\n\n    unbindEvents() {\n      document.removeEventListener(\"mousemove\", this.onMouseMove, {\n        passive: false\n      });\n      document.removeEventListener(\"mouseup\", this.onMouseUp);\n\n      if (\"ontouchstart\" in window) {\n        document.removeEventListener(\"touchmove\", this.onMouseMove, {\n          passive: false\n        });\n        document.removeEventListener(\"touchend\", this.onMouseUp);\n      }\n    },\n\n    onMouseDown(event, splitterIndex) {\n      this.bindEvents();\n      this.touch.mouseDown = true;\n      this.touch.activeSplitter = splitterIndex;\n    },\n\n    onMouseMove(event) {\n      if (this.touch.mouseDown) {\n        event.preventDefault();\n        this.touch.dragging = true;\n        this.calculatePanesSize(this.getCurrentMouseDrag(event));\n        this.$emit(\"resize\", this.panes.map(pane2 => ({\n          min: pane2.min,\n          max: pane2.max,\n          size: pane2.size\n        })));\n      }\n    },\n\n    onMouseUp() {\n      if (this.touch.dragging) {\n        this.$emit(\"resized\", this.panes.map(pane2 => ({\n          min: pane2.min,\n          max: pane2.max,\n          size: pane2.size\n        })));\n      }\n\n      this.touch.mouseDown = false;\n      setTimeout(() => {\n        this.touch.dragging = false;\n        this.unbindEvents();\n      }, 100);\n    },\n\n    onSplitterClick(event, splitterIndex) {\n      if (\"ontouchstart\" in window) {\n        event.preventDefault();\n\n        if (this.dblClickSplitter) {\n          if (this.splitterTaps.splitter === splitterIndex) {\n            clearTimeout(this.splitterTaps.timeoutId);\n            this.splitterTaps.timeoutId = null;\n            this.onSplitterDblClick(event, splitterIndex);\n            this.splitterTaps.splitter = null;\n          } else {\n            this.splitterTaps.splitter = splitterIndex;\n            this.splitterTaps.timeoutId = setTimeout(() => {\n              this.splitterTaps.splitter = null;\n            }, 500);\n          }\n        }\n      }\n\n      if (!this.touch.dragging) this.$emit(\"splitter-click\", this.panes[splitterIndex]);\n    },\n\n    onSplitterDblClick(event, splitterIndex) {\n      let totalMinSizes = 0;\n      this.panes = this.panes.map((pane2, i) => {\n        pane2.size = i === splitterIndex ? pane2.max : pane2.min;\n        if (i !== splitterIndex) totalMinSizes += pane2.min;\n        return pane2;\n      });\n      this.panes[splitterIndex].size -= totalMinSizes;\n      this.$emit(\"pane-maximize\", this.panes[splitterIndex]);\n    },\n\n    onPaneClick(event, paneId) {\n      this.$emit(\"pane-click\", this.indexedPanes[paneId]);\n    },\n\n    getCurrentMouseDrag(event) {\n      const rect = this.container.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = \"ontouchstart\" in window && event.touches ? event.touches[0] : event;\n      return {\n        x: clientX - rect.left,\n        y: clientY - rect.top\n      };\n    },\n\n    getCurrentDragPercentage(drag) {\n      drag = drag[this.horizontal ? \"y\" : \"x\"];\n      const containerSize = this.container[this.horizontal ? \"clientHeight\" : \"clientWidth\"];\n      if (this.rtl && !this.horizontal) drag = containerSize - drag;\n      return drag * 100 / containerSize;\n    },\n\n    calculatePanesSize(drag) {\n      const splitterIndex = this.touch.activeSplitter;\n      let sums = {\n        prevPanesSize: this.sumPrevPanesSize(splitterIndex),\n        nextPanesSize: this.sumNextPanesSize(splitterIndex),\n        prevReachedMinPanes: 0,\n        nextReachedMinPanes: 0\n      };\n      const minDrag = 0 + (this.pushOtherPanes ? 0 : sums.prevPanesSize);\n      const maxDrag = 100 - (this.pushOtherPanes ? 0 : sums.nextPanesSize);\n      const dragPercentage = Math.max(Math.min(this.getCurrentDragPercentage(drag), maxDrag), minDrag);\n      let panesToResize = [splitterIndex, splitterIndex + 1];\n      let paneBefore = this.panes[panesToResize[0]] || null;\n      let paneAfter = this.panes[panesToResize[1]] || null;\n      const paneBeforeMaxReached = paneBefore.max < 100 && dragPercentage >= paneBefore.max + sums.prevPanesSize;\n      const paneAfterMaxReached = paneAfter.max < 100 && dragPercentage <= 100 - (paneAfter.max + this.sumNextPanesSize(splitterIndex + 1));\n\n      if (paneBeforeMaxReached || paneAfterMaxReached) {\n        if (paneBeforeMaxReached) {\n          paneBefore.size = paneBefore.max;\n          paneAfter.size = Math.max(100 - paneBefore.max - sums.prevPanesSize - sums.nextPanesSize, 0);\n        } else {\n          paneBefore.size = Math.max(100 - paneAfter.max - sums.prevPanesSize - this.sumNextPanesSize(splitterIndex + 1), 0);\n          paneAfter.size = paneAfter.max;\n        }\n\n        return;\n      }\n\n      if (this.pushOtherPanes) {\n        const vars = this.doPushOtherPanes(sums, dragPercentage);\n        if (!vars) return;\n        ({\n          sums,\n          panesToResize\n        } = vars);\n        paneBefore = this.panes[panesToResize[0]] || null;\n        paneAfter = this.panes[panesToResize[1]] || null;\n      }\n\n      if (paneBefore !== null) {\n        paneBefore.size = Math.min(Math.max(dragPercentage - sums.prevPanesSize - sums.prevReachedMinPanes, paneBefore.min), paneBefore.max);\n      }\n\n      if (paneAfter !== null) {\n        paneAfter.size = Math.min(Math.max(100 - dragPercentage - sums.nextPanesSize - sums.nextReachedMinPanes, paneAfter.min), paneAfter.max);\n      }\n    },\n\n    doPushOtherPanes(sums, dragPercentage) {\n      const splitterIndex = this.touch.activeSplitter;\n      const panesToResize = [splitterIndex, splitterIndex + 1];\n\n      if (dragPercentage < sums.prevPanesSize + this.panes[panesToResize[0]].min) {\n        panesToResize[0] = this.findPrevExpandedPane(splitterIndex).index;\n        sums.prevReachedMinPanes = 0;\n\n        if (panesToResize[0] < splitterIndex) {\n          this.panes.forEach((pane2, i) => {\n            if (i > panesToResize[0] && i <= splitterIndex) {\n              pane2.size = pane2.min;\n              sums.prevReachedMinPanes += pane2.min;\n            }\n          });\n        }\n\n        sums.prevPanesSize = this.sumPrevPanesSize(panesToResize[0]);\n\n        if (panesToResize[0] === void 0) {\n          sums.prevReachedMinPanes = 0;\n          this.panes[0].size = this.panes[0].min;\n          this.panes.forEach((pane2, i) => {\n            if (i > 0 && i <= splitterIndex) {\n              pane2.size = pane2.min;\n              sums.prevReachedMinPanes += pane2.min;\n            }\n          });\n          this.panes[panesToResize[1]].size = 100 - sums.prevReachedMinPanes - this.panes[0].min - sums.prevPanesSize - sums.nextPanesSize;\n          return null;\n        }\n      }\n\n      if (dragPercentage > 100 - sums.nextPanesSize - this.panes[panesToResize[1]].min) {\n        panesToResize[1] = this.findNextExpandedPane(splitterIndex).index;\n        sums.nextReachedMinPanes = 0;\n\n        if (panesToResize[1] > splitterIndex + 1) {\n          this.panes.forEach((pane2, i) => {\n            if (i > splitterIndex && i < panesToResize[1]) {\n              pane2.size = pane2.min;\n              sums.nextReachedMinPanes += pane2.min;\n            }\n          });\n        }\n\n        sums.nextPanesSize = this.sumNextPanesSize(panesToResize[1] - 1);\n\n        if (panesToResize[1] === void 0) {\n          sums.nextReachedMinPanes = 0;\n          this.panes[this.panesCount - 1].size = this.panes[this.panesCount - 1].min;\n          this.panes.forEach((pane2, i) => {\n            if (i < this.panesCount - 1 && i >= splitterIndex + 1) {\n              pane2.size = pane2.min;\n              sums.nextReachedMinPanes += pane2.min;\n            }\n          });\n          this.panes[panesToResize[0]].size = 100 - sums.prevPanesSize - sums.nextReachedMinPanes - this.panes[this.panesCount - 1].min - sums.nextPanesSize;\n          return null;\n        }\n      }\n\n      return {\n        sums,\n        panesToResize\n      };\n    },\n\n    sumPrevPanesSize(splitterIndex) {\n      return this.panes.reduce((total, pane2, i) => total + (i < splitterIndex ? pane2.size : 0), 0);\n    },\n\n    sumNextPanesSize(splitterIndex) {\n      return this.panes.reduce((total, pane2, i) => total + (i > splitterIndex + 1 ? pane2.size : 0), 0);\n    },\n\n    findPrevExpandedPane(splitterIndex) {\n      const pane2 = [...this.panes].reverse().find(p => p.index < splitterIndex && p.size > p.min);\n      return pane2 || {};\n    },\n\n    findNextExpandedPane(splitterIndex) {\n      const pane2 = this.panes.find(p => p.index > splitterIndex + 1 && p.size > p.min);\n      return pane2 || {};\n    },\n\n    checkSplitpanesNodes() {\n      const children = Array.from(this.container.children);\n      children.forEach(child => {\n        const isPane = child.classList.contains(\"splitpanes__pane\");\n        const isSplitter = child.classList.contains(\"splitpanes__splitter\");\n\n        if (!isPane && !isSplitter) {\n          child.parentNode.removeChild(child);\n          console.warn(\"Splitpanes: Only <pane> elements are allowed at the root of <splitpanes>. One of your DOM nodes was removed.\");\n          return;\n        }\n      });\n    },\n\n    addSplitter(paneIndex, nextPaneNode, isVeryFirst = false) {\n      const splitterIndex = paneIndex - 1;\n      const elm = document.createElement(\"div\");\n      elm.classList.add(\"splitpanes__splitter\");\n\n      if (!isVeryFirst) {\n        elm.onmousedown = event => this.onMouseDown(event, splitterIndex);\n\n        if (typeof window !== \"undefined\" && \"ontouchstart\" in window) {\n          elm.ontouchstart = event => this.onMouseDown(event, splitterIndex);\n        }\n\n        elm.onclick = event => this.onSplitterClick(event, splitterIndex + 1);\n      }\n\n      if (this.dblClickSplitter) {\n        elm.ondblclick = event => this.onSplitterDblClick(event, splitterIndex + 1);\n      }\n\n      nextPaneNode.parentNode.insertBefore(elm, nextPaneNode);\n    },\n\n    removeSplitter(node) {\n      node.onmousedown = void 0;\n      node.onclick = void 0;\n      node.ondblclick = void 0;\n      node.parentNode.removeChild(node);\n    },\n\n    redoSplitters() {\n      const children = Array.from(this.container.children);\n      children.forEach(el => {\n        if (el.className.includes(\"splitpanes__splitter\")) this.removeSplitter(el);\n      });\n      let paneIndex = 0;\n      children.forEach(el => {\n        if (el.className.includes(\"splitpanes__pane\")) {\n          if (!paneIndex && this.firstSplitter) this.addSplitter(paneIndex, el, true);else if (paneIndex) this.addSplitter(paneIndex, el);\n          paneIndex++;\n        }\n      });\n    },\n\n    requestUpdate(_a) {\n      var _b = _a,\n          {\n        target\n      } = _b,\n          args = __objRest(_b, [\"target\"]);\n\n      const pane2 = this.indexedPanes[target._.uid];\n      Object.entries(args).forEach(([key, value]) => pane2[key] = value);\n    },\n\n    onPaneAdd(pane2) {\n      let index = -1;\n      Array.from(pane2.$el.parentNode.children).some(el => {\n        if (el.className.includes(\"splitpanes__pane\")) index++;\n        return el === pane2.$el;\n      });\n      const min = parseFloat(pane2.minSize);\n      const max = parseFloat(pane2.maxSize);\n      this.panes.splice(index, 0, {\n        id: pane2._.uid,\n        index,\n        min: isNaN(min) ? 0 : min,\n        max: isNaN(max) ? 100 : max,\n        size: pane2.size === null ? null : parseFloat(pane2.size),\n        givenSize: pane2.size,\n        update: pane2.update\n      });\n      this.panes.forEach((p, i) => p.index = i);\n\n      if (this.ready) {\n        this.$nextTick(() => {\n          this.redoSplitters();\n          this.resetPaneSizes({\n            addedPane: this.panes[index]\n          });\n          this.$emit(\"pane-add\", {\n            index,\n            panes: this.panes.map(pane3 => ({\n              min: pane3.min,\n              max: pane3.max,\n              size: pane3.size\n            }))\n          });\n        });\n      }\n    },\n\n    onPaneRemove(pane2) {\n      const index = this.panes.findIndex(p => p.id === pane2._.uid);\n      const removed = this.panes.splice(index, 1)[0];\n      this.panes.forEach((p, i) => p.index = i);\n      this.$nextTick(() => {\n        this.redoSplitters();\n        this.resetPaneSizes({\n          removedPane: __spreadProps(__spreadValues({}, removed), {\n            index\n          })\n        });\n        this.$emit(\"pane-remove\", {\n          removed,\n          panes: this.panes.map(pane3 => ({\n            min: pane3.min,\n            max: pane3.max,\n            size: pane3.size\n          }))\n        });\n      });\n    },\n\n    resetPaneSizes(changedPanes = {}) {\n      if (!changedPanes.addedPane && !changedPanes.removedPane) this.initialPanesSizing();else if (this.panes.some(pane2 => pane2.givenSize !== null || pane2.min || pane2.max < 100)) this.equalizeAfterAddOrRemove(changedPanes);else this.equalize();\n      if (this.ready) this.$emit(\"resized\", this.panes.map(pane2 => ({\n        min: pane2.min,\n        max: pane2.max,\n        size: pane2.size\n      })));\n    },\n\n    equalize() {\n      const equalSpace = 100 / this.panesCount;\n      let leftToAllocate = 0;\n      let ungrowable = [];\n      let unshrinkable = [];\n      this.panes.forEach(pane2 => {\n        pane2.size = Math.max(Math.min(equalSpace, pane2.max), pane2.min);\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      if (leftToAllocate > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n    },\n\n    initialPanesSizing() {\n      100 / this.panesCount;\n      let leftToAllocate = 100;\n      let ungrowable = [];\n      let unshrinkable = [];\n      let definedSizes = 0;\n      this.panes.forEach(pane2 => {\n        leftToAllocate -= pane2.size;\n        if (pane2.size !== null) definedSizes++;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      let leftToAllocate2 = 100;\n\n      if (leftToAllocate > 0.1) {\n        this.panes.forEach(pane2 => {\n          if (pane2.size === null) {\n            pane2.size = Math.max(Math.min(leftToAllocate / (this.panesCount - definedSizes), pane2.max), pane2.min);\n          }\n\n          leftToAllocate2 -= pane2.size;\n        });\n        if (leftToAllocate2 > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n      }\n    },\n\n    equalizeAfterAddOrRemove({\n      addedPane,\n      removedPane\n    } = {}) {\n      let equalSpace = 100 / this.panesCount;\n      let leftToAllocate = 0;\n      let ungrowable = [];\n      let unshrinkable = [];\n\n      if (addedPane && addedPane.givenSize !== null) {\n        equalSpace = (100 - addedPane.givenSize) / (this.panesCount - 1);\n      }\n\n      this.panes.forEach(pane2 => {\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      if (Math.abs(leftToAllocate) < 0.1) return;\n      this.panes.forEach(pane2 => {\n        if (addedPane && addedPane.givenSize !== null && addedPane.id === pane2.id) ;else pane2.size = Math.max(Math.min(equalSpace, pane2.max), pane2.min);\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max) ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min) unshrinkable.push(pane2.id);\n      });\n      if (leftToAllocate > 0.1) this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n    },\n\n    readjustSizes(leftToAllocate, ungrowable, unshrinkable) {\n      let equalSpaceToAllocate;\n      if (leftToAllocate > 0) equalSpaceToAllocate = leftToAllocate / (this.panesCount - ungrowable.length);else equalSpaceToAllocate = leftToAllocate / (this.panesCount - unshrinkable.length);\n      this.panes.forEach((pane2, i) => {\n        if (leftToAllocate > 0 && !ungrowable.includes(pane2.id)) {\n          const newPaneSize = Math.max(Math.min(pane2.size + equalSpaceToAllocate, pane2.max), pane2.min);\n          const allocated = newPaneSize - pane2.size;\n          leftToAllocate -= allocated;\n          pane2.size = newPaneSize;\n        } else if (!unshrinkable.includes(pane2.id)) {\n          const newPaneSize = Math.max(Math.min(pane2.size + equalSpaceToAllocate, pane2.max), pane2.min);\n          const allocated = newPaneSize - pane2.size;\n          leftToAllocate -= allocated;\n          pane2.size = newPaneSize;\n        }\n\n        pane2.update({\n          [this.horizontal ? \"height\" : \"width\"]: `${this.indexedPanes[pane2.id].size}%`\n        });\n      });\n\n      if (Math.abs(leftToAllocate) > 0.1) {\n        this.$nextTick(() => {\n          if (this.ready) {\n            console.warn(\"Splitpanes: Could not resize panes correctly due to their constraints.\");\n          }\n        });\n      }\n    }\n\n  },\n  watch: {\n    panes: {\n      deep: true,\n      immediate: false,\n\n      handler() {\n        this.updatePaneComponents();\n      }\n\n    },\n\n    horizontal() {\n      this.updatePaneComponents();\n    },\n\n    firstSplitter() {\n      this.redoSplitters();\n    },\n\n    dblClickSplitter(enable) {\n      const splitters = [...this.container.querySelectorAll(\".splitpanes__splitter\")];\n      splitters.forEach((splitter, i) => {\n        splitter.ondblclick = enable ? event => this.onSplitterDblClick(event, i) : void 0;\n      });\n    }\n\n  },\n\n  beforeUnmount() {\n    this.ready = false;\n  },\n\n  mounted() {\n    this.container = this.$refs.container;\n    this.checkSplitpanesNodes();\n    this.redoSplitters();\n    this.resetPaneSizes();\n    this.$emit(\"ready\");\n    this.ready = true;\n  },\n\n  render() {\n    return h(\"div\", {\n      ref: \"container\",\n      class: [\"splitpanes\", `splitpanes--${this.horizontal ? \"horizontal\" : \"vertical\"}`, {\n        \"splitpanes--dragging\": this.touch.dragging\n      }]\n    }, this.$slots.default());\n  }\n\n};\n\nvar _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n\n  return target;\n};\n\nconst _sfc_main = {\n  name: \"pane\",\n  inject: [\"requestUpdate\", \"onPaneAdd\", \"onPaneRemove\", \"onPaneClick\"],\n  props: {\n    size: {\n      type: [Number, String],\n      default: null\n    },\n    minSize: {\n      type: [Number, String],\n      default: 0\n    },\n    maxSize: {\n      type: [Number, String],\n      default: 100\n    }\n  },\n  data: () => ({\n    style: {}\n  }),\n\n  mounted() {\n    this.onPaneAdd(this);\n  },\n\n  beforeUnmount() {\n    this.onPaneRemove(this);\n  },\n\n  methods: {\n    update(style) {\n      this.style = style;\n    }\n\n  },\n  computed: {\n    sizeNumber() {\n      return this.size || this.size === 0 ? parseFloat(this.size) : null;\n    },\n\n    minSizeNumber() {\n      return parseFloat(this.minSize);\n    },\n\n    maxSizeNumber() {\n      return parseFloat(this.maxSize);\n    }\n\n  },\n  watch: {\n    sizeNumber(size) {\n      this.requestUpdate({\n        target: this,\n        size\n      });\n    },\n\n    minSizeNumber(min) {\n      this.requestUpdate({\n        target: this,\n        min\n      });\n    },\n\n    maxSizeNumber(max) {\n      this.requestUpdate({\n        target: this,\n        max\n      });\n    }\n\n  }\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"splitpanes__pane\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.onPaneClick($event, _ctx._.uid)),\n    style: normalizeStyle(_ctx.style)\n  }, [renderSlot(_ctx.$slots, \"default\")], 4);\n}\n\nvar pane = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { pane as Pane, _sfc_main$1 as Splitpanes };","map":{"version":3,"sources":["D:/Stage/App/xr-place-application/client/node_modules/splitpanes/dist/splitpanes.es.js"],"names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","__objRest","source","exclude","target","indexOf","h","openBlock","createElementBlock","normalizeStyle","renderSlot","splitpanes_vue_vue_type_style_index_0_lang","_sfc_main$1","name","emits","props","horizontal","type","Boolean","pushOtherPanes","default","dblClickSplitter","rtl","firstSplitter","provide","requestUpdate","onPaneAdd","onPaneRemove","onPaneClick","data","container","ready","panes","touch","mouseDown","dragging","activeSplitter","splitterTaps","splitter","timeoutId","computed","panesCount","length","indexedPanes","reduce","pane2","id","methods","updatePaneComponents","forEach","update","size","bindEvents","document","addEventListener","onMouseMove","passive","onMouseUp","window","unbindEvents","removeEventListener","onMouseDown","event","splitterIndex","preventDefault","calculatePanesSize","getCurrentMouseDrag","$emit","map","min","max","setTimeout","onSplitterClick","clearTimeout","onSplitterDblClick","totalMinSizes","i","paneId","rect","getBoundingClientRect","clientX","clientY","touches","x","left","y","top","getCurrentDragPercentage","drag","containerSize","sums","prevPanesSize","sumPrevPanesSize","nextPanesSize","sumNextPanesSize","prevReachedMinPanes","nextReachedMinPanes","minDrag","maxDrag","dragPercentage","Math","panesToResize","paneBefore","paneAfter","paneBeforeMaxReached","paneAfterMaxReached","vars","doPushOtherPanes","findPrevExpandedPane","index","findNextExpandedPane","total","reverse","find","p","checkSplitpanesNodes","children","Array","from","child","isPane","classList","contains","isSplitter","parentNode","removeChild","console","warn","addSplitter","paneIndex","nextPaneNode","isVeryFirst","elm","createElement","add","onmousedown","ontouchstart","onclick","ondblclick","insertBefore","removeSplitter","node","redoSplitters","el","className","includes","_a","_b","args","_","uid","entries","$el","some","parseFloat","minSize","maxSize","splice","isNaN","givenSize","$nextTick","resetPaneSizes","addedPane","pane3","findIndex","removed","removedPane","changedPanes","initialPanesSizing","equalizeAfterAddOrRemove","equalize","equalSpace","leftToAllocate","ungrowable","unshrinkable","push","readjustSizes","definedSizes","leftToAllocate2","abs","equalSpaceToAllocate","newPaneSize","allocated","watch","deep","immediate","handler","enable","splitters","querySelectorAll","beforeUnmount","mounted","$refs","render","ref","class","$slots","_export_sfc","sfc","__vccOpts","val","_sfc_main","inject","Number","String","style","sizeNumber","minSizeNumber","maxSizeNumber","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","onClick","$event","pane","Pane","Splitpanes"],"mappings":"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","sourcesContent":["var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nimport { h, openBlock, createElementBlock, normalizeStyle, renderSlot } from \"vue\";\nvar splitpanes_vue_vue_type_style_index_0_lang = \"\";\nconst _sfc_main$1 = {\n  name: \"splitpanes\",\n  emits: [\"ready\", \"resize\", \"resized\", \"pane-click\", \"pane-maximize\", \"pane-add\", \"pane-remove\", \"splitter-click\"],\n  props: {\n    horizontal: { type: Boolean },\n    pushOtherPanes: { type: Boolean, default: true },\n    dblClickSplitter: { type: Boolean, default: true },\n    rtl: { type: Boolean, default: false },\n    firstSplitter: { type: Boolean }\n  },\n  provide() {\n    return {\n      requestUpdate: this.requestUpdate,\n      onPaneAdd: this.onPaneAdd,\n      onPaneRemove: this.onPaneRemove,\n      onPaneClick: this.onPaneClick\n    };\n  },\n  data: () => ({\n    container: null,\n    ready: false,\n    panes: [],\n    touch: {\n      mouseDown: false,\n      dragging: false,\n      activeSplitter: null\n    },\n    splitterTaps: {\n      splitter: null,\n      timeoutId: null\n    }\n  }),\n  computed: {\n    panesCount() {\n      return this.panes.length;\n    },\n    indexedPanes() {\n      return this.panes.reduce((obj, pane2) => (obj[pane2.id] = pane2) && obj, {});\n    }\n  },\n  methods: {\n    updatePaneComponents() {\n      this.panes.forEach((pane2) => {\n        pane2.update && pane2.update({\n          [this.horizontal ? \"height\" : \"width\"]: `${this.indexedPanes[pane2.id].size}%`\n        });\n      });\n    },\n    bindEvents() {\n      document.addEventListener(\"mousemove\", this.onMouseMove, { passive: false });\n      document.addEventListener(\"mouseup\", this.onMouseUp);\n      if (\"ontouchstart\" in window) {\n        document.addEventListener(\"touchmove\", this.onMouseMove, { passive: false });\n        document.addEventListener(\"touchend\", this.onMouseUp);\n      }\n    },\n    unbindEvents() {\n      document.removeEventListener(\"mousemove\", this.onMouseMove, { passive: false });\n      document.removeEventListener(\"mouseup\", this.onMouseUp);\n      if (\"ontouchstart\" in window) {\n        document.removeEventListener(\"touchmove\", this.onMouseMove, { passive: false });\n        document.removeEventListener(\"touchend\", this.onMouseUp);\n      }\n    },\n    onMouseDown(event, splitterIndex) {\n      this.bindEvents();\n      this.touch.mouseDown = true;\n      this.touch.activeSplitter = splitterIndex;\n    },\n    onMouseMove(event) {\n      if (this.touch.mouseDown) {\n        event.preventDefault();\n        this.touch.dragging = true;\n        this.calculatePanesSize(this.getCurrentMouseDrag(event));\n        this.$emit(\"resize\", this.panes.map((pane2) => ({ min: pane2.min, max: pane2.max, size: pane2.size })));\n      }\n    },\n    onMouseUp() {\n      if (this.touch.dragging) {\n        this.$emit(\"resized\", this.panes.map((pane2) => ({ min: pane2.min, max: pane2.max, size: pane2.size })));\n      }\n      this.touch.mouseDown = false;\n      setTimeout(() => {\n        this.touch.dragging = false;\n        this.unbindEvents();\n      }, 100);\n    },\n    onSplitterClick(event, splitterIndex) {\n      if (\"ontouchstart\" in window) {\n        event.preventDefault();\n        if (this.dblClickSplitter) {\n          if (this.splitterTaps.splitter === splitterIndex) {\n            clearTimeout(this.splitterTaps.timeoutId);\n            this.splitterTaps.timeoutId = null;\n            this.onSplitterDblClick(event, splitterIndex);\n            this.splitterTaps.splitter = null;\n          } else {\n            this.splitterTaps.splitter = splitterIndex;\n            this.splitterTaps.timeoutId = setTimeout(() => {\n              this.splitterTaps.splitter = null;\n            }, 500);\n          }\n        }\n      }\n      if (!this.touch.dragging)\n        this.$emit(\"splitter-click\", this.panes[splitterIndex]);\n    },\n    onSplitterDblClick(event, splitterIndex) {\n      let totalMinSizes = 0;\n      this.panes = this.panes.map((pane2, i) => {\n        pane2.size = i === splitterIndex ? pane2.max : pane2.min;\n        if (i !== splitterIndex)\n          totalMinSizes += pane2.min;\n        return pane2;\n      });\n      this.panes[splitterIndex].size -= totalMinSizes;\n      this.$emit(\"pane-maximize\", this.panes[splitterIndex]);\n    },\n    onPaneClick(event, paneId) {\n      this.$emit(\"pane-click\", this.indexedPanes[paneId]);\n    },\n    getCurrentMouseDrag(event) {\n      const rect = this.container.getBoundingClientRect();\n      const { clientX, clientY } = \"ontouchstart\" in window && event.touches ? event.touches[0] : event;\n      return {\n        x: clientX - rect.left,\n        y: clientY - rect.top\n      };\n    },\n    getCurrentDragPercentage(drag) {\n      drag = drag[this.horizontal ? \"y\" : \"x\"];\n      const containerSize = this.container[this.horizontal ? \"clientHeight\" : \"clientWidth\"];\n      if (this.rtl && !this.horizontal)\n        drag = containerSize - drag;\n      return drag * 100 / containerSize;\n    },\n    calculatePanesSize(drag) {\n      const splitterIndex = this.touch.activeSplitter;\n      let sums = {\n        prevPanesSize: this.sumPrevPanesSize(splitterIndex),\n        nextPanesSize: this.sumNextPanesSize(splitterIndex),\n        prevReachedMinPanes: 0,\n        nextReachedMinPanes: 0\n      };\n      const minDrag = 0 + (this.pushOtherPanes ? 0 : sums.prevPanesSize);\n      const maxDrag = 100 - (this.pushOtherPanes ? 0 : sums.nextPanesSize);\n      const dragPercentage = Math.max(Math.min(this.getCurrentDragPercentage(drag), maxDrag), minDrag);\n      let panesToResize = [splitterIndex, splitterIndex + 1];\n      let paneBefore = this.panes[panesToResize[0]] || null;\n      let paneAfter = this.panes[panesToResize[1]] || null;\n      const paneBeforeMaxReached = paneBefore.max < 100 && dragPercentage >= paneBefore.max + sums.prevPanesSize;\n      const paneAfterMaxReached = paneAfter.max < 100 && dragPercentage <= 100 - (paneAfter.max + this.sumNextPanesSize(splitterIndex + 1));\n      if (paneBeforeMaxReached || paneAfterMaxReached) {\n        if (paneBeforeMaxReached) {\n          paneBefore.size = paneBefore.max;\n          paneAfter.size = Math.max(100 - paneBefore.max - sums.prevPanesSize - sums.nextPanesSize, 0);\n        } else {\n          paneBefore.size = Math.max(100 - paneAfter.max - sums.prevPanesSize - this.sumNextPanesSize(splitterIndex + 1), 0);\n          paneAfter.size = paneAfter.max;\n        }\n        return;\n      }\n      if (this.pushOtherPanes) {\n        const vars = this.doPushOtherPanes(sums, dragPercentage);\n        if (!vars)\n          return;\n        ({ sums, panesToResize } = vars);\n        paneBefore = this.panes[panesToResize[0]] || null;\n        paneAfter = this.panes[panesToResize[1]] || null;\n      }\n      if (paneBefore !== null) {\n        paneBefore.size = Math.min(Math.max(dragPercentage - sums.prevPanesSize - sums.prevReachedMinPanes, paneBefore.min), paneBefore.max);\n      }\n      if (paneAfter !== null) {\n        paneAfter.size = Math.min(Math.max(100 - dragPercentage - sums.nextPanesSize - sums.nextReachedMinPanes, paneAfter.min), paneAfter.max);\n      }\n    },\n    doPushOtherPanes(sums, dragPercentage) {\n      const splitterIndex = this.touch.activeSplitter;\n      const panesToResize = [splitterIndex, splitterIndex + 1];\n      if (dragPercentage < sums.prevPanesSize + this.panes[panesToResize[0]].min) {\n        panesToResize[0] = this.findPrevExpandedPane(splitterIndex).index;\n        sums.prevReachedMinPanes = 0;\n        if (panesToResize[0] < splitterIndex) {\n          this.panes.forEach((pane2, i) => {\n            if (i > panesToResize[0] && i <= splitterIndex) {\n              pane2.size = pane2.min;\n              sums.prevReachedMinPanes += pane2.min;\n            }\n          });\n        }\n        sums.prevPanesSize = this.sumPrevPanesSize(panesToResize[0]);\n        if (panesToResize[0] === void 0) {\n          sums.prevReachedMinPanes = 0;\n          this.panes[0].size = this.panes[0].min;\n          this.panes.forEach((pane2, i) => {\n            if (i > 0 && i <= splitterIndex) {\n              pane2.size = pane2.min;\n              sums.prevReachedMinPanes += pane2.min;\n            }\n          });\n          this.panes[panesToResize[1]].size = 100 - sums.prevReachedMinPanes - this.panes[0].min - sums.prevPanesSize - sums.nextPanesSize;\n          return null;\n        }\n      }\n      if (dragPercentage > 100 - sums.nextPanesSize - this.panes[panesToResize[1]].min) {\n        panesToResize[1] = this.findNextExpandedPane(splitterIndex).index;\n        sums.nextReachedMinPanes = 0;\n        if (panesToResize[1] > splitterIndex + 1) {\n          this.panes.forEach((pane2, i) => {\n            if (i > splitterIndex && i < panesToResize[1]) {\n              pane2.size = pane2.min;\n              sums.nextReachedMinPanes += pane2.min;\n            }\n          });\n        }\n        sums.nextPanesSize = this.sumNextPanesSize(panesToResize[1] - 1);\n        if (panesToResize[1] === void 0) {\n          sums.nextReachedMinPanes = 0;\n          this.panes[this.panesCount - 1].size = this.panes[this.panesCount - 1].min;\n          this.panes.forEach((pane2, i) => {\n            if (i < this.panesCount - 1 && i >= splitterIndex + 1) {\n              pane2.size = pane2.min;\n              sums.nextReachedMinPanes += pane2.min;\n            }\n          });\n          this.panes[panesToResize[0]].size = 100 - sums.prevPanesSize - sums.nextReachedMinPanes - this.panes[this.panesCount - 1].min - sums.nextPanesSize;\n          return null;\n        }\n      }\n      return { sums, panesToResize };\n    },\n    sumPrevPanesSize(splitterIndex) {\n      return this.panes.reduce((total, pane2, i) => total + (i < splitterIndex ? pane2.size : 0), 0);\n    },\n    sumNextPanesSize(splitterIndex) {\n      return this.panes.reduce((total, pane2, i) => total + (i > splitterIndex + 1 ? pane2.size : 0), 0);\n    },\n    findPrevExpandedPane(splitterIndex) {\n      const pane2 = [...this.panes].reverse().find((p) => p.index < splitterIndex && p.size > p.min);\n      return pane2 || {};\n    },\n    findNextExpandedPane(splitterIndex) {\n      const pane2 = this.panes.find((p) => p.index > splitterIndex + 1 && p.size > p.min);\n      return pane2 || {};\n    },\n    checkSplitpanesNodes() {\n      const children = Array.from(this.container.children);\n      children.forEach((child) => {\n        const isPane = child.classList.contains(\"splitpanes__pane\");\n        const isSplitter = child.classList.contains(\"splitpanes__splitter\");\n        if (!isPane && !isSplitter) {\n          child.parentNode.removeChild(child);\n          console.warn(\"Splitpanes: Only <pane> elements are allowed at the root of <splitpanes>. One of your DOM nodes was removed.\");\n          return;\n        }\n      });\n    },\n    addSplitter(paneIndex, nextPaneNode, isVeryFirst = false) {\n      const splitterIndex = paneIndex - 1;\n      const elm = document.createElement(\"div\");\n      elm.classList.add(\"splitpanes__splitter\");\n      if (!isVeryFirst) {\n        elm.onmousedown = (event) => this.onMouseDown(event, splitterIndex);\n        if (typeof window !== \"undefined\" && \"ontouchstart\" in window) {\n          elm.ontouchstart = (event) => this.onMouseDown(event, splitterIndex);\n        }\n        elm.onclick = (event) => this.onSplitterClick(event, splitterIndex + 1);\n      }\n      if (this.dblClickSplitter) {\n        elm.ondblclick = (event) => this.onSplitterDblClick(event, splitterIndex + 1);\n      }\n      nextPaneNode.parentNode.insertBefore(elm, nextPaneNode);\n    },\n    removeSplitter(node) {\n      node.onmousedown = void 0;\n      node.onclick = void 0;\n      node.ondblclick = void 0;\n      node.parentNode.removeChild(node);\n    },\n    redoSplitters() {\n      const children = Array.from(this.container.children);\n      children.forEach((el) => {\n        if (el.className.includes(\"splitpanes__splitter\"))\n          this.removeSplitter(el);\n      });\n      let paneIndex = 0;\n      children.forEach((el) => {\n        if (el.className.includes(\"splitpanes__pane\")) {\n          if (!paneIndex && this.firstSplitter)\n            this.addSplitter(paneIndex, el, true);\n          else if (paneIndex)\n            this.addSplitter(paneIndex, el);\n          paneIndex++;\n        }\n      });\n    },\n    requestUpdate(_a) {\n      var _b = _a, { target } = _b, args = __objRest(_b, [\"target\"]);\n      const pane2 = this.indexedPanes[target._.uid];\n      Object.entries(args).forEach(([key, value]) => pane2[key] = value);\n    },\n    onPaneAdd(pane2) {\n      let index = -1;\n      Array.from(pane2.$el.parentNode.children).some((el) => {\n        if (el.className.includes(\"splitpanes__pane\"))\n          index++;\n        return el === pane2.$el;\n      });\n      const min = parseFloat(pane2.minSize);\n      const max = parseFloat(pane2.maxSize);\n      this.panes.splice(index, 0, {\n        id: pane2._.uid,\n        index,\n        min: isNaN(min) ? 0 : min,\n        max: isNaN(max) ? 100 : max,\n        size: pane2.size === null ? null : parseFloat(pane2.size),\n        givenSize: pane2.size,\n        update: pane2.update\n      });\n      this.panes.forEach((p, i) => p.index = i);\n      if (this.ready) {\n        this.$nextTick(() => {\n          this.redoSplitters();\n          this.resetPaneSizes({ addedPane: this.panes[index] });\n          this.$emit(\"pane-add\", { index, panes: this.panes.map((pane3) => ({ min: pane3.min, max: pane3.max, size: pane3.size })) });\n        });\n      }\n    },\n    onPaneRemove(pane2) {\n      const index = this.panes.findIndex((p) => p.id === pane2._.uid);\n      const removed = this.panes.splice(index, 1)[0];\n      this.panes.forEach((p, i) => p.index = i);\n      this.$nextTick(() => {\n        this.redoSplitters();\n        this.resetPaneSizes({ removedPane: __spreadProps(__spreadValues({}, removed), { index }) });\n        this.$emit(\"pane-remove\", { removed, panes: this.panes.map((pane3) => ({ min: pane3.min, max: pane3.max, size: pane3.size })) });\n      });\n    },\n    resetPaneSizes(changedPanes = {}) {\n      if (!changedPanes.addedPane && !changedPanes.removedPane)\n        this.initialPanesSizing();\n      else if (this.panes.some((pane2) => pane2.givenSize !== null || pane2.min || pane2.max < 100))\n        this.equalizeAfterAddOrRemove(changedPanes);\n      else\n        this.equalize();\n      if (this.ready)\n        this.$emit(\"resized\", this.panes.map((pane2) => ({ min: pane2.min, max: pane2.max, size: pane2.size })));\n    },\n    equalize() {\n      const equalSpace = 100 / this.panesCount;\n      let leftToAllocate = 0;\n      let ungrowable = [];\n      let unshrinkable = [];\n      this.panes.forEach((pane2) => {\n        pane2.size = Math.max(Math.min(equalSpace, pane2.max), pane2.min);\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max)\n          ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min)\n          unshrinkable.push(pane2.id);\n      });\n      if (leftToAllocate > 0.1)\n        this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n    },\n    initialPanesSizing() {\n      100 / this.panesCount;\n      let leftToAllocate = 100;\n      let ungrowable = [];\n      let unshrinkable = [];\n      let definedSizes = 0;\n      this.panes.forEach((pane2) => {\n        leftToAllocate -= pane2.size;\n        if (pane2.size !== null)\n          definedSizes++;\n        if (pane2.size >= pane2.max)\n          ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min)\n          unshrinkable.push(pane2.id);\n      });\n      let leftToAllocate2 = 100;\n      if (leftToAllocate > 0.1) {\n        this.panes.forEach((pane2) => {\n          if (pane2.size === null) {\n            pane2.size = Math.max(Math.min(leftToAllocate / (this.panesCount - definedSizes), pane2.max), pane2.min);\n          }\n          leftToAllocate2 -= pane2.size;\n        });\n        if (leftToAllocate2 > 0.1)\n          this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n      }\n    },\n    equalizeAfterAddOrRemove({ addedPane, removedPane } = {}) {\n      let equalSpace = 100 / this.panesCount;\n      let leftToAllocate = 0;\n      let ungrowable = [];\n      let unshrinkable = [];\n      if (addedPane && addedPane.givenSize !== null) {\n        equalSpace = (100 - addedPane.givenSize) / (this.panesCount - 1);\n      }\n      this.panes.forEach((pane2) => {\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max)\n          ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min)\n          unshrinkable.push(pane2.id);\n      });\n      if (Math.abs(leftToAllocate) < 0.1)\n        return;\n      this.panes.forEach((pane2) => {\n        if (addedPane && addedPane.givenSize !== null && addedPane.id === pane2.id)\n          ;\n        else\n          pane2.size = Math.max(Math.min(equalSpace, pane2.max), pane2.min);\n        leftToAllocate -= pane2.size;\n        if (pane2.size >= pane2.max)\n          ungrowable.push(pane2.id);\n        if (pane2.size <= pane2.min)\n          unshrinkable.push(pane2.id);\n      });\n      if (leftToAllocate > 0.1)\n        this.readjustSizes(leftToAllocate, ungrowable, unshrinkable);\n    },\n    readjustSizes(leftToAllocate, ungrowable, unshrinkable) {\n      let equalSpaceToAllocate;\n      if (leftToAllocate > 0)\n        equalSpaceToAllocate = leftToAllocate / (this.panesCount - ungrowable.length);\n      else\n        equalSpaceToAllocate = leftToAllocate / (this.panesCount - unshrinkable.length);\n      this.panes.forEach((pane2, i) => {\n        if (leftToAllocate > 0 && !ungrowable.includes(pane2.id)) {\n          const newPaneSize = Math.max(Math.min(pane2.size + equalSpaceToAllocate, pane2.max), pane2.min);\n          const allocated = newPaneSize - pane2.size;\n          leftToAllocate -= allocated;\n          pane2.size = newPaneSize;\n        } else if (!unshrinkable.includes(pane2.id)) {\n          const newPaneSize = Math.max(Math.min(pane2.size + equalSpaceToAllocate, pane2.max), pane2.min);\n          const allocated = newPaneSize - pane2.size;\n          leftToAllocate -= allocated;\n          pane2.size = newPaneSize;\n        }\n        pane2.update({\n          [this.horizontal ? \"height\" : \"width\"]: `${this.indexedPanes[pane2.id].size}%`\n        });\n      });\n      if (Math.abs(leftToAllocate) > 0.1) {\n        this.$nextTick(() => {\n          if (this.ready) {\n            console.warn(\"Splitpanes: Could not resize panes correctly due to their constraints.\");\n          }\n        });\n      }\n    }\n  },\n  watch: {\n    panes: {\n      deep: true,\n      immediate: false,\n      handler() {\n        this.updatePaneComponents();\n      }\n    },\n    horizontal() {\n      this.updatePaneComponents();\n    },\n    firstSplitter() {\n      this.redoSplitters();\n    },\n    dblClickSplitter(enable) {\n      const splitters = [...this.container.querySelectorAll(\".splitpanes__splitter\")];\n      splitters.forEach((splitter, i) => {\n        splitter.ondblclick = enable ? (event) => this.onSplitterDblClick(event, i) : void 0;\n      });\n    }\n  },\n  beforeUnmount() {\n    this.ready = false;\n  },\n  mounted() {\n    this.container = this.$refs.container;\n    this.checkSplitpanesNodes();\n    this.redoSplitters();\n    this.resetPaneSizes();\n    this.$emit(\"ready\");\n    this.ready = true;\n  },\n  render() {\n    return h(\"div\", {\n      ref: \"container\",\n      class: [\n        \"splitpanes\",\n        `splitpanes--${this.horizontal ? \"horizontal\" : \"vertical\"}`,\n        {\n          \"splitpanes--dragging\": this.touch.dragging\n        }\n      ]\n    }, this.$slots.default());\n  }\n};\nvar _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\nconst _sfc_main = {\n  name: \"pane\",\n  inject: [\"requestUpdate\", \"onPaneAdd\", \"onPaneRemove\", \"onPaneClick\"],\n  props: {\n    size: { type: [Number, String], default: null },\n    minSize: { type: [Number, String], default: 0 },\n    maxSize: { type: [Number, String], default: 100 }\n  },\n  data: () => ({\n    style: {}\n  }),\n  mounted() {\n    this.onPaneAdd(this);\n  },\n  beforeUnmount() {\n    this.onPaneRemove(this);\n  },\n  methods: {\n    update(style) {\n      this.style = style;\n    }\n  },\n  computed: {\n    sizeNumber() {\n      return this.size || this.size === 0 ? parseFloat(this.size) : null;\n    },\n    minSizeNumber() {\n      return parseFloat(this.minSize);\n    },\n    maxSizeNumber() {\n      return parseFloat(this.maxSize);\n    }\n  },\n  watch: {\n    sizeNumber(size) {\n      this.requestUpdate({ target: this, size });\n    },\n    minSizeNumber(min) {\n      this.requestUpdate({ target: this, min });\n    },\n    maxSizeNumber(max) {\n      this.requestUpdate({ target: this, max });\n    }\n  }\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"splitpanes__pane\",\n    onClick: _cache[0] || (_cache[0] = ($event) => $options.onPaneClick($event, _ctx._.uid)),\n    style: normalizeStyle(_ctx.style)\n  }, [\n    renderSlot(_ctx.$slots, \"default\")\n  ], 4);\n}\nvar pane = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { pane as Pane, _sfc_main$1 as Splitpanes };\n"]},"metadata":{},"sourceType":"module"}