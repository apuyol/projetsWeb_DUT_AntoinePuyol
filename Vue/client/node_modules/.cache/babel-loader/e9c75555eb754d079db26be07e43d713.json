{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VExpandTransition } from \"../transitions/index.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\n\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nimport { inject } from 'vue';\nexport const VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n  props: { ...makeLazyProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n    const {\n      hasContent,\n      onAfterLeave\n    } = useLazy(props, expansionPanel.isSelected);\n    useRender(() => {\n      var _slots$default;\n\n      return _createVNode(VExpandTransition, {\n        \"onAfterLeave\": onAfterLeave\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": \"v-expansion-panel-text\"\n        }, [slots.default && hasContent.value && _createVNode(\"div\", {\n          \"class\": \"v-expansion-panel-text__wrapper\"\n        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]), [[_vShow, expansionPanel.isSelected.value]])]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":";uGAAA;;SACSA,yB;SACAC,6B,0BAET;;SACSC,eAAeC,e,8BAExB;;SACSC,iBAAiBC,iB;AAC1B,SAASC,MAAT,QAAuB,KAAvB;AAEA,OAAO,MAAMC,mBAAmB,GAAGH,eAAe,CAAC;AACjDI,MAAI,EAAE,qBAD2C;AAGjDC,OAAK,EAAE,EACL,GAAGP,aAAa;AADX,GAH0C;;AAOjDQ,OAAK,CAAED,KAAF,QAAoB;AAAA,QAAX;AAAEE;AAAF,QAAWC;AACvB,UAAMC,cAAc,GAAGP,MAAM,CAACL,qBAAD,CAA7B;AAEA,QAAI,CAACY,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AAErB,UAAM;AAAEC,gBAAF;AAAcC;AAAd,QAA+Bb,OAAO,CAACM,KAAD,EAAQI,cAAc,CAACI,UAAvB,CAA5C;AAEAZ,aAAS,CAAC;AAAA;;AAAA;AAAA,wBAC0BW;AAD1B;AAAAE;AAAA,mBAGE;AAHF,YAMFP,KAAK,CAACO,OAANP,IAAiBI,UAAU,CAACI,KAA5BR;AAAA,mBACW;AADX,8BAEIA,KAAK,CAACO,OAFV,qBAEIE,0BAFJ,EANE,cAIKP,cAAc,CAACI,UAAfJ,CAA0BM,KAJ/B;AAAA;AAAD,MAATd;AAeA,WAAO,EAAP;AACD;;AA9BgD,CAAD,CAA3C","names":["VExpandTransition","VExpansionPanelSymbol","makeLazyProps","useLazy","defineComponent","useRender","inject","VExpansionPanelText","name","props","setup","slots","_ref","expansionPanel","Error","hasContent","onAfterLeave","isSelected","default","value","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { inject } from 'vue'\n\nexport const VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          ) }\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"]},"metadata":{},"sourceType":"module"}