{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VBtnToggle.css\"; // Components\n\nimport { VBtnGroup } from \"../VBtnGroup/index.mjs\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\"; // Utility\n\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport var VBtnToggleSymbol = Symbol[\"for\"]('vuetify:v-btn-toggle');\nexport var VBtnToggle = genericComponent()({\n  name: 'VBtnToggle',\n  props: makeGroupProps({\n    selectedClass: 'v-btn--selected'\n  }),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useGroup = useGroup(props, VBtnToggleSymbol),\n        isSelected = _useGroup.isSelected,\n        next = _useGroup.next,\n        prev = _useGroup.prev,\n        select = _useGroup.select,\n        selected = _useGroup.selected;\n\n    useRender(function () {\n      var _slots$default;\n\n      return _createVNode(VBtnGroup, {\n        \"class\": \"v-btn-toggle\"\n      }, {\n        \"default\": function _default() {\n          return [(_slots$default = slots[\"default\"]) == null ? void 0 : _slots$default.call(slots, {\n            isSelected: isSelected,\n            next: next,\n            prev: prev,\n            select: select,\n            selected: selected\n          })];\n        }\n      });\n    });\n    return {\n      next: next,\n      prev: prev,\n      select: select\n    };\n  }\n});","map":{"version":3,"mappings":";;;mDAAA;;AACA,0B,CAEA;;SACSA,iB,0BAET;;SACSC,gBAAgBC,gB,+BAEzB;;SACSC,kBAAkBC,iB,wBAE3B;;AAQA,OAAO,IAAMC,gBAA4C,GAAGC,MAAM,OAANA,CAAW,sBAAXA,CAArD;AAEP,OAAO,IAAMC,UAAU,GAAGJ,gBAAgB,GAIrC;AACHK,MAAI,EAAE,YADH;AAGHC,OAAK,EAAER,cAAc,CAAC;AAAES,iBAAa,EAAE;AAAjB,GAAD,CAHlB;AAKHC,OAAK,EAAE;AACL,yBAAsBC,+BAAD;AAAA,aAAgB,IAAhB;AAAA;AADhB,GALJ;AASHC,OATG,iBASIJ,KATJ,EASEK,IATF,EASsB;AAAA,QAATC,KAAS,QAATA,KAAS;;AACvB,oBAAqDb,QAAQ,CAACO,KAAD,EAAQJ,gBAAR,CAA7D;AAAA,QAAQW,UAAR,aAAQA,UAAR;AAAA,QAAoBC,IAApB,aAAoBA,IAApB;AAAA,QAA0BC,IAA1B,aAA0BA,IAA1B;AAAA,QAAgCC,MAAhC,aAAgCA,MAAhC;AAAA,QAAwCC,QAAxC,aAAwCA,QAAxC;;AAEAhB,aAAS,CAAC;AAAA;;AAAA;AAAA,iBACS;AADT;AAAA;AAAA,oCAEJW,KAAK,WAFD,qBAEJM,2BAAgB;AAChBL,sBADgB,EAChBA,UADgB;AAEhBC,gBAFgB,EAEhBA,IAFgB;AAGhBC,gBAHgB,EAGhBA,IAHgB;AAIhBC,kBAJgB,EAIhBA,MAJgB;AAKhBC;AALgB,WAAhB,CAFI;AAAA;AAAA;AAAD,MAAThB;AAYA,WAAO;AACLa,UADK,EACLA,IADK;AAELC,UAFK,EAELA,IAFK;AAGLC;AAHK,KAAP;AAKD;AA7BE,CAJqC,CAAnC","names":["VBtnGroup","makeGroupProps","useGroup","genericComponent","useRender","VBtnToggleSymbol","Symbol","VBtnToggle","name","props","selectedClass","emits","value","setup","_ref","slots","isSelected","next","prev","select","selected","_slots$default"],"sources":["../../../src/components/VBtnToggle/VBtnToggle.tsx"],"sourcesContent":["// Styles\nimport './VBtnToggle.sass'\n\n// Components\nimport { VBtnGroup } from '@/components/VBtnGroup'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\n\n// Utility\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { GroupProvide } from '@/composables/group'\nimport type { InjectionKey } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport type BtnToggleSlotProps = 'isSelected' | 'select' | 'selected' | 'next' | 'prev'\nexport interface DefaultBtnToggleSlot extends Pick<GroupProvide, BtnToggleSlotProps> {}\n\nexport const VBtnToggleSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-btn-toggle')\n\nexport const VBtnToggle = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    default: [DefaultBtnToggleSlot]\n  }>\n}>()({\n  name: 'VBtnToggle',\n\n  props: makeGroupProps({ selectedClass: 'v-btn--selected' }),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isSelected, next, prev, select, selected } = useGroup(props, VBtnToggleSymbol)\n\n    useRender(() => (\n      <VBtnGroup class=\"v-btn-toggle\">\n        { slots.default?.({\n          isSelected,\n          next,\n          prev,\n          select,\n          selected,\n        } as DefaultBtnToggleSlot) }\n      </VBtnGroup>\n    ))\n\n    return {\n      next,\n      prev,\n      select,\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}