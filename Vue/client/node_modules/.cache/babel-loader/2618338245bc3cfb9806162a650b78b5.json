{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VExpansionPanel.css\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport var VExpansionPanelSymbol = Symbol[\"for\"]('vuetify:v-expansion-panel');\nvar allowedVariants = ['default', 'accordion', 'inset', 'popout'];\nexport var VExpansionPanels = defineComponent({\n  name: 'VExpansionPanels',\n  props: _objectSpread(_objectSpread(_objectSpread({\n    color: String,\n    variant: {\n      type: String,\n      \"default\": 'default',\n      validator: function validator(v) {\n        return allowedVariants.includes(v);\n      }\n    }\n  }, makeGroupProps()), makeTagProps()), makeThemeProps()),\n  emits: {\n    'update:modelValue': function updateModelValue(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    useGroup(props, VExpansionPanelSymbol);\n\n    var _provideTheme = provideTheme(props),\n        themeClasses = _provideTheme.themeClasses;\n\n    var variantClass = computed(function () {\n      return props.variant && \"v-expansion-panels--variant-\".concat(props.variant);\n    });\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color')\n      }\n    });\n    useRender(function () {\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panels', themeClasses.value, variantClass.value]\n      }, slots);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;;;;0FAAA;;AACA,+B,CAEA;;SACSA,gBAAgBC,gB;SAChBC,oB;SACAC,gBAAgBC,oB;SAChBC,uB,kCAET;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,iBAAiBC,iB,wBAE1B;;AAIA,OAAO,IAAMC,qBAAqD,GAAGC,MAAM,OAANA,CAAW,2BAAXA,CAA9D;AAEP,IAAMC,eAAe,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAkC,QAAlC,CAAxB;AAIA,OAAO,IAAMC,gBAAgB,GAAGL,eAAe,CAAC;AAC9CM,MAAI,EAAE,kBADwC;AAG9CC,OAAK;AACHC,SAAK,EAAEC,MADJ;AAEHC,WAAO,EAAE;AACPC,UAAI,EAAEF,MADC;AAEPG,iBAAS,SAFF;AAGPC,eAAS,EAAGC,oBAAD;AAAA,eAAYV,eAAe,CAACW,QAAhBX,CAAyBU,CAAzBV,CAAZ;AAAA;AAHJ;AAFN,KAQAZ,cAAc,EARd,GASAE,YAAY,EATZ,GAUAC,cAAc,EAVd,CAHyC;AAgB9CqB,OAAK,EAAE;AACL,yBAAsBC,6BAAD;AAAA,aAAkB,IAAlB;AAAA;AADhB,GAhBuC;AAoB9CC,OApB8C,iBAoBvCX,KApBuC,EAoBzCY,IApByC,EAoBrB;AAAA,QAATC,KAAS,QAATA,KAAS;AACvB3B,YAAQ,CAACc,KAAD,EAAQL,qBAAR,CAART;;AAEA,wBAAyBG,YAAY,CAACW,KAAD,CAArC;AAAA,QAAQc,YAAR,iBAAQA,YAAR;;AAEA,QAAMC,YAAY,GAAGxB,QAAQ,CAAC;AAAA,aAAMS,KAAK,CAACG,OAANH,0CAAgDA,KAAK,CAACG,OAAtDH,CAAN;AAAA,KAAD,CAA7B;AAEAV,mBAAe,CAAC;AACd0B,qBAAe,EAAE;AACff,aAAK,EAAET,KAAK,CAACQ,KAAD,EAAQ,OAAR;AADG;AADH,KAAD,CAAfV;AAMAI,aAAS,CAAC;AAAA;AAAA,iBAEC,CACL,oBADK,EAELoB,YAAY,CAACG,KAFR,EAGLF,YAAY,CAACE,KAHR;AAFD,SAOIJ,KAPJ;AAAA,KAAD,CAATnB;AAWA,WAAO,EAAP;AACD;AA7C6C,CAAD,CAAxC","names":["makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","provideDefaults","computed","toRef","defineComponent","useRender","VExpansionPanelSymbol","Symbol","allowedVariants","VExpansionPanels","name","props","color","String","variant","type","default","validator","v","includes","emits","val","setup","_ref","slots","themeClasses","variantClass","VExpansionPanel","value"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanels.tsx"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport const VExpansionPanels = defineComponent({\n  name: 'VExpansionPanels',\n\n  props: {\n    color: String,\n    variant: {\n      type: String as PropType<Variant>,\n      default: 'default',\n      validator: (v: any) => allowedVariants.includes(v),\n    },\n\n    ...makeGroupProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          themeClasses.value,\n          variantClass.value,\n        ]}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n"]},"metadata":{},"sourceType":"module"}