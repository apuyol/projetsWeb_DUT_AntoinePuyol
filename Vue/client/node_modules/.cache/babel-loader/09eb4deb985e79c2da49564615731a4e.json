{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"D:/Stage/App/xr-place-application/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"selected\", \"id\"],\n    _excluded2 = [\"id\", \"selected\", \"children\"],\n    _excluded3 = [\"id\", \"selected\", \"children\"];\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.every.js\";\n\n/* eslint-disable sonarjs/no-identical-functions */\nexport var independentSelectStrategy = function independentSelectStrategy(mandatory) {\n  var strategy = {\n    select: function select(_ref) {\n      var id = _ref.id,\n          value = _ref.value,\n          selected = _ref.selected; // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value) {\n        var on = Array.from(selected.entries()).reduce(function (arr, _ref2) {\n          var _ref8 = _slicedToArray(_ref2, 2),\n              key = _ref8[0],\n              value = _ref8[1];\n\n          return value === 'on' ? [].concat(_toConsumableArray(arr), [key]) : arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    \"in\": function _in(v, children, parents) {\n      var map = new Map();\n\n      var _iterator = _createForOfIteratorHelper(v || []),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var id = _step.value;\n          map = strategy.select({\n            id: id,\n            value: true,\n            selected: new Map(map),\n            children: children,\n            parents: parents\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return map;\n    },\n    out: function out(v) {\n      var arr = [];\n\n      var _iterator2 = _createForOfIteratorHelper(v.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              key = _step2$value[0],\n              value = _step2$value[1];\n\n          if (value === 'on') arr.push(key);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport var independentSingleSelectStrategy = function independentSingleSelectStrategy(mandatory) {\n  var parentStrategy = independentSelectStrategy(mandatory);\n  var strategy = {\n    select: function select(_ref3) {\n      var selected = _ref3.selected,\n          id = _ref3.id,\n          rest = _objectWithoutProperties(_ref3, _excluded);\n\n      var singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select(_objectSpread(_objectSpread({}, rest), {}, {\n        id: id,\n        selected: singleSelected\n      }));\n    },\n    \"in\": function _in(v, children, parents) {\n      var map = new Map();\n\n      if (v != null && v.length) {\n        map = parentStrategy[\"in\"](v.slice(0, 1), children, parents);\n      }\n\n      return map;\n    },\n    out: function out(v, children, parents) {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport var leafSelectStrategy = function leafSelectStrategy(mandatory) {\n  var parentStrategy = independentSelectStrategy(mandatory);\n  var strategy = {\n    select: function select(_ref4) {\n      var id = _ref4.id,\n          selected = _ref4.selected,\n          children = _ref4.children,\n          rest = _objectWithoutProperties(_ref4, _excluded2);\n\n      if (children.has(id)) return selected;\n      return parentStrategy.select(_objectSpread({\n        id: id,\n        selected: selected,\n        children: children\n      }, rest));\n    },\n    \"in\": parentStrategy[\"in\"],\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport var leafSingleSelectStrategy = function leafSingleSelectStrategy(mandatory) {\n  var parentStrategy = independentSingleSelectStrategy(mandatory);\n  var strategy = {\n    select: function select(_ref5) {\n      var id = _ref5.id,\n          selected = _ref5.selected,\n          children = _ref5.children,\n          rest = _objectWithoutProperties(_ref5, _excluded3);\n\n      if (children.has(id)) return selected;\n      return parentStrategy.select(_objectSpread({\n        id: id,\n        selected: selected,\n        children: children\n      }, rest));\n    },\n    \"in\": parentStrategy[\"in\"],\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport var classicSelectStrategy = function classicSelectStrategy(mandatory) {\n  var strategy = {\n    select: function select(_ref6) {\n      var id = _ref6.id,\n          value = _ref6.value,\n          selected = _ref6.selected,\n          children = _ref6.children,\n          parents = _ref6.parents;\n      var original = new Map(selected);\n      var items = [id];\n\n      while (items.length) {\n        var item = items.shift();\n        selected.set(item, value ? 'on' : 'off');\n\n        if (children.has(item)) {\n          items.push.apply(items, _toConsumableArray(children.get(item)));\n        }\n      }\n\n      var parent = parents.get(id);\n\n      while (parent) {\n        var childrenIds = children.get(parent);\n        var everySelected = childrenIds.every(function (cid) {\n          return selected.get(cid) === 'on';\n        });\n        var noneSelected = childrenIds.every(function (cid) {\n          return !selected.has(cid) || selected.get(cid) === 'off';\n        });\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = parents.get(parent);\n      } // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n\n\n      if (mandatory && !value) {\n        var on = Array.from(selected.entries()).reduce(function (arr, _ref7) {\n          var _ref9 = _slicedToArray(_ref7, 2),\n              key = _ref9[0],\n              value = _ref9[1];\n\n          return value === 'on' ? [].concat(_toConsumableArray(arr), [key]) : arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n\n      return selected;\n    },\n    \"in\": function _in(v, children, parents) {\n      var map = new Map();\n\n      var _iterator3 = _createForOfIteratorHelper(v || []),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var id = _step3.value;\n          map = strategy.select({\n            id: id,\n            value: true,\n            selected: new Map(map),\n            children: children,\n            parents: parents\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return map;\n    },\n    out: function out(v, children) {\n      var arr = [];\n\n      var _iterator4 = _createForOfIteratorHelper(v.entries()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              key = _step4$value[0],\n              value = _step4$value[1];\n\n          if (value === 'on' && !children.has(key)) arr.push(key);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["independentSelectStrategy","mandatory","strategy","select","id","value","selected","on","Array","from","entries","reduce","arr","key","length","set","in","v","children","parents","map","Map","out","push","independentSingleSelectStrategy","parentStrategy","rest","singleSelected","has","get","slice","leafSelectStrategy","leafSingleSelectStrategy","classicSelectStrategy","original","items","item","shift","parent","childrenIds","everySelected","every","cid","noneSelected"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\nexport type SelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: string[] | undefined,\n  children: Map<string, string[]>,\n  parents: Map<string, string>,\n) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<string, 'on' | 'off' | 'indeterminate'>,\n  children: Map<string, string[]>,\n  parents: Map<string, string>,\n) => any[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected }) => {\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as string[])\n        if (on.length === 1 && on[0] === id) return selected\n      }\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: v => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ selected, id, ...rest }) => {\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)!]]) : new Map()\n      return parentStrategy.select({ ...rest, id, selected: singleSelected })\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      if (v?.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents)\n      }\n\n      return map\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children, parents }) => {\n      const original = new Map(selected)\n\n      const items = [id]\n\n      while (items.length) {\n        const item = items.shift()!\n\n        selected.set(item, value ? 'on' : 'off')\n\n        if (children.has(item)) {\n          items.push(...children.get(item)!)\n        }\n      }\n\n      let parent = parents.get(id)\n\n      while (parent) {\n        const childrenIds = children.get(parent)!\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n        parent = parents.get(parent)\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, [key, value]) => value === 'on' ? [...arr, key] : arr, [] as string[])\n        if (on.length === 0) return original\n      }\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: (v, children) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}