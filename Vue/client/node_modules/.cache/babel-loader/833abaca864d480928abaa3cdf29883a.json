{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VExpandTransition } from \"../transitions/index.mjs\";\nimport { VExpansionPanelSymbol } from \"./VExpansionPanels.mjs\"; // Composables\n\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.mjs\"; // Utilities\n\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nimport { inject } from 'vue';\nexport var VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n  props: _objectSpread({}, makeLazyProps()),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n\n    var _useLazy = useLazy(props, expansionPanel.isSelected),\n        hasContent = _useLazy.hasContent,\n        onAfterLeave = _useLazy.onAfterLeave;\n\n    useRender(function () {\n      var _slots$default;\n\n      return _createVNode(VExpandTransition, {\n        \"onAfterLeave\": onAfterLeave\n      }, {\n        \"default\": function _default() {\n          return [_withDirectives(_createVNode(\"div\", {\n            \"class\": \"v-expansion-panel-text\"\n          }, [slots[\"default\"] && hasContent.value && _createVNode(\"div\", {\n            \"class\": \"v-expansion-panel-text__wrapper\"\n          }, [(_slots$default = slots[\"default\"]) == null ? void 0 : _slots$default.call(slots)])]), [[_vShow, expansionPanel.isSelected.value]])];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;;uGAAA;;SACSA,yB;SACAC,6B,0BAET;;SACSC,eAAeC,e,8BAExB;;SACSC,iBAAiBC,iB;AAC1B,SAASC,MAAT,QAAuB,KAAvB;AAEA,OAAO,IAAMC,mBAAmB,GAAGH,eAAe,CAAC;AACjDI,MAAI,EAAE,qBAD2C;AAGjDC,OAAK,oBACAP,aAAa,EADb,CAH4C;AAOjDQ,OAPiD,iBAO1CD,KAP0C,EAO5CE,IAP4C,EAOxB;AAAA,QAATC,KAAS,QAATA,KAAS;AACvB,QAAMC,cAAc,GAAGP,MAAM,CAACL,qBAAD,CAA7B;AAEA,QAAI,CAACY,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;;AAErB,mBAAqCX,OAAO,CAACM,KAAD,EAAQI,cAAc,CAACE,UAAvB,CAA5C;AAAA,QAAQC,UAAR,YAAQA,UAAR;AAAA,QAAoBC,YAApB,YAAoBA,YAApB;;AAEAZ,aAAS,CAAC;AAAA;;AAAA;AAAA,wBAC0BY;AAD1B;AAAA;AAAA;AAAA,qBAGE;AAHF,cAMFL,KAAK,WAALA,IAAiBI,UAAU,CAACE,KAA5BN;AAAA,qBACW;AADX,gCAEIA,KAAK,WAFT,qBAEIO,0BAFJ,EANE,cAIKN,cAAc,CAACE,UAAfF,CAA0BK,KAJ/B;AAAA;AAAA;AAAD,MAATb;AAeA,WAAO,EAAP;AACD;AA9BgD,CAAD,CAA3C","names":["VExpandTransition","VExpansionPanelSymbol","makeLazyProps","useLazy","defineComponent","useRender","inject","VExpansionPanelText","name","props","setup","_ref","slots","expansionPanel","Error","isSelected","hasContent","onAfterLeave","value","_slots$default"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { inject } from 'vue'\n\nexport const VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          ) }\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"]},"metadata":{},"sourceType":"module"}