{"ast":null,"code":"import _objectSpread from \"D:/Stage/App/xr-place-application/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VMessages.css\"; // Components\n\nimport { VSlideYTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\n\nimport { defineComponent, wrapInArray } from \"../../util/index.mjs\";\nimport { computed } from 'vue';\nexport var VMessages = defineComponent({\n  name: 'VMessages',\n  props: _objectSpread({\n    active: Boolean,\n    color: String,\n    messages: {\n      type: [Array, String],\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  }, makeTransitionProps({\n    transition: {\n      component: VSlideYTransition,\n      leaveAbsolute: true,\n      group: true\n    }\n  })),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var messages = computed(function () {\n      return wrapInArray(props.messages);\n    });\n\n    var _useTextColor = useTextColor(computed(function () {\n      return props.color;\n    })),\n        textColorClasses = _useTextColor.textColorClasses,\n        textColorStyles = _useTextColor.textColorStyles;\n\n    return function () {\n      return _createVNode(MaybeTransition, {\n        \"transition\": props.transition,\n        \"tag\": \"div\",\n        \"class\": ['v-messages', textColorClasses.value],\n        \"style\": textColorStyles.value\n      }, {\n        \"default\": function _default() {\n          return [props.active && messages.value.map(function (message, i) {\n            return _createVNode(\"div\", {\n              \"class\": \"v-messages__message\",\n              \"key\": \"\".concat(i, \"-\").concat(messages.value)\n            }, [slots.message ? slots.message({\n              message: message\n            }) : message]);\n          })];\n        }\n      });\n    };\n  }\n});","map":{"version":3,"mappings":";;;mDAAA;;AACA,yB,CAEA;;SACSA,yB,4BAET;;SACSC,qBAAqBC,uB;SACrBC,oB,+BAET;;SACSC,iBAAiBC,mB;AAC1B,SAASC,QAAT,QAAyB,KAAzB;AAGA,OAAO,IAAMC,SAAS,GAAGH,eAAe,CAAC;AACvCI,MAAI,EAAE,WADiC;AAGvCC,OAAK;AACHC,UAAM,EAAEC,OADL;AAEHC,SAAK,EAAEC,MAFJ;AAGHC,YAAQ,EAAE;AACRC,UAAI,EAAE,CAACC,KAAD,EAAQH,MAAR,CADE;AAERI,iBAAS;AAAA,eAAO,EAAP;AAAA;AAFD;AAHP,KAQAhB,mBAAmB,CAAC;AACrBiB,cAAU,EAAE;AACVC,eAAS,EAAEnB,iBADD;AAEVoB,mBAAa,EAAE,IAFL;AAGVC,WAAK,EAAE;AAHG;AADS,GAAD,CARnB,CAHkC;AAoBvCC,OApBuC,iBAoBhCb,KApBgC,EAoBlCc,IApBkC,EAoBd;AAAA,QAATC,KAAS,QAATA,KAAS;AACvB,QAAMV,QAAQ,GAAGR,QAAQ,CAAC;AAAA,aAAMD,WAAW,CAACI,KAAK,CAACK,QAAP,CAAjB;AAAA,KAAD,CAAzB;;AACA,wBAA8CX,YAAY,CAACG,QAAQ,CAAC;AAAA,aAAMG,KAAK,CAACG,KAAZ;AAAA,KAAD,CAAT,CAA1D;AAAA,QAAQa,gBAAR,iBAAQA,gBAAR;AAAA,QAA0BC,eAA1B,iBAA0BA,eAA1B;;AAEA,WAAO;AAAA;AAAA,sBAEUjB,KAAK,CAACS,UAFhB;AAAA,eAGC,KAHD;AAAA,iBAII,CACL,YADK,EAELO,gBAAgB,CAACE,KAFZ,CAJJ;AAAA,iBAQKD,eAAe,CAACC;AARrB;AAAA;AAAA,kBAUDlB,KAAK,CAACC,MAAND,IACAK,QAAQ,CAACa,KAATb,CAAec,GAAfd,CAAmB,UAACe,OAAD,EAAUC,CAAV;AAAA;AAAA,uBAET,qBAFS;AAAA,+BAGNA,CAHM,cAGDhB,QAAQ,CAACa,KAHR;AAAA,gBAKbH,KAAK,CAACK,OAANL,GAAgBA,KAAK,CAACK,OAANL,CAAc;AAAEK;AAAF,aAAdL,CAAhBA,GAA6CK,OALhC;AAAA,WAAnBf,CAXC;AAAA;AAAA;AAAA,KAAP;AAsBD;AA9CsC,CAAD,CAAjC","names":["VSlideYTransition","makeTransitionProps","MaybeTransition","useTextColor","defineComponent","wrapInArray","computed","VMessages","name","props","active","Boolean","color","String","messages","type","Array","default","transition","component","leaveAbsolute","group","setup","_ref","slots","textColorClasses","textColorStyles","value","map","message","i"],"sources":["../../../src/components/VMessages/VMessages.tsx"],"sourcesContent":["// Styles\nimport './VMessages.sass'\n\n// Components\nimport { VSlideYTransition } from '@/components/transitions'\n\n// Composables\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { defineComponent, wrapInArray } from '@/util'\nimport { computed } from 'vue'\nimport type { PropType } from 'vue'\n\nexport const VMessages = defineComponent({\n  name: 'VMessages',\n\n  props: {\n    active: Boolean,\n    color: String,\n    messages: {\n      type: [Array, String] as PropType<string | string[]>,\n      default: () => ([]),\n    },\n\n    ...makeTransitionProps({\n      transition: {\n        component: VSlideYTransition,\n        leaveAbsolute: true,\n        group: true,\n      },\n    }),\n  },\n\n  setup (props, { slots }) {\n    const messages = computed(() => wrapInArray(props.messages))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => props.color))\n\n    return () => (\n      <MaybeTransition\n        transition={ props.transition }\n        tag=\"div\"\n        class={[\n          'v-messages',\n          textColorClasses.value,\n        ]}\n        style={ textColorStyles.value }\n      >\n        { props.active && (\n          messages.value.map((message, i) => (\n            <div\n              class=\"v-messages__message\"\n              key={ `${i}-${messages.value}` }\n            >\n              { slots.message ? slots.message({ message }) : message }\n            </div>\n          ))\n        ) }\n      </MaybeTransition>\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}