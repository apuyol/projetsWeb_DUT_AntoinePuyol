"use strict";var P=Object.defineProperty,M=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,z=Object.prototype.propertyIsEnumerable;var m=(e,i,t)=>i in e?P(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t,f=(e,i)=>{for(var t in i||(i={}))p.call(i,t)&&m(e,t,i[t]);if(d)for(var t of d(i))z.call(i,t)&&m(e,t,i[t]);return e},S=(e,i)=>M(e,g(i));var v=(e,i)=>{var t={};for(var s in e)p.call(e,s)&&i.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&d)for(var s of d(e))i.indexOf(s)<0&&z.call(e,s)&&(t[s]=e[s]);return t};Object.defineProperty(exports,"__esModule",{value:!0});exports[Symbol.toStringTag]="Module";var l=require("vue");const C={name:"splitpanes",emits:["ready","resize","resized","pane-click","pane-maximize","pane-add","pane-remove","splitter-click"],props:{horizontal:{type:Boolean},pushOtherPanes:{type:Boolean,default:!0},dblClickSplitter:{type:Boolean,default:!0},rtl:{type:Boolean,default:!1},firstSplitter:{type:Boolean}},provide(){return{requestUpdate:this.requestUpdate,onPaneAdd:this.onPaneAdd,onPaneRemove:this.onPaneRemove,onPaneClick:this.onPaneClick}},data:()=>({container:null,ready:!1,panes:[],touch:{mouseDown:!1,dragging:!1,activeSplitter:null},splitterTaps:{splitter:null,timeoutId:null}}),computed:{panesCount(){return this.panes.length},indexedPanes(){return this.panes.reduce((e,i)=>(e[i.id]=i)&&e,{})}},methods:{updatePaneComponents(){this.panes.forEach(e=>{e.update&&e.update({[this.horizontal?"height":"width"]:`${this.indexedPanes[e.id].size}%`})})},bindEvents(){document.addEventListener("mousemove",this.onMouseMove,{passive:!1}),document.addEventListener("mouseup",this.onMouseUp),"ontouchstart"in window&&(document.addEventListener("touchmove",this.onMouseMove,{passive:!1}),document.addEventListener("touchend",this.onMouseUp))},unbindEvents(){document.removeEventListener("mousemove",this.onMouseMove,{passive:!1}),document.removeEventListener("mouseup",this.onMouseUp),"ontouchstart"in window&&(document.removeEventListener("touchmove",this.onMouseMove,{passive:!1}),document.removeEventListener("touchend",this.onMouseUp))},onMouseDown(e,i){this.bindEvents(),this.touch.mouseDown=!0,this.touch.activeSplitter=i},onMouseMove(e){this.touch.mouseDown&&(e.preventDefault(),this.touch.dragging=!0,this.calculatePanesSize(this.getCurrentMouseDrag(e)),this.$emit("resize",this.panes.map(i=>({min:i.min,max:i.max,size:i.size}))))},onMouseUp(){this.touch.dragging&&this.$emit("resized",this.panes.map(e=>({min:e.min,max:e.max,size:e.size}))),this.touch.mouseDown=!1,setTimeout(()=>{this.touch.dragging=!1,this.unbindEvents()},100)},onSplitterClick(e,i){"ontouchstart"in window&&(e.preventDefault(),this.dblClickSplitter&&(this.splitterTaps.splitter===i?(clearTimeout(this.splitterTaps.timeoutId),this.splitterTaps.timeoutId=null,this.onSplitterDblClick(e,i),this.splitterTaps.splitter=null):(this.splitterTaps.splitter=i,this.splitterTaps.timeoutId=setTimeout(()=>{this.splitterTaps.splitter=null},500)))),this.touch.dragging||this.$emit("splitter-click",this.panes[i])},onSplitterDblClick(e,i){let t=0;this.panes=this.panes.map((s,n)=>(s.size=n===i?s.max:s.min,n!==i&&(t+=s.min),s)),this.panes[i].size-=t,this.$emit("pane-maximize",this.panes[i])},onPaneClick(e,i){this.$emit("pane-click",this.indexedPanes[i])},getCurrentMouseDrag(e){const i=this.container.getBoundingClientRect(),{clientX:t,clientY:s}="ontouchstart"in window&&e.touches?e.touches[0]:e;return{x:t-i.left,y:s-i.top}},getCurrentDragPercentage(e){e=e[this.horizontal?"y":"x"];const i=this.container[this.horizontal?"clientHeight":"clientWidth"];return this.rtl&&!this.horizontal&&(e=i-e),e*100/i},calculatePanesSize(e){const i=this.touch.activeSplitter;let t={prevPanesSize:this.sumPrevPanesSize(i),nextPanesSize:this.sumNextPanesSize(i),prevReachedMinPanes:0,nextReachedMinPanes:0};const s=0+(this.pushOtherPanes?0:t.prevPanesSize),n=100-(this.pushOtherPanes?0:t.nextPanesSize),a=Math.max(Math.min(this.getCurrentDragPercentage(e),n),s);let r=[i,i+1],o=this.panes[r[0]]||null,h=this.panes[r[1]]||null;const u=o.max<100&&a>=o.max+t.prevPanesSize,x=h.max<100&&a<=100-(h.max+this.sumNextPanesSize(i+1));if(u||x){u?(o.size=o.max,h.size=Math.max(100-o.max-t.prevPanesSize-t.nextPanesSize,0)):(o.size=Math.max(100-h.max-t.prevPanesSize-this.sumNextPanesSize(i+1),0),h.size=h.max);return}if(this.pushOtherPanes){const c=this.doPushOtherPanes(t,a);if(!c)return;({sums:t,panesToResize:r}=c),o=this.panes[r[0]]||null,h=this.panes[r[1]]||null}o!==null&&(o.size=Math.min(Math.max(a-t.prevPanesSize-t.prevReachedMinPanes,o.min),o.max)),h!==null&&(h.size=Math.min(Math.max(100-a-t.nextPanesSize-t.nextReachedMinPanes,h.min),h.max))},doPushOtherPanes(e,i){const t=this.touch.activeSplitter,s=[t,t+1];return i<e.prevPanesSize+this.panes[s[0]].min&&(s[0]=this.findPrevExpandedPane(t).index,e.prevReachedMinPanes=0,s[0]<t&&this.panes.forEach((n,a)=>{a>s[0]&&a<=t&&(n.size=n.min,e.prevReachedMinPanes+=n.min)}),e.prevPanesSize=this.sumPrevPanesSize(s[0]),s[0]===void 0)?(e.prevReachedMinPanes=0,this.panes[0].size=this.panes[0].min,this.panes.forEach((n,a)=>{a>0&&a<=t&&(n.size=n.min,e.prevReachedMinPanes+=n.min)}),this.panes[s[1]].size=100-e.prevReachedMinPanes-this.panes[0].min-e.prevPanesSize-e.nextPanesSize,null):i>100-e.nextPanesSize-this.panes[s[1]].min&&(s[1]=this.findNextExpandedPane(t).index,e.nextReachedMinPanes=0,s[1]>t+1&&this.panes.forEach((n,a)=>{a>t&&a<s[1]&&(n.size=n.min,e.nextReachedMinPanes+=n.min)}),e.nextPanesSize=this.sumNextPanesSize(s[1]-1),s[1]===void 0)?(e.nextReachedMinPanes=0,this.panes[this.panesCount-1].size=this.panes[this.panesCount-1].min,this.panes.forEach((n,a)=>{a<this.panesCount-1&&a>=t+1&&(n.size=n.min,e.nextReachedMinPanes+=n.min)}),this.panes[s[0]].size=100-e.prevPanesSize-e.nextReachedMinPanes-this.panes[this.panesCount-1].min-e.nextPanesSize,null):{sums:e,panesToResize:s}},sumPrevPanesSize(e){return this.panes.reduce((i,t,s)=>i+(s<e?t.size:0),0)},sumNextPanesSize(e){return this.panes.reduce((i,t,s)=>i+(s>e+1?t.size:0),0)},findPrevExpandedPane(e){return[...this.panes].reverse().find(t=>t.index<e&&t.size>t.min)||{}},findNextExpandedPane(e){return this.panes.find(t=>t.index>e+1&&t.size>t.min)||{}},checkSplitpanesNodes(){Array.from(this.container.children).forEach(i=>{const t=i.classList.contains("splitpanes__pane"),s=i.classList.contains("splitpanes__splitter");if(!t&&!s){i.parentNode.removeChild(i),console.warn("Splitpanes: Only <pane> elements are allowed at the root of <splitpanes>. One of your DOM nodes was removed.");return}})},addSplitter(e,i,t=!1){const s=e-1,n=document.createElement("div");n.classList.add("splitpanes__splitter"),t||(n.onmousedown=a=>this.onMouseDown(a,s),typeof window!="undefined"&&"ontouchstart"in window&&(n.ontouchstart=a=>this.onMouseDown(a,s)),n.onclick=a=>this.onSplitterClick(a,s+1)),this.dblClickSplitter&&(n.ondblclick=a=>this.onSplitterDblClick(a,s+1)),i.parentNode.insertBefore(n,i)},removeSplitter(e){e.onmousedown=void 0,e.onclick=void 0,e.ondblclick=void 0,e.parentNode.removeChild(e)},redoSplitters(){const e=Array.from(this.container.children);e.forEach(t=>{t.className.includes("splitpanes__splitter")&&this.removeSplitter(t)});let i=0;e.forEach(t=>{t.className.includes("splitpanes__pane")&&(!i&&this.firstSplitter?this.addSplitter(i,t,!0):i&&this.addSplitter(i,t),i++)})},requestUpdate(t){var s=t,{target:e}=s,i=v(s,["target"]);const n=this.indexedPanes[e._.uid];Object.entries(i).forEach(([a,r])=>n[a]=r)},onPaneAdd(e){let i=-1;Array.from(e.$el.parentNode.children).some(n=>(n.className.includes("splitpanes__pane")&&i++,n===e.$el));const t=parseFloat(e.minSize),s=parseFloat(e.maxSize);this.panes.splice(i,0,{id:e._.uid,index:i,min:isNaN(t)?0:t,max:isNaN(s)?100:s,size:e.size===null?null:parseFloat(e.size),givenSize:e.size,update:e.update}),this.panes.forEach((n,a)=>n.index=a),this.ready&&this.$nextTick(()=>{this.redoSplitters(),this.resetPaneSizes({addedPane:this.panes[i]}),this.$emit("pane-add",{index:i,panes:this.panes.map(n=>({min:n.min,max:n.max,size:n.size}))})})},onPaneRemove(e){const i=this.panes.findIndex(s=>s.id===e._.uid),t=this.panes.splice(i,1)[0];this.panes.forEach((s,n)=>s.index=n),this.$nextTick(()=>{this.redoSplitters(),this.resetPaneSizes({removedPane:S(f({},t),{index:i})}),this.$emit("pane-remove",{removed:t,panes:this.panes.map(s=>({min:s.min,max:s.max,size:s.size}))})})},resetPaneSizes(e={}){!e.addedPane&&!e.removedPane?this.initialPanesSizing():this.panes.some(i=>i.givenSize!==null||i.min||i.max<100)?this.equalizeAfterAddOrRemove(e):this.equalize(),this.ready&&this.$emit("resized",this.panes.map(i=>({min:i.min,max:i.max,size:i.size})))},equalize(){const e=100/this.panesCount;let i=0,t=[],s=[];this.panes.forEach(n=>{n.size=Math.max(Math.min(e,n.max),n.min),i-=n.size,n.size>=n.max&&t.push(n.id),n.size<=n.min&&s.push(n.id)}),i>.1&&this.readjustSizes(i,t,s)},initialPanesSizing(){100/this.panesCount;let e=100,i=[],t=[],s=0;this.panes.forEach(a=>{e-=a.size,a.size!==null&&s++,a.size>=a.max&&i.push(a.id),a.size<=a.min&&t.push(a.id)});let n=100;e>.1&&(this.panes.forEach(a=>{a.size===null&&(a.size=Math.max(Math.min(e/(this.panesCount-s),a.max),a.min)),n-=a.size}),n>.1&&this.readjustSizes(e,i,t))},equalizeAfterAddOrRemove({addedPane:e,removedPane:i}={}){let t=100/this.panesCount,s=0,n=[],a=[];e&&e.givenSize!==null&&(t=(100-e.givenSize)/(this.panesCount-1)),this.panes.forEach(r=>{s-=r.size,r.size>=r.max&&n.push(r.id),r.size<=r.min&&a.push(r.id)}),!(Math.abs(s)<.1)&&(this.panes.forEach(r=>{e&&e.givenSize!==null&&e.id===r.id||(r.size=Math.max(Math.min(t,r.max),r.min)),s-=r.size,r.size>=r.max&&n.push(r.id),r.size<=r.min&&a.push(r.id)}),s>.1&&this.readjustSizes(s,n,a))},readjustSizes(e,i,t){let s;e>0?s=e/(this.panesCount-i.length):s=e/(this.panesCount-t.length),this.panes.forEach((n,a)=>{if(e>0&&!i.includes(n.id)){const r=Math.max(Math.min(n.size+s,n.max),n.min);e-=r-n.size,n.size=r}else if(!t.includes(n.id)){const r=Math.max(Math.min(n.size+s,n.max),n.min);e-=r-n.size,n.size=r}n.update({[this.horizontal?"height":"width"]:`${this.indexedPanes[n.id].size}%`})}),Math.abs(e)>.1&&this.$nextTick(()=>{this.ready&&console.warn("Splitpanes: Could not resize panes correctly due to their constraints.")})}},watch:{panes:{deep:!0,immediate:!1,handler(){this.updatePaneComponents()}},horizontal(){this.updatePaneComponents()},firstSplitter(){this.redoSplitters()},dblClickSplitter(e){[...this.container.querySelectorAll(".splitpanes__splitter")].forEach((t,s)=>{t.ondblclick=e?n=>this.onSplitterDblClick(n,s):void 0})}},beforeUnmount(){this.ready=!1},mounted(){this.container=this.$refs.container,this.checkSplitpanesNodes(),this.redoSplitters(),this.resetPaneSizes(),this.$emit("ready"),this.ready=!0},render(){return l.h("div",{ref:"container",class:["splitpanes",`splitpanes--${this.horizontal?"horizontal":"vertical"}`,{"splitpanes--dragging":this.touch.dragging}]},this.$slots.default())}};var y=(e,i)=>{const t=e.__vccOpts||e;for(const[s,n]of i)t[s]=n;return t};const E={name:"pane",inject:["requestUpdate","onPaneAdd","onPaneRemove","onPaneClick"],props:{size:{type:[Number,String],default:null},minSize:{type:[Number,String],default:0},maxSize:{type:[Number,String],default:100}},data:()=>({style:{}}),mounted(){this.onPaneAdd(this)},beforeUnmount(){this.onPaneRemove(this)},methods:{update(e){this.style=e}},computed:{sizeNumber(){return this.size||this.size===0?parseFloat(this.size):null},minSizeNumber(){return parseFloat(this.minSize)},maxSizeNumber(){return parseFloat(this.maxSize)}},watch:{sizeNumber(e){this.requestUpdate({target:this,size:e})},minSizeNumber(e){this.requestUpdate({target:this,min:e})},maxSizeNumber(e){this.requestUpdate({target:this,max:e})}}};function _(e,i,t,s,n,a){return l.openBlock(),l.createElementBlock("div",{class:"splitpanes__pane",onClick:i[0]||(i[0]=r=>a.onPaneClick(r,e._.uid)),style:l.normalizeStyle(e.style)},[l.renderSlot(e.$slots,"default")],4)}var k=y(E,[["render",_]]);exports.Pane=k;exports.Splitpanes=C;
